// Package backup provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/oapi-codegen version v0.4.0 DO NOT EDIT.
package backup

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	common "github.com/SchwarzIT/community-stackit-go-client/internal/common"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
	"github.com/do87/oapi-codegen/pkg/runtime"
	openapi_types "github.com/do87/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for RestoresCreateParamsRestoreTarget.
const (
	RestoresCreateParamsRestoreTargetALERT_CONFIG  RestoresCreateParamsRestoreTarget = "alertConfig"
	RestoresCreateParamsRestoreTargetALERT_RULES   RestoresCreateParamsRestoreTarget = "alertRules"
	RestoresCreateParamsRestoreTargetGRAFANA       RestoresCreateParamsRestoreTarget = "grafana"
	RestoresCreateParamsRestoreTargetSCRAPE_CONFIG RestoresCreateParamsRestoreTarget = "scrapeConfig"
)

// Defines values for SchedulesListParamsBackupTarget.
const (
	SchedulesListParamsBackupTargetALERT_CONFIG  SchedulesListParamsBackupTarget = "alertConfig"
	SchedulesListParamsBackupTargetALERT_RULES   SchedulesListParamsBackupTarget = "alertRules"
	SchedulesListParamsBackupTargetGRAFANA       SchedulesListParamsBackupTarget = "grafana"
	SchedulesListParamsBackupTargetSCRAPE_CONFIG SchedulesListParamsBackupTarget = "scrapeConfig"
)

// Defines values for SchedulesCreateParamsBackupTarget.
const (
	SchedulesCreateParamsBackupTargetALERT_CONFIG  SchedulesCreateParamsBackupTarget = "alertConfig"
	SchedulesCreateParamsBackupTargetALERT_RULES   SchedulesCreateParamsBackupTarget = "alertRules"
	SchedulesCreateParamsBackupTargetGRAFANA       SchedulesCreateParamsBackupTarget = "grafana"
	SchedulesCreateParamsBackupTargetSCRAPE_CONFIG SchedulesCreateParamsBackupTarget = "scrapeConfig"
)

// Defines values for ListParamsBackupTarget.
const (
	ListParamsBackupTargetALERT_CONFIG  ListParamsBackupTarget = "alertConfig"
	ListParamsBackupTargetALERT_RULES   ListParamsBackupTarget = "alertRules"
	ListParamsBackupTargetGRAFANA       ListParamsBackupTarget = "grafana"
	ListParamsBackupTargetSCRAPE_CONFIG ListParamsBackupTarget = "scrapeConfig"
)

// Defines values for CreateParamsBackupTarget.
const (
	ALERT_CONFIG  CreateParamsBackupTarget = "alertConfig"
	ALERT_RULES   CreateParamsBackupTarget = "alertRules"
	GRAFANA       CreateParamsBackupTarget = "grafana"
	SCRAPE_CONFIG CreateParamsBackupTarget = "scrapeConfig"
)

// BackupResponse defines model for BackupResponse.
type BackupResponse struct {
	AlertConfigBackups  []string `json:"alertConfigBackups"`
	AlertRulesBackups   []string `json:"alertRulesBackups"`
	GrafanaBackups      []string `json:"grafanaBackups"`
	Message             string   `json:"message"`
	ScrapeConfigBackups []string `json:"scrapeConfigBackups"`
}

// BackupRetentionResponse defines model for BackupRetentionResponse.
type BackupRetentionResponse struct {
	AlertConfigBackupRetention  string `json:"alertConfigBackupRetention"`
	AlertRulesBackupRetention   string `json:"alertRulesBackupRetention"`
	GrafanaBackupRetention      string `json:"grafanaBackupRetention"`
	Message                     string `json:"message"`
	ScrapeConfigBackupRetention string `json:"scrapeConfigBackupRetention"`
}

// BackupScheduleModelJson defines model for BackupScheduleModelJson.
type BackupScheduleModelJson struct {
	Schedule   string             `json:"schedule"`
	ScheduleID openapi_types.UUID `json:"scheduleId"`
}

// BackupSchedulePostResponse defines model for BackupSchedulePostResponse.
type BackupSchedulePostResponse struct {
	Message  string `json:"message"`
	Schedule string `json:"schedule"`
}

// BackupScheduleResponse defines model for BackupScheduleResponse.
type BackupScheduleResponse struct {
	AlertConfigBackupSchedules  *[]BackupScheduleModelJson `json:"alertConfigBackupSchedules,omitempty"`
	AlertRulesBackupSchedules   *[]BackupScheduleModelJson `json:"alertRulesBackupSchedules,omitempty"`
	GrafanaBackupSchedules      *[]BackupScheduleModelJson `json:"grafanaBackupSchedules,omitempty"`
	Message                     string                     `json:"message"`
	ScrapeConfigBackupSchedules *[]BackupScheduleModelJson `json:"scrapeConfigBackupSchedules,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Errors  *[]map[string]string `json:"errors,omitempty"`
	Message string               `json:"message"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied struct {
	Detail string `json:"detail"`
}

// RestoresCreateParams defines parameters for RestoresCreate.
type RestoresCreateParams struct {
	// RestoreTarget List of restore targets
	RestoreTarget RestoresCreateParamsRestoreTarget `form:"restoreTarget" json:"restoreTarget"`
}

// RestoresCreateParamsRestoreTarget defines parameters for RestoresCreate.
type RestoresCreateParamsRestoreTarget string

// SchedulesListParams defines parameters for SchedulesList.
type SchedulesListParams struct {
	// BackupTarget List of backup targets
	BackupTarget *[]SchedulesListParamsBackupTarget `form:"backupTarget,omitempty" json:"backupTarget,omitempty"`
}

// SchedulesListParamsBackupTarget defines parameters for SchedulesList.
type SchedulesListParamsBackupTarget string

// SchedulesCreateJSONBody defines parameters for SchedulesCreate.
type SchedulesCreateJSONBody struct {
	// Schedule The schedule for how often to create a backup.
	// `Additional Validators:`
	// * must be a valid cronjob format
	// * must run less than hourly
	Schedule string `json:"schedule"`
}

// SchedulesCreateParams defines parameters for SchedulesCreate.
type SchedulesCreateParams struct {
	// BackupTarget List of backup targets
	BackupTarget *[]SchedulesCreateParamsBackupTarget `form:"backupTarget,omitempty" json:"backupTarget,omitempty"`
}

// SchedulesCreateParamsBackupTarget defines parameters for SchedulesCreate.
type SchedulesCreateParamsBackupTarget string

// ListParams defines parameters for List.
type ListParams struct {
	// BackupTarget List of backup targets
	BackupTarget *[]ListParamsBackupTarget `form:"backupTarget,omitempty" json:"backupTarget,omitempty"`
}

// ListParamsBackupTarget defines parameters for List.
type ListParamsBackupTarget string

// CreateParams defines parameters for Create.
type CreateParams struct {
	// BackupTarget List of backup targets
	BackupTarget *[]CreateParamsBackupTarget `form:"backupTarget,omitempty" json:"backupTarget,omitempty"`
}

// CreateParamsBackupTarget defines parameters for Create.
type CreateParamsBackupTarget string

// SchedulesCreateJSONRequestBody defines body for SchedulesCreate for application/json ContentType.
type SchedulesCreateJSONRequestBody SchedulesCreateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client common.Client
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, httpClient common.Client) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type ClientInterface interface {
	// RestoresCreate request
	RestoresCreate(ctx context.Context, projectID string, instanceID string, backupDate string, params *RestoresCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RetentionsList request
	RetentionsList(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesList request
	SchedulesList(ctx context.Context, projectID string, instanceID string, params *SchedulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SchedulesCreate request with any body
	SchedulesCreateWithBody(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SchedulesCreate(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, body SchedulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List request
	List(ctx context.Context, projectID string, instanceID string, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create request
	Create(ctx context.Context, projectID string, instanceID string, params *CreateParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) RestoresCreate(ctx context.Context, projectID string, instanceID string, backupDate string, params *RestoresCreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRestoresCreateRequest(ctx, c.Server, projectID, instanceID, backupDate, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RetentionsList(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRetentionsListRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesList(ctx context.Context, projectID string, instanceID string, params *SchedulesListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesListRequest(ctx, c.Server, projectID, instanceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesCreateWithBody(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesCreateRequestWithBody(ctx, c.Server, projectID, instanceID, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SchedulesCreate(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, body SchedulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSchedulesCreateRequest(ctx, c.Server, projectID, instanceID, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) List(ctx context.Context, projectID string, instanceID string, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(ctx, c.Server, projectID, instanceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create(ctx context.Context, projectID string, instanceID string, params *CreateParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(ctx, c.Server, projectID, instanceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewRestoresCreateRequest generates requests for RestoresCreate
func NewRestoresCreateRequest(ctx context.Context, server string, projectID string, instanceID string, backupDate string, params *RestoresCreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "backupDate", runtime.ParamLocationPath, backupDate)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backup-restores/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "restoreTarget", runtime.ParamLocationQuery, params.RestoreTarget); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRetentionsListRequest generates requests for RetentionsList
func NewRetentionsListRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backup-retentions", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulesListRequest generates requests for SchedulesList
func NewSchedulesListRequest(ctx context.Context, server string, projectID string, instanceID string, params *SchedulesListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backup-schedules", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupTarget != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "backupTarget", runtime.ParamLocationQuery, *params.BackupTarget); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSchedulesCreateRequest calls the generic SchedulesCreate builder with application/json body
func NewSchedulesCreateRequest(ctx context.Context, server string, projectID string, instanceID string, params *SchedulesCreateParams, body SchedulesCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSchedulesCreateRequestWithBody(ctx, server, projectID, instanceID, params, "application/json", bodyReader)
}

// NewSchedulesCreateRequestWithBody generates requests for SchedulesCreate with any type of body
func NewSchedulesCreateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, params *SchedulesCreateParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backup-schedules", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupTarget != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "backupTarget", runtime.ParamLocationQuery, *params.BackupTarget); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRequest generates requests for List
func NewListRequest(ctx context.Context, server string, projectID string, instanceID string, params *ListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupTarget != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "backupTarget", runtime.ParamLocationQuery, *params.BackupTarget); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest generates requests for Create
func NewCreateRequest(ctx context.Context, server string, projectID string, instanceID string, params *CreateParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.BackupTarget != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", false, "backupTarget", runtime.ParamLocationQuery, *params.BackupTarget); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, httpClient common.Client) *ClientWithResponses {
	return &ClientWithResponses{NewClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// RestoresCreate request
	RestoresCreateWithResponse(ctx context.Context, projectID string, instanceID string, backupDate string, params *RestoresCreateParams, reqEditors ...RequestEditorFn) (*RestoresCreateResponse, error)

	// RetentionsList request
	RetentionsListWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*RetentionsListResponse, error)

	// SchedulesList request
	SchedulesListWithResponse(ctx context.Context, projectID string, instanceID string, params *SchedulesListParams, reqEditors ...RequestEditorFn) (*SchedulesListResponse, error)

	// SchedulesCreate request with any body
	SchedulesCreateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulesCreateResponse, error)

	SchedulesCreateWithResponse(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, body SchedulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulesCreateResponse, error)

	// List request
	ListWithResponse(ctx context.Context, projectID string, instanceID string, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// Create request
	CreateWithResponse(ctx context.Context, projectID string, instanceID string, params *CreateParams, reqEditors ...RequestEditorFn) (*CreateResponse, error)
}

type RestoresCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Message
	JSON403      *PermissionDenied
	JSON404      *Message
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RestoresCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RestoresCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RetentionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupRetentionResponse
	JSON403      *PermissionDenied
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RetentionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RetentionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupScheduleResponse
	JSON403      *PermissionDenied
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SchedulesListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SchedulesCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *BackupSchedulePostResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SchedulesCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SchedulesCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BackupResponse
	JSON403      *PermissionDenied
	JSON502      *Message
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *Message
	JSON400      *Error
	JSON403      *PermissionDenied
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// RestoresCreateWithResponse request returning *RestoresCreateResponse
func (c *ClientWithResponses) RestoresCreateWithResponse(ctx context.Context, projectID string, instanceID string, backupDate string, params *RestoresCreateParams, reqEditors ...RequestEditorFn) (*RestoresCreateResponse, error) {
	rsp, err := c.RestoresCreate(ctx, projectID, instanceID, backupDate, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRestoresCreateResponse(rsp)
}

// RetentionsListWithResponse request returning *RetentionsListResponse
func (c *ClientWithResponses) RetentionsListWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*RetentionsListResponse, error) {
	rsp, err := c.RetentionsList(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRetentionsListResponse(rsp)
}

// SchedulesListWithResponse request returning *SchedulesListResponse
func (c *ClientWithResponses) SchedulesListWithResponse(ctx context.Context, projectID string, instanceID string, params *SchedulesListParams, reqEditors ...RequestEditorFn) (*SchedulesListResponse, error) {
	rsp, err := c.SchedulesList(ctx, projectID, instanceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSchedulesListResponse(rsp)
}

// SchedulesCreateWithBodyWithResponse request with arbitrary body returning *SchedulesCreateResponse
func (c *ClientWithResponses) SchedulesCreateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SchedulesCreateResponse, error) {
	rsp, err := c.SchedulesCreateWithBody(ctx, projectID, instanceID, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSchedulesCreateResponse(rsp)
}

func (c *ClientWithResponses) SchedulesCreateWithResponse(ctx context.Context, projectID string, instanceID string, params *SchedulesCreateParams, body SchedulesCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SchedulesCreateResponse, error) {
	rsp, err := c.SchedulesCreate(ctx, projectID, instanceID, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSchedulesCreateResponse(rsp)
}

// ListWithResponse request returning *ListResponse
func (c *ClientWithResponses) ListWithResponse(ctx context.Context, projectID string, instanceID string, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.List(ctx, projectID, instanceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListResponse(rsp)
}

// CreateWithResponse request returning *CreateResponse
func (c *ClientWithResponses) CreateWithResponse(ctx context.Context, projectID string, instanceID string, params *CreateParams, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.Create(ctx, projectID, instanceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

// ParseRestoresCreateResponse parses an HTTP response from a RestoresCreateWithResponse call
func (c *ClientWithResponses) ParseRestoresCreateResponse(rsp *http.Response) (*RestoresCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RestoresCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseRetentionsListResponse parses an HTTP response from a RetentionsListWithResponse call
func (c *ClientWithResponses) ParseRetentionsListResponse(rsp *http.Response) (*RetentionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RetentionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupRetentionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSchedulesListResponse parses an HTTP response from a SchedulesListWithResponse call
func (c *ClientWithResponses) ParseSchedulesListResponse(rsp *http.Response) (*SchedulesListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupScheduleResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSchedulesCreateResponse parses an HTTP response from a SchedulesCreateWithResponse call
func (c *ClientWithResponses) ParseSchedulesCreateResponse(rsp *http.Response) (*SchedulesCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SchedulesCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest BackupSchedulePostResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseListResponse parses an HTTP response from a ListWithResponse call
func (c *ClientWithResponses) ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BackupResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseCreateResponse parses an HTTP response from a CreateWithResponse call
func (c *ClientWithResponses) ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	}

	return response, nil
}
