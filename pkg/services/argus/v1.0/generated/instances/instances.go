// Package instances provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/oapi-codegen version v0.5.1 DO NOT EDIT.
package instances

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	common "github.com/SchwarzIT/community-stackit-go-client/internal/common"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
	"github.com/do87/oapi-codegen/pkg/runtime"
	openapi_types "github.com/do87/oapi-codegen/pkg/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ProjectInstanceFullStatus.
const (
	PROJECT_INSTANCE_FULL_STATUS_CREATE_FAILED    ProjectInstanceFullStatus = "CREATE_FAILED"
	PROJECT_INSTANCE_FULL_STATUS_CREATE_SUCCEEDED ProjectInstanceFullStatus = "CREATE_SUCCEEDED"
	PROJECT_INSTANCE_FULL_STATUS_CREATING         ProjectInstanceFullStatus = "CREATING"
	PROJECT_INSTANCE_FULL_STATUS_DELETE_FAILED    ProjectInstanceFullStatus = "DELETE_FAILED"
	PROJECT_INSTANCE_FULL_STATUS_DELETE_SUCCEEDED ProjectInstanceFullStatus = "DELETE_SUCCEEDED"
	PROJECT_INSTANCE_FULL_STATUS_DELETING         ProjectInstanceFullStatus = "DELETING"
	PROJECT_INSTANCE_FULL_STATUS_UPDATE_FAILED    ProjectInstanceFullStatus = "UPDATE_FAILED"
	PROJECT_INSTANCE_FULL_STATUS_UPDATE_SUCCEEDED ProjectInstanceFullStatus = "UPDATE_SUCCEEDED"
	PROJECT_INSTANCE_FULL_STATUS_UPDATING         ProjectInstanceFullStatus = "UPDATING"
)

// Defines values for ProjectInstanceUIStatus.
const (
	PROJECT_INSTANCE_UI_STATUS_CREATE_FAILED    ProjectInstanceUIStatus = "CREATE_FAILED"
	PROJECT_INSTANCE_UI_STATUS_CREATE_SUCCEEDED ProjectInstanceUIStatus = "CREATE_SUCCEEDED"
	PROJECT_INSTANCE_UI_STATUS_CREATING         ProjectInstanceUIStatus = "CREATING"
	PROJECT_INSTANCE_UI_STATUS_DELETE_FAILED    ProjectInstanceUIStatus = "DELETE_FAILED"
	PROJECT_INSTANCE_UI_STATUS_DELETE_SUCCEEDED ProjectInstanceUIStatus = "DELETE_SUCCEEDED"
	PROJECT_INSTANCE_UI_STATUS_DELETING         ProjectInstanceUIStatus = "DELETING"
	PROJECT_INSTANCE_UI_STATUS_UPDATE_FAILED    ProjectInstanceUIStatus = "UPDATE_FAILED"
	PROJECT_INSTANCE_UI_STATUS_UPDATE_SUCCEEDED ProjectInstanceUIStatus = "UPDATE_SUCCEEDED"
	PROJECT_INSTANCE_UI_STATUS_UPDATING         ProjectInstanceUIStatus = "UPDATING"
)

// APIUserCreated defines model for APIUserCreated.
type APIUserCreated struct {
	APIURL        string `json:"apiUrl"`
	APIURLSwagger string `json:"apiUrlSwagger"`
	InstanceID    string `json:"instanceId"`
	Message       string `json:"message"`
	Password      string `json:"password"`
	Username      string `json:"username"`
}

// APIUserProjectCreated defines model for APIUserProjectCreated.
type APIUserProjectCreated struct {
	Credentials Credentials `json:"credentials"`
	Message     string      `json:"message"`
}

// Credentials defines model for Credentials.
type Credentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CredentialsListResponse defines model for CredentialsListResponse.
type CredentialsListResponse struct {
	Credentials []ServiceKeysList `json:"credentials"`
	Message     string            `json:"message"`
}

// CredentialsRemoteWriteDeleteResponse defines model for CredentialsRemoteWriteDeleteResponse.
type CredentialsRemoteWriteDeleteResponse struct {
	MaxLimit int    `json:"maxLimit"`
	Message  string `json:"message"`
}

// CredentialsRemoteWriteResponse defines model for CredentialsRemoteWriteResponse.
type CredentialsRemoteWriteResponse struct {
	CredentialsMaxLimit int    `json:"credentialsMaxLimit"`
	MaxLimit            int    `json:"maxLimit"`
	Message             string `json:"message"`
}

// Error defines model for Error.
type Error struct {
	Errors  *[]map[string]string `json:"errors,omitempty"`
	Message string               `json:"message"`
}

// InstanceSensitiveData defines model for InstanceSensitiveData.
type InstanceSensitiveData struct {
	AlertingURL             string    `json:"alertingUrl"`
	Cluster                 string    `json:"cluster"`
	DashboardURL            string    `json:"dashboardUrl"`
	GrafanaAdminPassword    string    `json:"grafanaAdminPassword"`
	GrafanaAdminUser        string    `json:"grafanaAdminUser"`
	GrafanaPublicReadAccess bool      `json:"grafanaPublicReadAccess"`
	GrafanaURL              string    `json:"grafanaUrl"`
	Instance                string    `json:"instance"`
	JaegerTracesURL         string    `json:"jaegerTracesUrl"`
	JaegerUiURL             string    `json:"jaegerUiUrl"`
	LogsPushURL             string    `json:"logsPushUrl"`
	LogsURL                 string    `json:"logsUrl"`
	MetricsRetentionTime1h  int       `json:"metricsRetentionTime1h"`
	MetricsRetentionTime5m  int       `json:"metricsRetentionTime5m"`
	MetricsRetentionTimeRaw int       `json:"metricsRetentionTimeRaw"`
	MetricsURL              string    `json:"metricsUrl"`
	Name                    *string   `json:"name,omitempty"`
	OtlpTracesURL           string    `json:"otlpTracesUrl"`
	Plan                    PlanModel `json:"plan"`
	PushMetricsURL          string    `json:"pushMetricsUrl"`
	TargetsURL              string    `json:"targetsUrl"`
	ZipkinSpansURL          string    `json:"zipkinSpansUrl"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied struct {
	Detail string `json:"detail"`
}

// PlanModel defines model for PlanModel.
type PlanModel struct {
	AlertMatchers           int                `json:"alertMatchers"`
	AlertReceivers          int                `json:"alertReceivers"`
	AlertRules              int                `json:"alertRules"`
	Amount                  *float32           `json:"amount,omitempty"`
	BucketSize              int                `json:"bucketSize"`
	Description             *string            `json:"description,omitempty"`
	GrafanaGlobalDashboards int                `json:"grafanaGlobalDashboards"`
	GrafanaGlobalOrgs       int                `json:"grafanaGlobalOrgs"`
	GrafanaGlobalSessions   int                `json:"grafanaGlobalSessions"`
	GrafanaGlobalUsers      int                `json:"grafanaGlobalUsers"`
	ID                      openapi_types.UUID `json:"id"`
	LogsAlert               int                `json:"logsAlert"`
	LogsStorage             int                `json:"logsStorage"`
	Name                    *string            `json:"name,omitempty"`
	PlanID                  openapi_types.UUID `json:"planId"`
	SamplesPerScrape        int                `json:"samplesPerScrape"`
	TargetNumber            int                `json:"targetNumber"`
	TracesStorage           int                `json:"tracesStorage"`
}

// ProjectInstanceFull defines model for ProjectInstanceFull.
type ProjectInstanceFull struct {
	Error       *string                   `json:"error"`
	ID          string                    `json:"id"`
	Instance    string                    `json:"instance"`
	Name        *string                   `json:"name,omitempty"`
	PlanName    string                    `json:"planName"`
	ServiceName string                    `json:"serviceName"`
	Status      ProjectInstanceFullStatus `json:"status"`
}

// ProjectInstanceFullStatus defines model for ProjectInstanceFull.Status.
type ProjectInstanceFullStatus string

// ProjectInstanceFullMany defines model for ProjectInstanceFullMany.
type ProjectInstanceFullMany struct {
	Instances []ProjectInstanceFull `json:"instances"`
	Message   string                `json:"message"`
}

// ProjectInstanceUI defines model for ProjectInstanceUI.
type ProjectInstanceUI struct {
	DashboardURL string                  `json:"dashboardUrl"`
	Error        *string                 `json:"error"`
	ID           string                  `json:"id"`
	Instance     InstanceSensitiveData   `json:"instance"`
	IsUpdatable  *bool                   `json:"isUpdatable,omitempty"`
	Message      string                  `json:"message"`
	Name         *string                 `json:"name,omitempty"`
	Parameters   *map[string]string      `json:"parameters,omitempty"`
	PlanID       string                  `json:"planId"`
	PlanName     string                  `json:"planName"`
	PlanSchema   *string                 `json:"planSchema,omitempty"`
	ServiceName  string                  `json:"serviceName"`
	Status       ProjectInstanceUIStatus `json:"status"`
}

// ProjectInstanceUIStatus defines model for ProjectInstanceUI.Status.
type ProjectInstanceUIStatus string

// ProjectInstancesCreateResponse defines model for ProjectInstancesCreateResponse.
type ProjectInstancesCreateResponse struct {
	DashboardURL string `json:"dashboardUrl"`
	InstanceID   string `json:"instanceId"`
	Message      string `json:"message"`
}

// ProjectInstancesUpdateResponse defines model for ProjectInstancesUpdateResponse.
type ProjectInstancesUpdateResponse struct {
	Message string `json:"message"`
}

// ServiceKeysList defines model for ServiceKeysList.
type ServiceKeysList struct {
	CredentialsInfo *map[string]string `json:"credentialsInfo,omitempty"`
	ID              string             `json:"id"`
	Name            string             `json:"name"`
}

// ServiceKeysResponse defines model for ServiceKeysResponse.
type ServiceKeysResponse struct {
	CredentialsInfo *map[string]string `json:"credentialsInfo,omitempty"`
	ID              string             `json:"id"`
	Message         string             `json:"message"`
	Name            string             `json:"name"`
}

// SystemInstance defines model for SystemInstance.
type SystemInstance struct {
	AlertingURL     string  `json:"alertingUrl"`
	Instance        string  `json:"instance"`
	JaegerTracesURL string  `json:"jaegerTracesUrl"`
	JaegerUiURL     string  `json:"jaegerUiUrl"`
	LogsPushURL     string  `json:"logsPushUrl"`
	LogsURL         string  `json:"logsUrl"`
	MetricsURL      string  `json:"metricsUrl"`
	Name            *string `json:"name,omitempty"`
	OtlpTracesURL   string  `json:"otlpTracesUrl"`
	PushMetricsURL  string  `json:"pushMetricsUrl"`
	TargetsURL      string  `json:"targetsUrl"`
	ZipkinSpansURL  string  `json:"zipkinSpansUrl"`
}

// SystemInstanceResponse defines model for SystemInstanceResponse.
type SystemInstanceResponse struct {
	Instance SystemInstance `json:"instance"`
	Message  string         `json:"message"`
}

// InstanceCreateJSONBody defines parameters for InstanceCreate.
type InstanceCreateJSONBody struct {
	// Name Name of the service
	Name *string `json:"name,omitempty"`

	// Parameter additional parameters
	Parameter *map[string]interface{} `json:"parameter,omitempty"`

	// PlanId uuid of the plan to create/update
	PlanID string `json:"planId"`
}

// InstanceUpdateJSONBody defines parameters for InstanceUpdate.
type InstanceUpdateJSONBody struct {
	// Name Name of the service
	Name *string `json:"name,omitempty"`

	// Parameter additional parameters
	Parameter *map[string]interface{} `json:"parameter,omitempty"`

	// PlanId uuid of the plan to create/update
	PlanID string `json:"planId"`
}

// InstanceCredentialsRemoteWriteLimitsUpdateJSONBody defines parameters for InstanceCredentialsRemoteWriteLimitsUpdate.
type InstanceCredentialsRemoteWriteLimitsUpdateJSONBody struct {
	// MaxLimit Remote write metric sample limit for credential to push in a single minute.
	MaxLimit *float32 `json:"maxLimit,omitempty"`
}

// SystemInstancesCredentialsCreateJSONBody defines parameters for SystemInstancesCredentialsCreate.
type SystemInstancesCredentialsCreateJSONBody struct {
	// RemoteWriteMaxLimit Remote write metric sample limit for credential to push in a single minute.
	RemoteWriteMaxLimit *float32 `json:"remoteWriteMaxLimit,omitempty"`
}

// InstanceCreateJSONRequestBody defines body for InstanceCreate for application/json ContentType.
type InstanceCreateJSONRequestBody InstanceCreateJSONBody

// InstanceUpdateJSONRequestBody defines body for InstanceUpdate for application/json ContentType.
type InstanceUpdateJSONRequestBody InstanceUpdateJSONBody

// InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody defines body for InstanceCredentialsRemoteWriteLimitsUpdate for application/json ContentType.
type InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody InstanceCredentialsRemoteWriteLimitsUpdateJSONBody

// SystemInstancesCredentialsCreateJSONRequestBody defines body for SystemInstancesCredentialsCreate for application/json ContentType.
type SystemInstancesCredentialsCreateJSONRequestBody SystemInstancesCredentialsCreateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client common.Client
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, httpClient common.Client) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type ClientInterface interface {
	// InstanceList request
	InstanceList(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCreate request with any body
	InstanceCreateWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceCreate(ctx context.Context, projectID string, body InstanceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceDelete request
	InstanceDelete(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceRead request
	InstanceRead(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceUpdate request with any body
	InstanceUpdateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceUpdate(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsList request
	InstanceCredentialsList(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsCreate request
	InstanceCredentialsCreate(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsDelete request
	InstanceCredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsRead request
	InstanceCredentialsRead(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsRemoteWriteLimitsDelete request
	InstanceCredentialsRemoteWriteLimitsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsRemoteWriteLimitsList request
	InstanceCredentialsRemoteWriteLimitsList(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceCredentialsRemoteWriteLimitsUpdate request with any body
	InstanceCredentialsRemoteWriteLimitsUpdateWithBody(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceCredentialsRemoteWriteLimitsUpdate(ctx context.Context, projectID string, instanceID string, username string, body InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemInstancesRead request
	SystemInstancesRead(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemInstancesCredentialsCreate request with any body
	SystemInstancesCredentialsCreateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemInstancesCredentialsCreate(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemInstancesCredentialsDelete request
	SystemInstancesCredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) InstanceList(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceListRequest(ctx, c.Server, projectID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCreateWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCreateRequestWithBody(ctx, c.Server, projectID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCreate(ctx context.Context, projectID string, body InstanceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCreateRequest(ctx, c.Server, projectID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceDelete(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceDeleteRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceRead(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceReadRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceUpdateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceUpdateRequestWithBody(ctx, c.Server, projectID, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceUpdate(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceUpdateRequest(ctx, c.Server, projectID, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsList(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsListRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsCreate(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsCreateRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsDeleteRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsRead(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsReadRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsRemoteWriteLimitsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsRemoteWriteLimitsDeleteRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsRemoteWriteLimitsList(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsRemoteWriteLimitsListRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsRemoteWriteLimitsUpdateWithBody(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsRemoteWriteLimitsUpdateRequestWithBody(ctx, c.Server, projectID, instanceID, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceCredentialsRemoteWriteLimitsUpdate(ctx context.Context, projectID string, instanceID string, username string, body InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceCredentialsRemoteWriteLimitsUpdateRequest(ctx, c.Server, projectID, instanceID, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemInstancesRead(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesReadRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemInstancesCredentialsCreateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesCredentialsCreateRequestWithBody(ctx, c.Server, projectID, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemInstancesCredentialsCreate(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesCredentialsCreateRequest(ctx, c.Server, projectID, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SystemInstancesCredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesCredentialsDeleteRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewInstanceListRequest generates requests for InstanceList
func NewInstanceListRequest(ctx context.Context, server string, projectID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCreateRequest calls the generic InstanceCreate builder with application/json body
func NewInstanceCreateRequest(ctx context.Context, server string, projectID string, body InstanceCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceCreateRequestWithBody(ctx, server, projectID, "application/json", bodyReader)
}

// NewInstanceCreateRequestWithBody generates requests for InstanceCreate with any type of body
func NewInstanceCreateRequestWithBody(ctx context.Context, server string, projectID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceDeleteRequest generates requests for InstanceDelete
func NewInstanceDeleteRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceReadRequest generates requests for InstanceRead
func NewInstanceReadRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceUpdateRequest calls the generic InstanceUpdate builder with application/json body
func NewInstanceUpdateRequest(ctx context.Context, server string, projectID string, instanceID string, body InstanceUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceUpdateRequestWithBody(ctx, server, projectID, instanceID, "application/json", bodyReader)
}

// NewInstanceUpdateRequestWithBody generates requests for InstanceUpdate with any type of body
func NewInstanceUpdateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceCredentialsListRequest generates requests for InstanceCredentialsList
func NewInstanceCredentialsListRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCredentialsCreateRequest generates requests for InstanceCredentialsCreate
func NewInstanceCredentialsCreateRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCredentialsDeleteRequest generates requests for InstanceCredentialsDelete
func NewInstanceCredentialsDeleteRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCredentialsReadRequest generates requests for InstanceCredentialsRead
func NewInstanceCredentialsReadRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCredentialsRemoteWriteLimitsDeleteRequest generates requests for InstanceCredentialsRemoteWriteLimitsDelete
func NewInstanceCredentialsRemoteWriteLimitsDeleteRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s/remote-write-limits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCredentialsRemoteWriteLimitsListRequest generates requests for InstanceCredentialsRemoteWriteLimitsList
func NewInstanceCredentialsRemoteWriteLimitsListRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s/remote-write-limits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceCredentialsRemoteWriteLimitsUpdateRequest calls the generic InstanceCredentialsRemoteWriteLimitsUpdate builder with application/json body
func NewInstanceCredentialsRemoteWriteLimitsUpdateRequest(ctx context.Context, server string, projectID string, instanceID string, username string, body InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceCredentialsRemoteWriteLimitsUpdateRequestWithBody(ctx, server, projectID, instanceID, username, "application/json", bodyReader)
}

// NewInstanceCredentialsRemoteWriteLimitsUpdateRequestWithBody generates requests for InstanceCredentialsRemoteWriteLimitsUpdate with any type of body
func NewInstanceCredentialsRemoteWriteLimitsUpdateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s/remote-write-limits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemInstancesReadRequest generates requests for SystemInstancesRead
func NewSystemInstancesReadRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemInstancesCredentialsCreateRequest calls the generic SystemInstancesCredentialsCreate builder with application/json body
func NewSystemInstancesCredentialsCreateRequest(ctx context.Context, server string, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemInstancesCredentialsCreateRequestWithBody(ctx, server, projectID, instanceID, "application/json", bodyReader)
}

// NewSystemInstancesCredentialsCreateRequestWithBody generates requests for SystemInstancesCredentialsCreate with any type of body
func NewSystemInstancesCredentialsCreateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/projects/%s/instances/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemInstancesCredentialsDeleteRequest generates requests for SystemInstancesCredentialsDelete
func NewSystemInstancesCredentialsDeleteRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/projects/%s/instances/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, httpClient common.Client) *ClientWithResponses {
	return &ClientWithResponses{NewClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// InstanceList request
	InstanceListWithResponse(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*InstanceListResponse, error)

	// InstanceCreate request with any body
	InstanceCreateWithBodyWithResponse(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceCreateResponse, error)

	InstanceCreateWithResponse(ctx context.Context, projectID string, body InstanceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceCreateResponse, error)

	// InstanceDelete request
	InstanceDeleteWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceDeleteResponse, error)

	// InstanceRead request
	InstanceReadWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceReadResponse, error)

	// InstanceUpdate request with any body
	InstanceUpdateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error)

	InstanceUpdateWithResponse(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error)

	// InstanceCredentialsList request
	InstanceCredentialsListWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceCredentialsListResponse, error)

	// InstanceCredentialsCreate request
	InstanceCredentialsCreateWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceCredentialsCreateResponse, error)

	// InstanceCredentialsDelete request
	InstanceCredentialsDeleteWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsDeleteResponse, error)

	// InstanceCredentialsRead request
	InstanceCredentialsReadWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsReadResponse, error)

	// InstanceCredentialsRemoteWriteLimitsDelete request
	InstanceCredentialsRemoteWriteLimitsDeleteWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsDeleteResponse, error)

	// InstanceCredentialsRemoteWriteLimitsList request
	InstanceCredentialsRemoteWriteLimitsListWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsListResponse, error)

	// InstanceCredentialsRemoteWriteLimitsUpdate request with any body
	InstanceCredentialsRemoteWriteLimitsUpdateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsUpdateResponse, error)

	InstanceCredentialsRemoteWriteLimitsUpdateWithResponse(ctx context.Context, projectID string, instanceID string, username string, body InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsUpdateResponse, error)

	// SystemInstancesRead request
	SystemInstancesReadWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*SystemInstancesReadResponse, error)

	// SystemInstancesCredentialsCreate request with any body
	SystemInstancesCredentialsCreateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error)

	SystemInstancesCredentialsCreateWithResponse(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error)

	// SystemInstancesCredentialsDelete request
	SystemInstancesCredentialsDeleteWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsDeleteResponse, error)
}

type InstanceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectInstanceFullMany
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectInstancesCreateResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectInstancesUpdateResponse
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectInstanceUI
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectInstancesUpdateResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CredentialsListResponse
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIUserProjectCreated
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON500      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceKeysResponse
	JSON403      *PermissionDenied
	JSON404      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsRemoteWriteLimitsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsRemoteWriteDeleteResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON502      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsRemoteWriteLimitsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsRemoteWriteLimitsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsRemoteWriteLimitsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsRemoteWriteResponse
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON502      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsRemoteWriteLimitsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsRemoteWriteLimitsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceCredentialsRemoteWriteLimitsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsRemoteWriteResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON502      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceCredentialsRemoteWriteLimitsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceCredentialsRemoteWriteLimitsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemInstancesReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemInstanceResponse
	JSON403      *PermissionDenied
	JSON404      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SystemInstancesReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemInstancesReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemInstancesCredentialsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIUserCreated
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SystemInstancesCredentialsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemInstancesCredentialsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemInstancesCredentialsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON500      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SystemInstancesCredentialsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemInstancesCredentialsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// InstanceListWithResponse request returning *InstanceListResponse
func (c *ClientWithResponses) InstanceListWithResponse(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*InstanceListResponse, error) {
	rsp, err := c.InstanceList(ctx, projectID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceListResponse(rsp)
}

// InstanceCreateWithBodyWithResponse request with arbitrary body returning *InstanceCreateResponse
func (c *ClientWithResponses) InstanceCreateWithBodyWithResponse(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceCreateResponse, error) {
	rsp, err := c.InstanceCreateWithBody(ctx, projectID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCreateResponse(rsp)
}

func (c *ClientWithResponses) InstanceCreateWithResponse(ctx context.Context, projectID string, body InstanceCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceCreateResponse, error) {
	rsp, err := c.InstanceCreate(ctx, projectID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCreateResponse(rsp)
}

// InstanceDeleteWithResponse request returning *InstanceDeleteResponse
func (c *ClientWithResponses) InstanceDeleteWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceDeleteResponse, error) {
	rsp, err := c.InstanceDelete(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceDeleteResponse(rsp)
}

// InstanceReadWithResponse request returning *InstanceReadResponse
func (c *ClientWithResponses) InstanceReadWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceReadResponse, error) {
	rsp, err := c.InstanceRead(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceReadResponse(rsp)
}

// InstanceUpdateWithBodyWithResponse request with arbitrary body returning *InstanceUpdateResponse
func (c *ClientWithResponses) InstanceUpdateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error) {
	rsp, err := c.InstanceUpdateWithBody(ctx, projectID, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceUpdateResponse(rsp)
}

func (c *ClientWithResponses) InstanceUpdateWithResponse(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error) {
	rsp, err := c.InstanceUpdate(ctx, projectID, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceUpdateResponse(rsp)
}

// InstanceCredentialsListWithResponse request returning *InstanceCredentialsListResponse
func (c *ClientWithResponses) InstanceCredentialsListWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceCredentialsListResponse, error) {
	rsp, err := c.InstanceCredentialsList(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsListResponse(rsp)
}

// InstanceCredentialsCreateWithResponse request returning *InstanceCredentialsCreateResponse
func (c *ClientWithResponses) InstanceCredentialsCreateWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceCredentialsCreateResponse, error) {
	rsp, err := c.InstanceCredentialsCreate(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsCreateResponse(rsp)
}

// InstanceCredentialsDeleteWithResponse request returning *InstanceCredentialsDeleteResponse
func (c *ClientWithResponses) InstanceCredentialsDeleteWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsDeleteResponse, error) {
	rsp, err := c.InstanceCredentialsDelete(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsDeleteResponse(rsp)
}

// InstanceCredentialsReadWithResponse request returning *InstanceCredentialsReadResponse
func (c *ClientWithResponses) InstanceCredentialsReadWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsReadResponse, error) {
	rsp, err := c.InstanceCredentialsRead(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsReadResponse(rsp)
}

// InstanceCredentialsRemoteWriteLimitsDeleteWithResponse request returning *InstanceCredentialsRemoteWriteLimitsDeleteResponse
func (c *ClientWithResponses) InstanceCredentialsRemoteWriteLimitsDeleteWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsDeleteResponse, error) {
	rsp, err := c.InstanceCredentialsRemoteWriteLimitsDelete(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsRemoteWriteLimitsDeleteResponse(rsp)
}

// InstanceCredentialsRemoteWriteLimitsListWithResponse request returning *InstanceCredentialsRemoteWriteLimitsListResponse
func (c *ClientWithResponses) InstanceCredentialsRemoteWriteLimitsListWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsListResponse, error) {
	rsp, err := c.InstanceCredentialsRemoteWriteLimitsList(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsRemoteWriteLimitsListResponse(rsp)
}

// InstanceCredentialsRemoteWriteLimitsUpdateWithBodyWithResponse request with arbitrary body returning *InstanceCredentialsRemoteWriteLimitsUpdateResponse
func (c *ClientWithResponses) InstanceCredentialsRemoteWriteLimitsUpdateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsUpdateResponse, error) {
	rsp, err := c.InstanceCredentialsRemoteWriteLimitsUpdateWithBody(ctx, projectID, instanceID, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsRemoteWriteLimitsUpdateResponse(rsp)
}

func (c *ClientWithResponses) InstanceCredentialsRemoteWriteLimitsUpdateWithResponse(ctx context.Context, projectID string, instanceID string, username string, body InstanceCredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceCredentialsRemoteWriteLimitsUpdateResponse, error) {
	rsp, err := c.InstanceCredentialsRemoteWriteLimitsUpdate(ctx, projectID, instanceID, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceCredentialsRemoteWriteLimitsUpdateResponse(rsp)
}

// SystemInstancesReadWithResponse request returning *SystemInstancesReadResponse
func (c *ClientWithResponses) SystemInstancesReadWithResponse(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*SystemInstancesReadResponse, error) {
	rsp, err := c.SystemInstancesRead(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesReadResponse(rsp)
}

// SystemInstancesCredentialsCreateWithBodyWithResponse request with arbitrary body returning *SystemInstancesCredentialsCreateResponse
func (c *ClientWithResponses) SystemInstancesCredentialsCreateWithBodyWithResponse(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error) {
	rsp, err := c.SystemInstancesCredentialsCreateWithBody(ctx, projectID, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesCredentialsCreateResponse(rsp)
}

func (c *ClientWithResponses) SystemInstancesCredentialsCreateWithResponse(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error) {
	rsp, err := c.SystemInstancesCredentialsCreate(ctx, projectID, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesCredentialsCreateResponse(rsp)
}

// SystemInstancesCredentialsDeleteWithResponse request returning *SystemInstancesCredentialsDeleteResponse
func (c *ClientWithResponses) SystemInstancesCredentialsDeleteWithResponse(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsDeleteResponse, error) {
	rsp, err := c.SystemInstancesCredentialsDelete(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesCredentialsDeleteResponse(rsp)
}

// ParseInstanceListResponse parses an HTTP response from a InstanceListWithResponse call
func (c *ClientWithResponses) ParseInstanceListResponse(rsp *http.Response) (*InstanceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectInstanceFullMany
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceCreateResponse parses an HTTP response from a InstanceCreateWithResponse call
func (c *ClientWithResponses) ParseInstanceCreateResponse(rsp *http.Response) (*InstanceCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectInstancesCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceDeleteResponse parses an HTTP response from a InstanceDeleteWithResponse call
func (c *ClientWithResponses) ParseInstanceDeleteResponse(rsp *http.Response) (*InstanceDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectInstancesUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceReadResponse parses an HTTP response from a InstanceReadWithResponse call
func (c *ClientWithResponses) ParseInstanceReadResponse(rsp *http.Response) (*InstanceReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectInstanceUI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceUpdateResponse parses an HTTP response from a InstanceUpdateWithResponse call
func (c *ClientWithResponses) ParseInstanceUpdateResponse(rsp *http.Response) (*InstanceUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectInstancesUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsListResponse parses an HTTP response from a InstanceCredentialsListWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsListResponse(rsp *http.Response) (*InstanceCredentialsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CredentialsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsCreateResponse parses an HTTP response from a InstanceCredentialsCreateWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsCreateResponse(rsp *http.Response) (*InstanceCredentialsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIUserProjectCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsDeleteResponse parses an HTTP response from a InstanceCredentialsDeleteWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsDeleteResponse(rsp *http.Response) (*InstanceCredentialsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsReadResponse parses an HTTP response from a InstanceCredentialsReadWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsReadResponse(rsp *http.Response) (*InstanceCredentialsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsRemoteWriteLimitsDeleteResponse parses an HTTP response from a InstanceCredentialsRemoteWriteLimitsDeleteWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsRemoteWriteLimitsDeleteResponse(rsp *http.Response) (*InstanceCredentialsRemoteWriteLimitsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsRemoteWriteLimitsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsRemoteWriteDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsRemoteWriteLimitsListResponse parses an HTTP response from a InstanceCredentialsRemoteWriteLimitsListWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsRemoteWriteLimitsListResponse(rsp *http.Response) (*InstanceCredentialsRemoteWriteLimitsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsRemoteWriteLimitsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsRemoteWriteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseInstanceCredentialsRemoteWriteLimitsUpdateResponse parses an HTTP response from a InstanceCredentialsRemoteWriteLimitsUpdateWithResponse call
func (c *ClientWithResponses) ParseInstanceCredentialsRemoteWriteLimitsUpdateResponse(rsp *http.Response) (*InstanceCredentialsRemoteWriteLimitsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceCredentialsRemoteWriteLimitsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsRemoteWriteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON502 = &dest

	}

	return response, nil
}

// ParseSystemInstancesReadResponse parses an HTTP response from a SystemInstancesReadWithResponse call
func (c *ClientWithResponses) ParseSystemInstancesReadResponse(rsp *http.Response) (*SystemInstancesReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemInstancesReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemInstanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseSystemInstancesCredentialsCreateResponse parses an HTTP response from a SystemInstancesCredentialsCreateWithResponse call
func (c *ClientWithResponses) ParseSystemInstancesCredentialsCreateResponse(rsp *http.Response) (*SystemInstancesCredentialsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemInstancesCredentialsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIUserCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseSystemInstancesCredentialsDeleteResponse parses an HTTP response from a SystemInstancesCredentialsDeleteWithResponse call
func (c *ClientWithResponses) ParseSystemInstancesCredentialsDeleteResponse(rsp *http.Response) (*SystemInstancesCredentialsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemInstancesCredentialsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, nil
}
