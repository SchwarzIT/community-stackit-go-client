// Package instances provides primitives to interact with the openapi HTTP API.
//
// Code generated by dev.azure.com/schwarzit/schwarzit.odj.core/_git/stackit-client-generator.git version v1.0.23 DO NOT EDIT.
package instances

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/internal/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/internal/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/internal/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ProjectInstanceFullStatus.
const (
	PROJECT_INSTANCE_FULL_STATUS_CREATE_FAILED    ProjectInstanceFullStatus = "CREATE_FAILED"
	PROJECT_INSTANCE_FULL_STATUS_CREATE_SUCCEEDED ProjectInstanceFullStatus = "CREATE_SUCCEEDED"
	PROJECT_INSTANCE_FULL_STATUS_CREATING         ProjectInstanceFullStatus = "CREATING"
	PROJECT_INSTANCE_FULL_STATUS_DELETE_FAILED    ProjectInstanceFullStatus = "DELETE_FAILED"
	PROJECT_INSTANCE_FULL_STATUS_DELETE_SUCCEEDED ProjectInstanceFullStatus = "DELETE_SUCCEEDED"
	PROJECT_INSTANCE_FULL_STATUS_DELETING         ProjectInstanceFullStatus = "DELETING"
	PROJECT_INSTANCE_FULL_STATUS_UPDATE_FAILED    ProjectInstanceFullStatus = "UPDATE_FAILED"
	PROJECT_INSTANCE_FULL_STATUS_UPDATE_SUCCEEDED ProjectInstanceFullStatus = "UPDATE_SUCCEEDED"
	PROJECT_INSTANCE_FULL_STATUS_UPDATING         ProjectInstanceFullStatus = "UPDATING"
)

// Defines values for ProjectInstanceUIStatus.
const (
	PROJECT_INSTANCE_UI_STATUS_CREATE_FAILED    ProjectInstanceUIStatus = "CREATE_FAILED"
	PROJECT_INSTANCE_UI_STATUS_CREATE_SUCCEEDED ProjectInstanceUIStatus = "CREATE_SUCCEEDED"
	PROJECT_INSTANCE_UI_STATUS_CREATING         ProjectInstanceUIStatus = "CREATING"
	PROJECT_INSTANCE_UI_STATUS_DELETE_FAILED    ProjectInstanceUIStatus = "DELETE_FAILED"
	PROJECT_INSTANCE_UI_STATUS_DELETE_SUCCEEDED ProjectInstanceUIStatus = "DELETE_SUCCEEDED"
	PROJECT_INSTANCE_UI_STATUS_DELETING         ProjectInstanceUIStatus = "DELETING"
	PROJECT_INSTANCE_UI_STATUS_UPDATE_FAILED    ProjectInstanceUIStatus = "UPDATE_FAILED"
	PROJECT_INSTANCE_UI_STATUS_UPDATE_SUCCEEDED ProjectInstanceUIStatus = "UPDATE_SUCCEEDED"
	PROJECT_INSTANCE_UI_STATUS_UPDATING         ProjectInstanceUIStatus = "UPDATING"
)

// APIUserCreated defines model for APIUserCreated.
type APIUserCreated struct {
	APIURL        string `json:"apiUrl"`
	APIURLSwagger string `json:"apiUrlSwagger"`
	InstanceID    string `json:"instanceId"`
	Message       string `json:"message"`
	Password      string `json:"password"`
	Username      string `json:"username"`
}

// APIUserProjectCreated defines model for APIUserProjectCreated.
type APIUserProjectCreated struct {
	Credentials Credentials `json:"credentials"`
	Message     string      `json:"message"`
}

// Credentials defines model for Credentials.
type Credentials struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// CredentialsListResponse defines model for CredentialsListResponse.
type CredentialsListResponse struct {
	Credentials []ServiceKeysList `json:"credentials"`
	Message     string            `json:"message"`
}

// CredentialsRemoteWriteDeleteResponse defines model for CredentialsRemoteWriteDeleteResponse.
type CredentialsRemoteWriteDeleteResponse struct {
	MaxLimit int    `json:"maxLimit"`
	Message  string `json:"message"`
}

// CredentialsRemoteWriteResponse defines model for CredentialsRemoteWriteResponse.
type CredentialsRemoteWriteResponse struct {
	CredentialsMaxLimit int    `json:"credentialsMaxLimit"`
	MaxLimit            int    `json:"maxLimit"`
	Message             string `json:"message"`
}

// Error defines model for Error.
type Error struct {
	Errors  *[]map[string]string `json:"errors,omitempty"`
	Message string               `json:"message"`
}

// InstanceSensitiveData defines model for InstanceSensitiveData.
type InstanceSensitiveData struct {
	AlertingURL             string    `json:"alertingUrl"`
	Cluster                 string    `json:"cluster"`
	DashboardURL            string    `json:"dashboardUrl"`
	GrafanaAdminPassword    string    `json:"grafanaAdminPassword"`
	GrafanaAdminUser        string    `json:"grafanaAdminUser"`
	GrafanaPublicReadAccess bool      `json:"grafanaPublicReadAccess"`
	GrafanaURL              string    `json:"grafanaUrl"`
	Instance                string    `json:"instance"`
	JaegerTracesURL         string    `json:"jaegerTracesUrl"`
	JaegerUiURL             string    `json:"jaegerUiUrl"`
	LogsPushURL             string    `json:"logsPushUrl"`
	LogsURL                 string    `json:"logsUrl"`
	MetricsRetentionTime1h  int       `json:"metricsRetentionTime1h"`
	MetricsRetentionTime5m  int       `json:"metricsRetentionTime5m"`
	MetricsRetentionTimeRaw int       `json:"metricsRetentionTimeRaw"`
	MetricsURL              string    `json:"metricsUrl"`
	Name                    *string   `json:"name,omitempty"`
	OtlpTracesURL           string    `json:"otlpTracesUrl"`
	Plan                    PlanModel `json:"plan"`
	PushMetricsURL          string    `json:"pushMetricsUrl"`
	TargetsURL              string    `json:"targetsUrl"`
	ZipkinSpansURL          string    `json:"zipkinSpansUrl"`
}

// Message defines model for Message.
type Message struct {
	Message string `json:"message"`
}

// PermissionDenied defines model for PermissionDenied.
type PermissionDenied struct {
	Detail string `json:"detail"`
}

// PlanModel defines model for PlanModel.
type PlanModel struct {
	AlertMatchers           int               `json:"alertMatchers"`
	AlertReceivers          int               `json:"alertReceivers"`
	AlertRules              int               `json:"alertRules"`
	Amount                  *float32          `json:"amount,omitempty"`
	BucketSize              int               `json:"bucketSize"`
	Description             *string           `json:"description,omitempty"`
	GrafanaGlobalDashboards int               `json:"grafanaGlobalDashboards"`
	GrafanaGlobalOrgs       int               `json:"grafanaGlobalOrgs"`
	GrafanaGlobalSessions   int               `json:"grafanaGlobalSessions"`
	GrafanaGlobalUsers      int               `json:"grafanaGlobalUsers"`
	ID                      openapiTypes.UUID `json:"id"`
	LogsAlert               int               `json:"logsAlert"`
	LogsStorage             int               `json:"logsStorage"`
	Name                    *string           `json:"name,omitempty"`
	PlanID                  openapiTypes.UUID `json:"planId"`
	SamplesPerScrape        int               `json:"samplesPerScrape"`
	TargetNumber            int               `json:"targetNumber"`
	TracesStorage           int               `json:"tracesStorage"`
}

// ProjectInstanceFull defines model for ProjectInstanceFull.
type ProjectInstanceFull struct {
	Error       *string                   `json:"error"`
	ID          string                    `json:"id"`
	Instance    string                    `json:"instance"`
	Name        *string                   `json:"name,omitempty"`
	PlanName    string                    `json:"planName"`
	ServiceName string                    `json:"serviceName"`
	Status      ProjectInstanceFullStatus `json:"status"`
}

// ProjectInstanceFullStatus defines model for ProjectInstanceFull.Status.
type ProjectInstanceFullStatus string

// ProjectInstanceFullMany defines model for ProjectInstanceFullMany.
type ProjectInstanceFullMany struct {
	Instances []ProjectInstanceFull `json:"instances"`
	Message   string                `json:"message"`
}

// ProjectInstanceUI defines model for ProjectInstanceUI.
type ProjectInstanceUI struct {
	DashboardURL string                  `json:"dashboardUrl"`
	Error        *string                 `json:"error"`
	ID           string                  `json:"id"`
	Instance     InstanceSensitiveData   `json:"instance"`
	IsUpdatable  *bool                   `json:"isUpdatable,omitempty"`
	Message      string                  `json:"message"`
	Name         *string                 `json:"name,omitempty"`
	Parameters   *map[string]string      `json:"parameters,omitempty"`
	PlanID       string                  `json:"planId"`
	PlanName     string                  `json:"planName"`
	PlanSchema   *string                 `json:"planSchema,omitempty"`
	ServiceName  string                  `json:"serviceName"`
	Status       ProjectInstanceUIStatus `json:"status"`
}

// ProjectInstanceUIStatus defines model for ProjectInstanceUI.Status.
type ProjectInstanceUIStatus string

// ProjectInstancesCreateResponse defines model for ProjectInstancesCreateResponse.
type ProjectInstancesCreateResponse struct {
	DashboardURL string `json:"dashboardUrl"`
	InstanceID   string `json:"instanceId"`
	Message      string `json:"message"`
}

// ProjectInstancesUpdateResponse defines model for ProjectInstancesUpdateResponse.
type ProjectInstancesUpdateResponse struct {
	Message string `json:"message"`
}

// ServiceKeysList defines model for ServiceKeysList.
type ServiceKeysList struct {
	CredentialsInfo *map[string]string `json:"credentialsInfo,omitempty"`
	ID              string             `json:"id"`
	Name            string             `json:"name"`
}

// ServiceKeysResponse defines model for ServiceKeysResponse.
type ServiceKeysResponse struct {
	CredentialsInfo *map[string]string `json:"credentialsInfo,omitempty"`
	ID              string             `json:"id"`
	Message         string             `json:"message"`
	Name            string             `json:"name"`
}

// SystemInstance defines model for SystemInstance.
type SystemInstance struct {
	AlertingURL     string  `json:"alertingUrl"`
	Instance        string  `json:"instance"`
	JaegerTracesURL string  `json:"jaegerTracesUrl"`
	JaegerUiURL     string  `json:"jaegerUiUrl"`
	LogsPushURL     string  `json:"logsPushUrl"`
	LogsURL         string  `json:"logsUrl"`
	MetricsURL      string  `json:"metricsUrl"`
	Name            *string `json:"name,omitempty"`
	OtlpTracesURL   string  `json:"otlpTracesUrl"`
	PushMetricsURL  string  `json:"pushMetricsUrl"`
	TargetsURL      string  `json:"targetsUrl"`
	ZipkinSpansURL  string  `json:"zipkinSpansUrl"`
}

// SystemInstanceResponse defines model for SystemInstanceResponse.
type SystemInstanceResponse struct {
	Instance SystemInstance `json:"instance"`
	Message  string         `json:"message"`
}

// CreateJSONBody defines parameters for Create.
type CreateJSONBody struct {
	// Name Name of the service
	Name *string `json:"name,omitempty"`

	// Parameter additional parameters
	Parameter *map[string]interface{} `json:"parameter,omitempty"`

	// PlanId uuid of the plan to create/update
	PlanID string `json:"planId"`
}

// UpdateJSONBody defines parameters for Update.
type UpdateJSONBody struct {
	// Name Name of the service
	Name *string `json:"name,omitempty"`

	// Parameter additional parameters
	Parameter *map[string]interface{} `json:"parameter,omitempty"`

	// PlanId uuid of the plan to create/update
	PlanID string `json:"planId"`
}

// CredentialsRemoteWriteLimitsUpdateJSONBody defines parameters for CredentialsRemoteWriteLimitsUpdate.
type CredentialsRemoteWriteLimitsUpdateJSONBody struct {
	// MaxLimit Remote write metric sample limit for credential to push in a single minute.
	MaxLimit *float32 `json:"maxLimit,omitempty"`
}

// SystemInstancesCredentialsCreateJSONBody defines parameters for SystemInstancesCredentialsCreate.
type SystemInstancesCredentialsCreateJSONBody struct {
	// RemoteWriteMaxLimit Remote write metric sample limit for credential to push in a single minute.
	RemoteWriteMaxLimit *float32 `json:"remoteWriteMaxLimit,omitempty"`
}

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody CreateJSONBody

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody UpdateJSONBody

// CredentialsRemoteWriteLimitsUpdateJSONRequestBody defines body for CredentialsRemoteWriteLimitsUpdate for application/json ContentType.
type CredentialsRemoteWriteLimitsUpdateJSONRequestBody CredentialsRemoteWriteLimitsUpdateJSONBody

// SystemInstancesCredentialsCreateJSONRequestBody defines body for SystemInstancesCredentialsCreate for application/json ContentType.
type SystemInstancesCredentialsCreateJSONRequestBody SystemInstancesCredentialsCreateJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client[K contracts.ClientFlowConfig] struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.ClientInterface[K]
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient[K contracts.ClientFlowConfig](server string, httpClient contracts.ClientInterface[K]) *Client[K] {
	// create a client with sane default values
	client := Client[K]{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// List request
	ListRaw(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create request with any body
	CreateRawWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRaw(ctx context.Context, projectID string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	DeleteRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request
	GetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update request with any body
	UpdateRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRaw(ctx context.Context, projectID string, instanceID string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListInstanceCredentials request
	ListInstanceCredentialsRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsCreate request
	CredentialsCreateRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsDelete request
	CredentialsDeleteRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsRead request
	CredentialsReadRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsRemoteWriteLimitsDelete request
	CredentialsRemoteWriteLimitsDeleteRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsRemoteWriteLimitsList request
	CredentialsRemoteWriteLimitsListRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CredentialsRemoteWriteLimitsUpdate request with any body
	CredentialsRemoteWriteLimitsUpdateRawWithBody(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CredentialsRemoteWriteLimitsUpdateRaw(ctx context.Context, projectID string, instanceID string, username string, body CredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemInstancesRead request
	SystemInstancesReadRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemInstancesCredentialsCreate request with any body
	SystemInstancesCredentialsCreateRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SystemInstancesCredentialsCreateRaw(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SystemInstancesCredentialsDelete request
	SystemInstancesCredentialsDeleteRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client[K]) ListRaw(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(ctx, c.Server, projectID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CreateRawWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(ctx, c.Server, projectID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CreateRaw(ctx context.Context, projectID string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(ctx, c.Server, projectID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) DeleteRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) GetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) UpdateRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(ctx, c.Server, projectID, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) UpdateRaw(ctx context.Context, projectID string, instanceID string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(ctx, c.Server, projectID, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) ListInstanceCredentialsRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListInstanceCredentialsRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsCreateRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsCreateRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsDeleteRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsDeleteRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsReadRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsReadRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsRemoteWriteLimitsDeleteRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsRemoteWriteLimitsDeleteRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsRemoteWriteLimitsListRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsRemoteWriteLimitsListRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsRemoteWriteLimitsUpdateRawWithBody(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsRemoteWriteLimitsUpdateRequestWithBody(ctx, c.Server, projectID, instanceID, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) CredentialsRemoteWriteLimitsUpdateRaw(ctx context.Context, projectID string, instanceID string, username string, body CredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCredentialsRemoteWriteLimitsUpdateRequest(ctx, c.Server, projectID, instanceID, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) SystemInstancesReadRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesReadRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) SystemInstancesCredentialsCreateRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesCredentialsCreateRequestWithBody(ctx, c.Server, projectID, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) SystemInstancesCredentialsCreateRaw(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesCredentialsCreateRequest(ctx, c.Server, projectID, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client[K]) SystemInstancesCredentialsDeleteRaw(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSystemInstancesCredentialsDeleteRequest(ctx, c.Server, projectID, instanceID, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListRequest generates requests for List
func NewListRequest(ctx context.Context, server string, projectID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(ctx context.Context, server string, projectID string, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(ctx, server, projectID, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(ctx context.Context, server string, projectID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequest generates requests for Get
func NewGetRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(ctx context.Context, server string, projectID string, instanceID string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(ctx, server, projectID, instanceID, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListInstanceCredentialsRequest generates requests for ListInstanceCredentials
func NewListInstanceCredentialsRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsCreateRequest generates requests for CredentialsCreate
func NewCredentialsCreateRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsDeleteRequest generates requests for CredentialsDelete
func NewCredentialsDeleteRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsReadRequest generates requests for CredentialsRead
func NewCredentialsReadRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsRemoteWriteLimitsDeleteRequest generates requests for CredentialsRemoteWriteLimitsDelete
func NewCredentialsRemoteWriteLimitsDeleteRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s/remote-write-limits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsRemoteWriteLimitsListRequest generates requests for CredentialsRemoteWriteLimitsList
func NewCredentialsRemoteWriteLimitsListRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s/remote-write-limits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCredentialsRemoteWriteLimitsUpdateRequest calls the generic CredentialsRemoteWriteLimitsUpdate builder with application/json body
func NewCredentialsRemoteWriteLimitsUpdateRequest(ctx context.Context, server string, projectID string, instanceID string, username string, body CredentialsRemoteWriteLimitsUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCredentialsRemoteWriteLimitsUpdateRequestWithBody(ctx, server, projectID, instanceID, username, "application/json", bodyReader)
}

// NewCredentialsRemoteWriteLimitsUpdateRequestWithBody generates requests for CredentialsRemoteWriteLimitsUpdate with any type of body
func NewCredentialsRemoteWriteLimitsUpdateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/credentials/%s/remote-write-limits", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemInstancesReadRequest generates requests for SystemInstancesRead
func NewSystemInstancesReadRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSystemInstancesCredentialsCreateRequest calls the generic SystemInstancesCredentialsCreate builder with application/json body
func NewSystemInstancesCredentialsCreateRequest(ctx context.Context, server string, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSystemInstancesCredentialsCreateRequestWithBody(ctx, server, projectID, instanceID, "application/json", bodyReader)
}

// NewSystemInstancesCredentialsCreateRequestWithBody generates requests for SystemInstancesCredentialsCreate with any type of body
func NewSystemInstancesCredentialsCreateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/projects/%s/instances/%s/credentials", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSystemInstancesCredentialsDeleteRequest generates requests for SystemInstancesCredentialsDelete
func NewSystemInstancesCredentialsDeleteRequest(ctx context.Context, server string, projectID string, instanceID string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/systems/projects/%s/instances/%s/credentials/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client[K]) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses[K contracts.ClientFlowConfig] struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient[K contracts.ClientFlowConfig](server string, httpClient contracts.ClientInterface[K]) *ClientWithResponses[K] {
	return &ClientWithResponses[K]{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface[K contracts.ClientFlowConfig] interface {
	// List request
	List(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// Create request with any body
	CreateWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	Create(ctx context.Context, projectID string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// Delete request
	Delete(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// Get request
	Get(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// Update request with any body
	UpdateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	Update(ctx context.Context, projectID string, instanceID string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// ListInstanceCredentials request
	ListInstanceCredentials(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*ListInstanceCredentialsResponse, error)

	// CredentialsCreate request
	CredentialsCreate(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error)

	// CredentialsDelete request
	CredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsDeleteResponse, error)

	// CredentialsRead request
	CredentialsRead(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsReadResponse, error)

	// CredentialsRemoteWriteLimitsDelete request
	CredentialsRemoteWriteLimitsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsDeleteResponse, error)

	// CredentialsRemoteWriteLimitsList request
	CredentialsRemoteWriteLimitsList(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsListResponse, error)

	// CredentialsRemoteWriteLimitsUpdate request with any body
	CredentialsRemoteWriteLimitsUpdateWithBody(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsUpdateResponse, error)

	CredentialsRemoteWriteLimitsUpdate(ctx context.Context, projectID string, instanceID string, username string, body CredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsUpdateResponse, error)

	// SystemInstancesRead request
	SystemInstancesRead(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*SystemInstancesReadResponse, error)

	// SystemInstancesCredentialsCreate request with any body
	SystemInstancesCredentialsCreateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error)

	SystemInstancesCredentialsCreate(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error)

	// SystemInstancesCredentialsDelete request
	SystemInstancesCredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsDeleteResponse, error)
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectInstanceFullMany
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectInstancesCreateResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectInstancesUpdateResponse
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectInstanceUI
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ProjectInstancesUpdateResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListInstanceCredentialsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CredentialsListResponse
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ListInstanceCredentialsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListInstanceCredentialsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIUserProjectCreated
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CredentialsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON500      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CredentialsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ServiceKeysResponse
	JSON403      *PermissionDenied
	JSON404      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CredentialsReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsRemoteWriteLimitsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsRemoteWriteDeleteResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON502      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CredentialsRemoteWriteLimitsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsRemoteWriteLimitsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsRemoteWriteLimitsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsRemoteWriteResponse
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON502      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CredentialsRemoteWriteLimitsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsRemoteWriteLimitsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CredentialsRemoteWriteLimitsUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CredentialsRemoteWriteResponse
	JSON400      *Error
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON502      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CredentialsRemoteWriteLimitsUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CredentialsRemoteWriteLimitsUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemInstancesReadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemInstanceResponse
	JSON403      *PermissionDenied
	JSON404      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SystemInstancesReadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemInstancesReadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemInstancesCredentialsCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *APIUserCreated
	JSON403      *PermissionDenied
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SystemInstancesCredentialsCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemInstancesCredentialsCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SystemInstancesCredentialsDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
	JSON403      *PermissionDenied
	JSON404      *Message
	JSON500      *Message
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r SystemInstancesCredentialsDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SystemInstancesCredentialsDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// List request returning *ListResponse
func (c *ClientWithResponses[K]) List(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.ListRaw(ctx, projectID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListResponse(rsp)
}

// CreateWithBody request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses[K]) CreateWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateRawWithBody(ctx, projectID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

func (c *ClientWithResponses[K]) Create(ctx context.Context, projectID string, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateRaw(ctx, projectID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

// Delete request returning *DeleteResponse
func (c *ClientWithResponses[K]) Delete(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.DeleteRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteResponse(rsp)
}

// Get request returning *GetResponse
func (c *ClientWithResponses[K]) Get(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.GetRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetResponse(rsp)
}

// UpdateWithBody request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses[K]) UpdateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateRawWithBody(ctx, projectID, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses[K]) Update(ctx context.Context, projectID string, instanceID string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateRaw(ctx, projectID, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateResponse(rsp)
}

// ListInstanceCredentials request returning *ListInstanceCredentialsResponse
func (c *ClientWithResponses[K]) ListInstanceCredentials(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*ListInstanceCredentialsResponse, error) {
	rsp, err := c.ListInstanceCredentialsRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListInstanceCredentialsResponse(rsp)
}

// CredentialsCreate request returning *CredentialsCreateResponse
func (c *ClientWithResponses[K]) CredentialsCreate(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*CredentialsCreateResponse, error) {
	rsp, err := c.CredentialsCreateRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsCreateResponse(rsp)
}

// CredentialsDelete request returning *CredentialsDeleteResponse
func (c *ClientWithResponses[K]) CredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsDeleteResponse, error) {
	rsp, err := c.CredentialsDeleteRaw(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsDeleteResponse(rsp)
}

// CredentialsRead request returning *CredentialsReadResponse
func (c *ClientWithResponses[K]) CredentialsRead(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsReadResponse, error) {
	rsp, err := c.CredentialsReadRaw(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsReadResponse(rsp)
}

// CredentialsRemoteWriteLimitsDelete request returning *CredentialsRemoteWriteLimitsDeleteResponse
func (c *ClientWithResponses[K]) CredentialsRemoteWriteLimitsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsDeleteResponse, error) {
	rsp, err := c.CredentialsRemoteWriteLimitsDeleteRaw(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsRemoteWriteLimitsDeleteResponse(rsp)
}

// CredentialsRemoteWriteLimitsList request returning *CredentialsRemoteWriteLimitsListResponse
func (c *ClientWithResponses[K]) CredentialsRemoteWriteLimitsList(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsListResponse, error) {
	rsp, err := c.CredentialsRemoteWriteLimitsListRaw(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsRemoteWriteLimitsListResponse(rsp)
}

// CredentialsRemoteWriteLimitsUpdateWithBody request with arbitrary body returning *CredentialsRemoteWriteLimitsUpdateResponse
func (c *ClientWithResponses[K]) CredentialsRemoteWriteLimitsUpdateWithBody(ctx context.Context, projectID string, instanceID string, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsUpdateResponse, error) {
	rsp, err := c.CredentialsRemoteWriteLimitsUpdateRawWithBody(ctx, projectID, instanceID, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsRemoteWriteLimitsUpdateResponse(rsp)
}

func (c *ClientWithResponses[K]) CredentialsRemoteWriteLimitsUpdate(ctx context.Context, projectID string, instanceID string, username string, body CredentialsRemoteWriteLimitsUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CredentialsRemoteWriteLimitsUpdateResponse, error) {
	rsp, err := c.CredentialsRemoteWriteLimitsUpdateRaw(ctx, projectID, instanceID, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCredentialsRemoteWriteLimitsUpdateResponse(rsp)
}

// SystemInstancesRead request returning *SystemInstancesReadResponse
func (c *ClientWithResponses[K]) SystemInstancesRead(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*SystemInstancesReadResponse, error) {
	rsp, err := c.SystemInstancesReadRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesReadResponse(rsp)
}

// SystemInstancesCredentialsCreateWithBody request with arbitrary body returning *SystemInstancesCredentialsCreateResponse
func (c *ClientWithResponses[K]) SystemInstancesCredentialsCreateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error) {
	rsp, err := c.SystemInstancesCredentialsCreateRawWithBody(ctx, projectID, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesCredentialsCreateResponse(rsp)
}

func (c *ClientWithResponses[K]) SystemInstancesCredentialsCreate(ctx context.Context, projectID string, instanceID string, body SystemInstancesCredentialsCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsCreateResponse, error) {
	rsp, err := c.SystemInstancesCredentialsCreateRaw(ctx, projectID, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesCredentialsCreateResponse(rsp)
}

// SystemInstancesCredentialsDelete request returning *SystemInstancesCredentialsDeleteResponse
func (c *ClientWithResponses[K]) SystemInstancesCredentialsDelete(ctx context.Context, projectID string, instanceID string, username string, reqEditors ...RequestEditorFn) (*SystemInstancesCredentialsDeleteResponse, error) {
	rsp, err := c.SystemInstancesCredentialsDeleteRaw(ctx, projectID, instanceID, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseSystemInstancesCredentialsDeleteResponse(rsp)
}

// ParseListResponse parses an HTTP response from a List call
func (c *ClientWithResponses[K]) ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectInstanceFullMany
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCreateResponse parses an HTTP response from a Create call
func (c *ClientWithResponses[K]) ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectInstancesCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteResponse parses an HTTP response from a Delete call
func (c *ClientWithResponses[K]) ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectInstancesUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetResponse parses an HTTP response from a Get call
func (c *ClientWithResponses[K]) ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectInstanceUI
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseUpdateResponse parses an HTTP response from a Update call
func (c *ClientWithResponses[K]) ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ProjectInstancesUpdateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseListInstanceCredentialsResponse parses an HTTP response from a ListInstanceCredentials call
func (c *ClientWithResponses[K]) ParseListInstanceCredentialsResponse(rsp *http.Response) (*ListInstanceCredentialsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListInstanceCredentialsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CredentialsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCredentialsCreateResponse parses an HTTP response from a CredentialsCreate call
func (c *ClientWithResponses[K]) ParseCredentialsCreateResponse(rsp *http.Response) (*CredentialsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIUserProjectCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCredentialsDeleteResponse parses an HTTP response from a CredentialsDelete call
func (c *ClientWithResponses[K]) ParseCredentialsDeleteResponse(rsp *http.Response) (*CredentialsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCredentialsReadResponse parses an HTTP response from a CredentialsRead call
func (c *ClientWithResponses[K]) ParseCredentialsReadResponse(rsp *http.Response) (*CredentialsReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ServiceKeysResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCredentialsRemoteWriteLimitsDeleteResponse parses an HTTP response from a CredentialsRemoteWriteLimitsDelete call
func (c *ClientWithResponses[K]) ParseCredentialsRemoteWriteLimitsDeleteResponse(rsp *http.Response) (*CredentialsRemoteWriteLimitsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsRemoteWriteLimitsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsRemoteWriteDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON502 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCredentialsRemoteWriteLimitsListResponse parses an HTTP response from a CredentialsRemoteWriteLimitsList call
func (c *ClientWithResponses[K]) ParseCredentialsRemoteWriteLimitsListResponse(rsp *http.Response) (*CredentialsRemoteWriteLimitsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsRemoteWriteLimitsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsRemoteWriteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON502 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCredentialsRemoteWriteLimitsUpdateResponse parses an HTTP response from a CredentialsRemoteWriteLimitsUpdate call
func (c *ClientWithResponses[K]) ParseCredentialsRemoteWriteLimitsUpdateResponse(rsp *http.Response) (*CredentialsRemoteWriteLimitsUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CredentialsRemoteWriteLimitsUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CredentialsRemoteWriteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 502:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON502 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseSystemInstancesReadResponse parses an HTTP response from a SystemInstancesRead call
func (c *ClientWithResponses[K]) ParseSystemInstancesReadResponse(rsp *http.Response) (*SystemInstancesReadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemInstancesReadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemInstanceResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseSystemInstancesCredentialsCreateResponse parses an HTTP response from a SystemInstancesCredentialsCreate call
func (c *ClientWithResponses[K]) ParseSystemInstancesCredentialsCreateResponse(rsp *http.Response) (*SystemInstancesCredentialsCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemInstancesCredentialsCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest APIUserCreated
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseSystemInstancesCredentialsDeleteResponse parses an HTTP response from a SystemInstancesCredentialsDelete call
func (c *ClientWithResponses[K]) ParseSystemInstancesCredentialsDeleteResponse(rsp *http.Response) (*SystemInstancesCredentialsDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SystemInstancesCredentialsDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest PermissionDenied
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}
