// Package spaceroles provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.3 DO NOT EDIT.
package spaceroles

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// Defines values for SpaceRoleCreateRequestType.
const (
	SPACE_AUDITOR   SpaceRoleCreateRequestType = "space_auditor"
	SPACE_DEVELOPER SpaceRoleCreateRequestType = "space_developer"
	SPACE_MANAGER   SpaceRoleCreateRequestType = "space_manager"
	SPACE_SUPPORTER SpaceRoleCreateRequestType = "space_supporter"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// OrgID defines model for OrgID.
type OrgID = openapiTypes.UUID

// PlatformID defines model for PlatformID.
type PlatformID = openapiTypes.UUID

// ProjectID defines model for ProjectID.
type ProjectID = openapiTypes.UUID

// Region defines model for Region.
type Region = string

// RoleID defines model for RoleID.
type RoleID = openapiTypes.UUID

// SpaceID defines model for SpaceID.
type SpaceID = openapiTypes.UUID

// SpaceRoleCreateRequest defines model for SpaceRoleCreateRequest.
type SpaceRoleCreateRequest struct {
	Type     SpaceRoleCreateRequestType `json:"type"`
	UserGUID *UserID                    `json:"userGuid,omitempty"`
	UserName *UserName                  `json:"userName,omitempty"`
}

// SpaceRoleCreateRequestType defines model for SpaceRoleCreateRequest.Type.
type SpaceRoleCreateRequestType string

// SpaceRoleCreateResponse defines model for SpaceRoleCreateResponse.
type SpaceRoleCreateResponse struct {
	GUID       RoleID     `json:"guid"`
	OrgID      OrgID      `json:"orgId"`
	PlatformID PlatformID `json:"platformId"`
	ProjectID  ProjectID  `json:"projectId"`
	Region     Region     `json:"region"`
	SpaceID    SpaceID    `json:"spaceId"`
}

// UserID defines model for UserID.
type UserID = openapiTypes.UUID

// UserName defines model for UserName.
type UserName = string

// CreateSpaceRoleJSONRequestBody defines body for CreateSpaceRole for application/json ContentType.
type CreateSpaceRoleJSONRequestBody = SpaceRoleCreateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// CreateSpaceRole request with any body
	CreateSpaceRoleRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSpaceRoleRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, body CreateSpaceRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateSpaceRoleRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpaceRoleRequestWithBody(ctx, c.Server, projectID, region, organizationID, spaceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSpaceRoleRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, body CreateSpaceRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSpaceRoleRequest(ctx, c.Server, projectID, region, organizationID, spaceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateSpaceRoleRequest calls the generic CreateSpaceRole builder with application/json body
func NewCreateSpaceRoleRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, body CreateSpaceRoleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSpaceRoleRequestWithBody(ctx, server, projectID, region, organizationID, spaceID, "application/json", bodyReader)
}

// NewCreateSpaceRoleRequestWithBody generates requests for CreateSpaceRole with any type of body
func NewCreateSpaceRoleRequestWithBody(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "spaceID", runtime.ParamLocationPath, spaceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s/spaces/%s/roles", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateSpaceRole request with any body
	CreateSpaceRoleWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpaceRoleResponse, error)

	CreateSpaceRole(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, body CreateSpaceRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpaceRoleResponse, error)
}

type CreateSpaceRoleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SpaceRoleCreateResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateSpaceRoleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSpaceRoleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateSpaceRoleWithBody request with arbitrary body returning *CreateSpaceRoleResponse
func (c *ClientWithResponses) CreateSpaceRoleWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSpaceRoleResponse, error) {
	rsp, err := c.CreateSpaceRoleRawWithBody(ctx, projectID, region, organizationID, spaceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateSpaceRoleResponse(rsp)
}

func (c *ClientWithResponses) CreateSpaceRole(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, spaceID openapiTypes.UUID, body CreateSpaceRoleJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSpaceRoleResponse, error) {
	rsp, err := c.CreateSpaceRoleRaw(ctx, projectID, region, organizationID, spaceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateSpaceRoleResponse(rsp)
}

// ParseCreateSpaceRoleResponse parses an HTTP response from a CreateSpaceRole call
func (c *ClientWithResponses) ParseCreateSpaceRoleResponse(rsp *http.Response) (*CreateSpaceRoleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSpaceRoleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SpaceRoleCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}
