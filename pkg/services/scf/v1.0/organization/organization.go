// Package organization provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.3 DO NOT EDIT.
package organization

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// OrgID defines model for OrgID.
type OrgID = openapiTypes.UUID

// OrgStatus The organization's status. The status value starts with `deleting` when a deleting request is in progress. The status value starts with `delete_failed` when the deletion failed. The status value can be different from `deleting` and `delete_failed`. Additional details can be provided in the future.
type OrgStatus = string

// Organization defines model for Organization.
type Organization struct {
	CreatedAt  time.Time  `json:"createdAt"`
	GUID       OrgID      `json:"guid"`
	Name       string     `json:"name"`
	PlatformID PlatformID `json:"platformId"`
	ProjectID  ProjectID  `json:"projectId"`
	QuotaID    QuotaID    `json:"quotaId"`
	Region     Region     `json:"region"`

	// Status The organization's status. The status value starts with `deleting` when a deleting request is in progress. The status value starts with `delete_failed` when the deletion failed. The status value can be different from `deleting` and `delete_failed`. Additional details can be provided in the future.
	Status    OrgStatus `json:"status"`
	Suspended bool      `json:"suspended"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// OrganizationCreateRequest defines model for OrganizationCreateRequest.
type OrganizationCreateRequest struct {
	Name       string      `json:"name"`
	PlatformID *PlatformID `json:"platformId,omitempty"`
}

// OrganizationCreateResponse defines model for OrganizationCreateResponse.
type OrganizationCreateResponse struct {
	GUID       OrgID      `json:"guid"`
	PlatformID PlatformID `json:"platformId"`
	ProjectID  ProjectID  `json:"projectId"`
	Region     Region     `json:"region"`
}

// OrganizationDeleteResponse defines model for OrganizationDeleteResponse.
type OrganizationDeleteResponse struct {
	GUID       OrgID      `json:"guid"`
	PlatformID PlatformID `json:"platformId"`
	ProjectID  ProjectID  `json:"projectId"`
	Region     Region     `json:"region"`
}

// OrganizationName Name of the organization
type OrganizationName = string

// OrganizationQuota defines model for OrganizationQuota.
type OrganizationQuota struct {
	OrgID      OrgID      `json:"orgId"`
	PlatformID PlatformID `json:"platformId"`
	ProjectID  ProjectID  `json:"projectId"`
	QuotaID    QuotaID    `json:"quotaId"`
	Region     Region     `json:"region"`
}

// OrganizationQuotaApplyPayload defines model for OrganizationQuotaApplyPayload.
type OrganizationQuotaApplyPayload struct {
	QuotaID QuotaID `json:"quotaId"`
}

// OrganizationUpdatePayload defines model for OrganizationUpdatePayload.
type OrganizationUpdatePayload struct {
	// Name Name of the organization
	Name      *OrganizationName `json:"name,omitempty"`
	Suspended *bool             `json:"suspended,omitempty"`
}

// OrganizationUsageSummary defines model for OrganizationUsageSummary.
type OrganizationUsageSummary struct {
	OrgID        OrgID        `json:"orgId"`
	PlatformID   PlatformID   `json:"platformId"`
	ProjectID    ProjectID    `json:"projectId"`
	Region       Region       `json:"region"`
	UsageSummary UsageSummary `json:"usageSummary"`
}

// OrganizationsList defines model for OrganizationsList.
type OrganizationsList struct {
	Pagination Pagination              `json:"pagination"`
	Resources  []OrganizationsListItem `json:"resources"`
}

// OrganizationsListItem defines model for OrganizationsListItem.
type OrganizationsListItem struct {
	CreatedAt  *time.Time `json:"createdAt,omitempty"`
	GUID       OrgID      `json:"guid"`
	Name       *string    `json:"name,omitempty"`
	PlatformID PlatformID `json:"platformId"`
	ProjectID  ProjectID  `json:"projectId"`
	QuotaID    *QuotaID   `json:"quotaId,omitempty"`
	Region     Region     `json:"region"`

	// Status The organization's status. The status value starts with `deleting` when a deleting request is in progress. The status value starts with `delete_failed` when the deletion failed. The status value can be different from `deleting` and `delete_failed`. Additional details can be provided in the future.
	Status    OrgStatus  `json:"status"`
	Suspended *bool      `json:"suspended,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	TotalPages   *int64 `json:"totalPages,omitempty"`
	TotalResults *int64 `json:"totalResults,omitempty"`
}

// PlatformID defines model for PlatformID.
type PlatformID = openapiTypes.UUID

// ProjectID defines model for ProjectID.
type ProjectID = openapiTypes.UUID

// QuotaID defines model for QuotaID.
type QuotaID = openapiTypes.UUID

// Region defines model for Region.
type Region = string

// UsageSummary defines model for UsageSummary.
type UsageSummary struct {
	Domains          int64 `json:"domains"`
	MemoryInMb       int64 `json:"memoryInMb"`
	PerAppTasks      int64 `json:"perAppTasks"`
	ReservedPorts    int64 `json:"reservedPorts"`
	Routes           int64 `json:"routes"`
	ServiceInstances int64 `json:"serviceInstances"`
	ServiceKeys      int64 `json:"serviceKeys"`
	StartedInstances int64 `json:"startedInstances"`
}

// ListOrganizationsParams defines parameters for ListOrganizations.
type ListOrganizationsParams struct {
	// WithDetails Adds the details to the response that can be queried from the Cloud Controller API
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`

	// OrderBy In case `withDetails` is enabled, the organization list can be sorted by `name`.
	//
	// In order to sort by `name`, you have to set the value `name`.
	// The default sort ordering is ascending.
	// To specify descending order for `name` field, you have to append ` desc` suffix; for example `name desc`.
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// Page Which page is returned
	Page *int64 `form:"page,omitempty" json:"page,omitempty"`

	// PerPage Elements to be returned per page
	PerPage *int64 `form:"perPage,omitempty" json:"perPage,omitempty"`
}

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = OrganizationCreateRequest

// UpdateOrganizationJSONRequestBody defines body for UpdateOrganization for application/json ContentType.
type UpdateOrganizationJSONRequestBody = OrganizationUpdatePayload

// ApplyOrganizationQuotaJSONRequestBody defines body for ApplyOrganizationQuota for application/json ContentType.
type ApplyOrganizationQuotaJSONRequestBody = OrganizationQuotaApplyPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// ListOrganizations request
	ListOrganizationsRaw(ctx context.Context, projectID openapiTypes.UUID, region string, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganization request with any body
	CreateOrganizationRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganization request
	DeleteOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganization request
	GetOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOrganization request with any body
	UpdateOrganizationRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyOrganizationQuota request with any body
	ApplyOrganizationQuotaRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplyOrganizationQuotaRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body ApplyOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationUsageSummary request
	GetOrganizationUsageSummaryRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListOrganizationsRaw(ctx context.Context, projectID openapiTypes.UUID, region string, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationsRequest(ctx, c.Server, projectID, region, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(ctx, c.Server, projectID, region, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(ctx, c.Server, projectID, region, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationRequest(ctx, c.Server, projectID, region, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationRequest(ctx, c.Server, projectID, region, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequestWithBody(ctx, c.Server, projectID, region, organizationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOrganizationRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOrganizationRequest(ctx, c.Server, projectID, region, organizationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyOrganizationQuotaRawWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyOrganizationQuotaRequestWithBody(ctx, c.Server, projectID, region, organizationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyOrganizationQuotaRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body ApplyOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyOrganizationQuotaRequest(ctx, c.Server, projectID, region, organizationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationUsageSummaryRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationUsageSummaryRequest(ctx, c.Server, projectID, region, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListOrganizationsRequest generates requests for ListOrganizations
func NewListOrganizationsRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, params *ListOrganizationsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.WithDetails != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.OrderBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Page != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PerPage != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "perPage", runtime.ParamLocationQuery, *params.PerPage); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(ctx, server, projectID, region, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(ctx context.Context, server string, projectID openapiTypes.UUID, region string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationRequest generates requests for DeleteOrganization
func NewDeleteOrganizationRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationRequest generates requests for GetOrganization
func NewGetOrganizationRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOrganizationRequest calls the generic UpdateOrganization builder with application/json body
func NewUpdateOrganizationRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body UpdateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOrganizationRequestWithBody(ctx, server, projectID, region, organizationID, "application/json", bodyReader)
}

// NewUpdateOrganizationRequestWithBody generates requests for UpdateOrganization with any type of body
func NewUpdateOrganizationRequestWithBody(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewApplyOrganizationQuotaRequest calls the generic ApplyOrganizationQuota builder with application/json body
func NewApplyOrganizationQuotaRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body ApplyOrganizationQuotaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyOrganizationQuotaRequestWithBody(ctx, server, projectID, region, organizationID, "application/json", bodyReader)
}

// NewApplyOrganizationQuotaRequestWithBody generates requests for ApplyOrganizationQuota with any type of body
func NewApplyOrganizationQuotaRequestWithBody(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s/quota", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationUsageSummaryRequest generates requests for GetOrganizationUsageSummary
func NewGetOrganizationUsageSummaryRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s/usage_summary", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListOrganizations request
	ListOrganizations(ctx context.Context, projectID openapiTypes.UUID, region string, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error)

	// CreateOrganization request with any body
	CreateOrganizationWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// DeleteOrganization request
	DeleteOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error)

	// GetOrganization request
	GetOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error)

	// UpdateOrganization request with any body
	UpdateOrganizationWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	UpdateOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error)

	// ApplyOrganizationQuota request with any body
	ApplyOrganizationQuotaWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaResponse, error)

	ApplyOrganizationQuota(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body ApplyOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaResponse, error)

	// GetOrganizationUsageSummary request
	GetOrganizationUsageSummary(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationUsageSummaryResponse, error)
}

type ListOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationsList
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OrganizationCreateResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *OrganizationDeleteResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Organization
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r UpdateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyOrganizationQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationQuota
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ApplyOrganizationQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyOrganizationQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationUsageSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationUsageSummary
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationUsageSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationUsageSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListOrganizations request returning *ListOrganizationsResponse
func (c *ClientWithResponses) ListOrganizations(ctx context.Context, projectID openapiTypes.UUID, region string, params *ListOrganizationsParams, reqEditors ...RequestEditorFn) (*ListOrganizationsResponse, error) {
	rsp, err := c.ListOrganizationsRaw(ctx, projectID, region, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListOrganizationsResponse(rsp)
}

// CreateOrganizationWithBody request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationRawWithBody(ctx, projectID, region, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationRaw(ctx, projectID, region, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateOrganizationResponse(rsp)
}

// DeleteOrganization request returning *DeleteOrganizationResponse
func (c *ClientWithResponses) DeleteOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*DeleteOrganizationResponse, error) {
	rsp, err := c.DeleteOrganizationRaw(ctx, projectID, region, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteOrganizationResponse(rsp)
}

// GetOrganization request returning *GetOrganizationResponse
func (c *ClientWithResponses) GetOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationResponse, error) {
	rsp, err := c.GetOrganizationRaw(ctx, projectID, region, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetOrganizationResponse(rsp)
}

// UpdateOrganizationWithBody request with arbitrary body returning *UpdateOrganizationResponse
func (c *ClientWithResponses) UpdateOrganizationWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationRawWithBody(ctx, projectID, region, organizationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOrganization(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body UpdateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOrganizationResponse, error) {
	rsp, err := c.UpdateOrganizationRaw(ctx, projectID, region, organizationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateOrganizationResponse(rsp)
}

// ApplyOrganizationQuotaWithBody request with arbitrary body returning *ApplyOrganizationQuotaResponse
func (c *ClientWithResponses) ApplyOrganizationQuotaWithBody(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaResponse, error) {
	rsp, err := c.ApplyOrganizationQuotaRawWithBody(ctx, projectID, region, organizationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseApplyOrganizationQuotaResponse(rsp)
}

func (c *ClientWithResponses) ApplyOrganizationQuota(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, body ApplyOrganizationQuotaJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyOrganizationQuotaResponse, error) {
	rsp, err := c.ApplyOrganizationQuotaRaw(ctx, projectID, region, organizationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseApplyOrganizationQuotaResponse(rsp)
}

// GetOrganizationUsageSummary request returning *GetOrganizationUsageSummaryResponse
func (c *ClientWithResponses) GetOrganizationUsageSummary(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationUsageSummaryResponse, error) {
	rsp, err := c.GetOrganizationUsageSummaryRaw(ctx, projectID, region, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetOrganizationUsageSummaryResponse(rsp)
}

// ParseListOrganizationsResponse parses an HTTP response from a ListOrganizations call
func (c *ClientWithResponses) ParseListOrganizationsResponse(rsp *http.Response) (*ListOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganization call
func (c *ClientWithResponses) ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OrganizationCreateResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteOrganizationResponse parses an HTTP response from a DeleteOrganization call
func (c *ClientWithResponses) ParseDeleteOrganizationResponse(rsp *http.Response) (*DeleteOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest OrganizationDeleteResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetOrganizationResponse parses an HTTP response from a GetOrganization call
func (c *ClientWithResponses) ParseGetOrganizationResponse(rsp *http.Response) (*GetOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseUpdateOrganizationResponse parses an HTTP response from a UpdateOrganization call
func (c *ClientWithResponses) ParseUpdateOrganizationResponse(rsp *http.Response) (*UpdateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Organization
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseApplyOrganizationQuotaResponse parses an HTTP response from a ApplyOrganizationQuota call
func (c *ClientWithResponses) ParseApplyOrganizationQuotaResponse(rsp *http.Response) (*ApplyOrganizationQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyOrganizationQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationQuota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetOrganizationUsageSummaryResponse parses an HTTP response from a GetOrganizationUsageSummary call
func (c *ClientWithResponses) ParseGetOrganizationUsageSummaryResponse(rsp *http.Response) (*GetOrganizationUsageSummaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationUsageSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationUsageSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}
