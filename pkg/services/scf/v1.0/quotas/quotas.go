// Package quotas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.3 DO NOT EDIT.
package quotas

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Code    string `json:"code"`
	Message string `json:"message"`
}

// OrgID defines model for OrgID.
type OrgID = openapiTypes.UUID

// PlatformID defines model for PlatformID.
type PlatformID = openapiTypes.UUID

// ProjectID defines model for ProjectID.
type ProjectID = openapiTypes.UUID

// Quota defines model for Quota.
type Quota struct {
	Apps       QuotaApps     `json:"apps"`
	CreatedAt  time.Time     `json:"createdAt"`
	Domains    QuotaDomains  `json:"domains"`
	GUID       QuotaID       `json:"guid"`
	Name       string        `json:"name"`
	OrgID      *OrgID        `json:"orgId,omitempty"`
	PlatformID PlatformID    `json:"platformId"`
	ProjectID  ProjectID     `json:"projectId"`
	Region     Region        `json:"region"`
	Routes     QuotaRoutes   `json:"routes"`
	Services   QuotaServices `json:"services"`
	UpdatedAt  time.Time     `json:"updatedAt"`
}

// QuotaApps defines model for QuotaApps.
type QuotaApps struct {
	// LogRateLimitInBytesPerSecond The value `null` means `unlimited`.
	LogRateLimitInBytesPerSecond *int64 `json:"logRateLimitInBytesPerSecond"`

	// PerAppTasks The value `null` means `unlimited`.
	PerAppTasks *int64 `json:"perAppTasks"`

	// PerProcessMemoryInMb The value `null` means `unlimited`.
	PerProcessMemoryInMb *int64 `json:"perProcessMemoryInMb"`

	// TotalInstances The value `null` means `unlimited`.
	TotalInstances *int64 `json:"totalInstances"`

	// TotalMemoryInMb The value `null` means `unlimited`.
	TotalMemoryInMb *int64 `json:"totalMemoryInMb"`
}

// QuotaDomains defines model for QuotaDomains.
type QuotaDomains struct {
	// TotalDomains The value `null` means `unlimited`.
	TotalDomains *int64 `json:"totalDomains"`
}

// QuotaID defines model for QuotaID.
type QuotaID = openapiTypes.UUID

// QuotaRoutes defines model for QuotaRoutes.
type QuotaRoutes struct {
	// TotalReservedPorts The value `null` means `unlimited`.
	TotalReservedPorts *int64 `json:"totalReservedPorts"`

	// TotalRoutes The value `null` means `unlimited`.
	TotalRoutes *int64 `json:"totalRoutes"`
}

// QuotaServices defines model for QuotaServices.
type QuotaServices struct {
	PaidServicesAllowed bool `json:"paidServicesAllowed"`

	// TotalServiceInstances The value `null` means `unlimited`.
	TotalServiceInstances *int64 `json:"totalServiceInstances"`

	// TotalServiceKeys The value `null` means `unlimited`.
	TotalServiceKeys *int64 `json:"totalServiceKeys"`
}

// Region defines model for Region.
type Region = string

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// ListOrganizationQuotas request
	ListOrganizationQuotasRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationQuota request
	GetOrganizationQuotaRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListPlatformQuotas request
	ListPlatformQuotasRaw(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlatformQuota request
	GetPlatformQuotaRaw(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListOrganizationQuotasRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOrganizationQuotasRequest(ctx, c.Server, projectID, region, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationQuotaRaw(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationQuotaRequest(ctx, c.Server, projectID, region, organizationID, quotaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListPlatformQuotasRaw(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListPlatformQuotasRequest(ctx, c.Server, projectID, region, platformID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlatformQuotaRaw(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlatformQuotaRequest(ctx, c.Server, projectID, region, platformID, quotaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListOrganizationQuotasRequest generates requests for ListOrganizationQuotas
func NewListOrganizationQuotasRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s/quotas", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationQuotaRequest generates requests for GetOrganizationQuota
func NewGetOrganizationQuotaRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, quotaID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "quotaID", runtime.ParamLocationPath, quotaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/organizations/%s/quotas/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListPlatformQuotasRequest generates requests for ListPlatformQuotas
func NewListPlatformQuotasRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "platformID", runtime.ParamLocationPath, platformID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/platforms/%s/quotas", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPlatformQuotaRequest generates requests for GetPlatformQuota
func NewGetPlatformQuotaRequest(ctx context.Context, server string, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, quotaID openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "region", runtime.ParamLocationPath, region)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "platformID", runtime.ParamLocationPath, platformID)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "quotaID", runtime.ParamLocationPath, quotaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/regions/%s/platforms/%s/quotas/%s", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListOrganizationQuotas request
	ListOrganizationQuotas(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*ListOrganizationQuotasResponse, error)

	// GetOrganizationQuota request
	GetOrganizationQuota(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationQuotaResponse, error)

	// ListPlatformQuotas request
	ListPlatformQuotas(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*ListPlatformQuotasResponse, error)

	// GetPlatformQuota request
	GetPlatformQuota(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetPlatformQuotaResponse, error)
}

type ListOrganizationQuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Quota
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListOrganizationQuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOrganizationQuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quota
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListPlatformQuotasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Quota
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListPlatformQuotasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListPlatformQuotasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlatformQuotaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quota
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetPlatformQuotaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlatformQuotaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListOrganizationQuotas request returning *ListOrganizationQuotasResponse
func (c *ClientWithResponses) ListOrganizationQuotas(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*ListOrganizationQuotasResponse, error) {
	rsp, err := c.ListOrganizationQuotasRaw(ctx, projectID, region, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListOrganizationQuotasResponse(rsp)
}

// GetOrganizationQuota request returning *GetOrganizationQuotaResponse
func (c *ClientWithResponses) GetOrganizationQuota(ctx context.Context, projectID openapiTypes.UUID, region string, organizationID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetOrganizationQuotaResponse, error) {
	rsp, err := c.GetOrganizationQuotaRaw(ctx, projectID, region, organizationID, quotaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetOrganizationQuotaResponse(rsp)
}

// ListPlatformQuotas request returning *ListPlatformQuotasResponse
func (c *ClientWithResponses) ListPlatformQuotas(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*ListPlatformQuotasResponse, error) {
	rsp, err := c.ListPlatformQuotasRaw(ctx, projectID, region, platformID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListPlatformQuotasResponse(rsp)
}

// GetPlatformQuota request returning *GetPlatformQuotaResponse
func (c *ClientWithResponses) GetPlatformQuota(ctx context.Context, projectID openapiTypes.UUID, region string, platformID openapiTypes.UUID, quotaID openapiTypes.UUID, reqEditors ...RequestEditorFn) (*GetPlatformQuotaResponse, error) {
	rsp, err := c.GetPlatformQuotaRaw(ctx, projectID, region, platformID, quotaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetPlatformQuotaResponse(rsp)
}

// ParseListOrganizationQuotasResponse parses an HTTP response from a ListOrganizationQuotas call
func (c *ClientWithResponses) ParseListOrganizationQuotasResponse(rsp *http.Response) (*ListOrganizationQuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOrganizationQuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Quota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetOrganizationQuotaResponse parses an HTTP response from a GetOrganizationQuota call
func (c *ClientWithResponses) ParseGetOrganizationQuotaResponse(rsp *http.Response) (*GetOrganizationQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseListPlatformQuotasResponse parses an HTTP response from a ListPlatformQuotas call
func (c *ClientWithResponses) ParseListPlatformQuotasResponse(rsp *http.Response) (*ListPlatformQuotasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListPlatformQuotasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Quota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetPlatformQuotaResponse parses an HTTP response from a GetPlatformQuota call
func (c *ClientWithResponses) ParseGetPlatformQuotaResponse(rsp *http.Response) (*GetPlatformQuotaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlatformQuotaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quota
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}
