// Package databases provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.2 DO NOT EDIT.
package databases

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// InstanceCreateDatabaseRequest defines model for instance.CreateDatabaseRequest.
type InstanceCreateDatabaseRequest struct {
	Name *string `json:"name,omitempty"`

	// Options Database specific options
	Options *map[string]string `json:"options,omitempty"`
}

// InstanceCreateDatabaseResponse defines model for instance.CreateDatabaseResponse.
type InstanceCreateDatabaseResponse struct {
	ID *string `json:"id,omitempty"`
}

// InstanceDatabase defines model for instance.Database.
type InstanceDatabase struct {
	ID   *string `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`

	// Options Database specific options
	Options *map[string]interface{} `json:"options,omitempty"`
}

// InstanceError defines model for instance.Error.
type InstanceError struct {
	Code    *int                 `json:"code,omitempty"`
	Fields  *map[string][]string `json:"fields,omitempty"`
	Message *string              `json:"message,omitempty"`
	Type    *string              `json:"type,omitempty"`
}

// InstanceListDatabasesResponse defines model for instance.ListDatabasesResponse.
type InstanceListDatabasesResponse struct {
	Databases *[]InstanceDatabase `json:"databases,omitempty"`
}

// PostInstanceDatabasesJSONRequestBody defines body for PostInstanceDatabases for application/json ContentType.
type PostInstanceDatabasesJSONRequestBody = InstanceCreateDatabaseRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// GetDatabases request
	GetDatabasesRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInstanceDatabases request with any body
	PostInstanceDatabasesRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInstanceDatabasesRaw(ctx context.Context, projectID string, instanceID string, body PostInstanceDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDatabasesDatabaseID request
	DeleteDatabasesDatabaseIDRaw(ctx context.Context, projectID string, instanceID string, databaseID string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetDatabasesRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDatabasesRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstanceDatabasesRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstanceDatabasesRequestWithBody(ctx, c.Server, projectID, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInstanceDatabasesRaw(ctx context.Context, projectID string, instanceID string, body PostInstanceDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInstanceDatabasesRequest(ctx, c.Server, projectID, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDatabasesDatabaseIDRaw(ctx context.Context, projectID string, instanceID string, databaseID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDatabasesDatabaseIDRequest(ctx, c.Server, projectID, instanceID, databaseID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetDatabasesRequest generates requests for GetDatabases
func NewGetDatabasesRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/databases", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostInstanceDatabasesRequest calls the generic PostInstanceDatabases builder with application/json body
func NewPostInstanceDatabasesRequest(ctx context.Context, server string, projectID string, instanceID string, body PostInstanceDatabasesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInstanceDatabasesRequestWithBody(ctx, server, projectID, instanceID, "application/json", bodyReader)
}

// NewPostInstanceDatabasesRequestWithBody generates requests for PostInstanceDatabases with any type of body
func NewPostInstanceDatabasesRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/databases", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDatabasesDatabaseIDRequest generates requests for DeleteDatabasesDatabaseID
func NewDeleteDatabasesDatabaseIDRequest(ctx context.Context, server string, projectID string, instanceID string, databaseID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "databaseID", runtime.ParamLocationPath, databaseID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/databases/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetDatabases request
	GetDatabases(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*GetDatabasesResponse, error)

	// PostInstanceDatabases request with any body
	PostInstanceDatabasesWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstanceDatabasesResponse, error)

	PostInstanceDatabases(ctx context.Context, projectID string, instanceID string, body PostInstanceDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstanceDatabasesResponse, error)

	// DeleteDatabasesDatabaseID request
	DeleteDatabasesDatabaseID(ctx context.Context, projectID string, instanceID string, databaseID string, reqEditors ...RequestEditorFn) (*DeleteDatabasesDatabaseIDResponse, error)
}

type GetDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceListDatabasesResponse
	JSON400      *InstanceError
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInstanceDatabasesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *InstanceCreateDatabaseResponse
	JSON400      *InstanceError
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r PostInstanceDatabasesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInstanceDatabasesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDatabasesDatabaseIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *InstanceError
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteDatabasesDatabaseIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDatabasesDatabaseIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetDatabases request returning *GetDatabasesResponse
func (c *ClientWithResponses) GetDatabases(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*GetDatabasesResponse, error) {
	rsp, err := c.GetDatabasesRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetDatabasesResponse(rsp)
}

// PostInstanceDatabasesWithBody request with arbitrary body returning *PostInstanceDatabasesResponse
func (c *ClientWithResponses) PostInstanceDatabasesWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInstanceDatabasesResponse, error) {
	rsp, err := c.PostInstanceDatabasesRawWithBody(ctx, projectID, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostInstanceDatabasesResponse(rsp)
}

func (c *ClientWithResponses) PostInstanceDatabases(ctx context.Context, projectID string, instanceID string, body PostInstanceDatabasesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInstanceDatabasesResponse, error) {
	rsp, err := c.PostInstanceDatabasesRaw(ctx, projectID, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostInstanceDatabasesResponse(rsp)
}

// DeleteDatabasesDatabaseID request returning *DeleteDatabasesDatabaseIDResponse
func (c *ClientWithResponses) DeleteDatabasesDatabaseID(ctx context.Context, projectID string, instanceID string, databaseID string, reqEditors ...RequestEditorFn) (*DeleteDatabasesDatabaseIDResponse, error) {
	rsp, err := c.DeleteDatabasesDatabaseIDRaw(ctx, projectID, instanceID, databaseID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteDatabasesDatabaseIDResponse(rsp)
}

// ParseGetDatabasesResponse parses an HTTP response from a GetDatabases call
func (c *ClientWithResponses) ParseGetDatabasesResponse(rsp *http.Response) (*GetDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceListDatabasesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InstanceError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParsePostInstanceDatabasesResponse parses an HTTP response from a PostInstanceDatabases call
func (c *ClientWithResponses) ParsePostInstanceDatabasesResponse(rsp *http.Response) (*PostInstanceDatabasesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInstanceDatabasesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest InstanceCreateDatabaseResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InstanceError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteDatabasesDatabaseIDResponse parses an HTTP response from a DeleteDatabasesDatabaseID call
func (c *ClientWithResponses) ParseDeleteDatabasesDatabaseIDResponse(rsp *http.Response) (*DeleteDatabasesDatabaseIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDatabasesDatabaseIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest InstanceError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	}

	return response, validate.ResponseObject(response)
}
