// Package instances provides primitives to interact with the openapi HTTP API.
//
// Code generated by dev.azure.com/schwarzit/schwarzit.odj.core/_git/stackit-client-generator.git version v1.0.23 DO NOT EDIT.
package instances

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	"github.com/SchwarzIT/community-stackit-go-client/internal/helpers/runtime"
	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// Defines values for LastOperationState.
const (
	FAILED      LastOperationState = "failed"
	IN_PROGRESS LastOperationState = "in progress"
	SUCCEEDED   LastOperationState = "succeeded"
)

// Defines values for LastOperationType.
const (
	CREATE LastOperationType = "create"
	DELETE LastOperationType = "delete"
	UPDATE LastOperationType = "update"
)

// Error defines model for Error.
type Error struct {
	Description string `json:"description"`
	Error       string `json:"error"`
}

// Instance defines model for Instance.
type Instance struct {
	CfGuid           string        `json:"cfGuid"`
	CfSpaceGuid      string        `json:"cfSpaceGuid"`
	DashboardUrl     string        `json:"dashboardUrl"`
	ImageUrl         string        `json:"imageUrl"`
	InstanceID       *string       `json:"instanceId,omitempty"`
	LastOperation    LastOperation `json:"lastOperation"`
	Name             string        `json:"name"`
	OrganizationGuid *string       `json:"organizationGuid,omitempty"`
	Parameters       Object        `json:"parameters"`
	PlanID           string        `json:"planId"`
}

// InstanceBackup defines model for InstanceBackup.
type InstanceBackup struct {
	Downloadable *bool   `json:"downloadable,omitempty"`
	FinishedAt   string  `json:"finished_at"`
	ID           int     `json:"id"`
	Size         *int    `json:"size,omitempty"`
	Status       string  `json:"status"`
	TriggeredAt  *string `json:"triggered_at,omitempty"`
}

// InstanceBackupsList defines model for InstanceBackupsList.
type InstanceBackupsList struct {
	InstanceBackups []InstanceBackup `json:"instanceBackups"`
}

// InstanceID defines model for InstanceID.
type InstanceID struct {
	InstanceID string `json:"instanceId"`
}

// InstanceList defines model for InstanceList.
type InstanceList struct {
	Instances []Instance `json:"instances"`
}

// InstanceMetrics defines model for InstanceMetrics.
type InstanceMetrics struct {
	CpuIDleTime                          *int `json:"cpuIdleTime,omitempty"`
	CpuLoadPercent                       int  `json:"cpuLoadPercent"`
	CpuSystemTime                        *int `json:"cpuSystemTime,omitempty"`
	CpuUserTime                          *int `json:"cpuUserTime,omitempty"`
	DiskPersistentTotal                  int  `json:"diskPersistentTotal"`
	DiskPersistentUsed                   int  `json:"diskPersistentUsed"`
	MemoryTotal                          int  `json:"memoryTotal"`
	MemoryUsed                           int  `json:"memoryUsed"`
	ParachuteDiskPersistentActivated     int  `json:"parachuteDiskPersistentActivated"`
	ParachuteDiskPersistentTotal         int  `json:"parachuteDiskPersistentTotal"`
	ParachuteDiskPersistentUsed          int  `json:"parachuteDiskPersistentUsed"`
	ParachuteDiskPersistentUsedPercent   int  `json:"parachuteDiskPersistentUsedPercent"`
	ParachuteDiskPersistentUsedThreshold int  `json:"parachuteDiskPersistentUsedThreshold"`
}

// InstanceParameters defines model for InstanceParameters.
type InstanceParameters struct {
	EnableMonitoring     *bool     `json:"enable_monitoring,omitempty"`
	Graphite             *string   `json:"graphite,omitempty"`
	MetricsFrequency     *int      `json:"metrics_frequency,omitempty"`
	MetricsPrefix        *string   `json:"metrics_prefix,omitempty"`
	MonitoringInstanceID *string   `json:"monitoring_instance_id,omitempty"`
	Plugins              *[]string `json:"plugins,omitempty"`
	SgwAcl               *string   `json:"sgw_acl,omitempty"`
	Syslog               *[]string `json:"syslog,omitempty"`
}

// InstanceProvisionRequest defines model for InstanceProvisionRequest.
type InstanceProvisionRequest struct {
	InstanceName string              `json:"instanceName"`
	Parameters   *InstanceParameters `json:"parameters,omitempty"`
	PlanID       string              `json:"planId"`
}

// InstanceUpdateRequest defines model for InstanceUpdateRequest.
type InstanceUpdateRequest struct {
	Parameters *InstanceParameters `json:"parameters,omitempty"`
	PlanID     string              `json:"planId"`
}

// Object defines model for Object.
type Object = map[string]interface{}

// LastOperation defines model for lastOperation.
type LastOperation struct {
	Description string             `json:"description"`
	State       LastOperationState `json:"state"`
	Type        LastOperationType  `json:"type"`
}

// LastOperationState defines model for LastOperation.State.
type LastOperationState string

// LastOperationType defines model for LastOperation.Type.
type LastOperationType string

// BadRequest defines model for BadRequest.
type BadRequest = Error

// NotFound defines model for NotFound.
type NotFound = Error

// InstanceProvisionJSONRequestBody defines body for InstanceProvision for application/json ContentType.
type InstanceProvisionJSONRequestBody = InstanceProvisionRequest

// InstanceUpdateJSONRequestBody defines body for InstanceUpdate for application/json ContentType.
type InstanceUpdateJSONRequestBody = InstanceUpdateRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// InstanceGetByGateway request
	InstanceGetByGatewayRaw(ctx context.Context, gatewayName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceList request
	InstanceListRaw(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceProvision request with any body
	InstanceProvisionRawWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceProvisionRaw(ctx context.Context, projectID string, body InstanceProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceDeprovision request
	InstanceDeprovisionRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceGet request
	InstanceGetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceUpdate request with any body
	InstanceUpdateRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstanceUpdateRaw(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceBackupsGet request
	InstanceBackupsGetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstanceMetricsGet request
	InstanceMetricsGetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) InstanceGetByGatewayRaw(ctx context.Context, gatewayName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceGetByGatewayRequest(ctx, c.Server, gatewayName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceListRaw(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceListRequest(ctx, c.Server, projectID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceProvisionRawWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceProvisionRequestWithBody(ctx, c.Server, projectID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceProvisionRaw(ctx context.Context, projectID string, body InstanceProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceProvisionRequest(ctx, c.Server, projectID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceDeprovisionRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceDeprovisionRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceGetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceGetRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceUpdateRawWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceUpdateRequestWithBody(ctx, c.Server, projectID, instanceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceUpdateRaw(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceUpdateRequest(ctx, c.Server, projectID, instanceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceBackupsGetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceBackupsGetRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstanceMetricsGetRaw(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstanceMetricsGetRequest(ctx, c.Server, projectID, instanceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewInstanceGetByGatewayRequest generates requests for InstanceGetByGateway
func NewInstanceGetByGatewayRequest(ctx context.Context, server string, gatewayName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "gatewayName", runtime.ParamLocationPath, gatewayName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/instances/gatewayName/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceListRequest generates requests for InstanceList
func NewInstanceListRequest(ctx context.Context, server string, projectID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceProvisionRequest calls the generic InstanceProvision builder with application/json body
func NewInstanceProvisionRequest(ctx context.Context, server string, projectID string, body InstanceProvisionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceProvisionRequestWithBody(ctx, server, projectID, "application/json", bodyReader)
}

// NewInstanceProvisionRequestWithBody generates requests for InstanceProvision with any type of body
func NewInstanceProvisionRequestWithBody(ctx context.Context, server string, projectID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceDeprovisionRequest generates requests for InstanceDeprovision
func NewInstanceDeprovisionRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceGetRequest generates requests for InstanceGet
func NewInstanceGetRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceUpdateRequest calls the generic InstanceUpdate builder with application/json body
func NewInstanceUpdateRequest(ctx context.Context, server string, projectID string, instanceID string, body InstanceUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstanceUpdateRequestWithBody(ctx, server, projectID, instanceID, "application/json", bodyReader)
}

// NewInstanceUpdateRequestWithBody generates requests for InstanceUpdate with any type of body
func NewInstanceUpdateRequestWithBody(ctx context.Context, server string, projectID string, instanceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewInstanceBackupsGetRequest generates requests for InstanceBackupsGet
func NewInstanceBackupsGetRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/backups", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstanceMetricsGetRequest generates requests for InstanceMetricsGet
func NewInstanceMetricsGetRequest(ctx context.Context, server string, projectID string, instanceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectID", runtime.ParamLocationPath, projectID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "instanceID", runtime.ParamLocationPath, instanceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/instances/%s/metrics", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// InstanceGetByGateway request
	InstanceGetByGateway(ctx context.Context, gatewayName string, reqEditors ...RequestEditorFn) (*InstanceGetByGatewayResponse, error)

	// InstanceList request
	InstanceList(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*InstanceListResponse, error)

	// InstanceProvision request with any body
	InstanceProvisionWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceProvisionResponse, error)

	InstanceProvision(ctx context.Context, projectID string, body InstanceProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceProvisionResponse, error)

	// InstanceDeprovision request
	InstanceDeprovision(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceDeprovisionResponse, error)

	// InstanceGet request
	InstanceGet(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceGetResponse, error)

	// InstanceUpdate request with any body
	InstanceUpdateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error)

	InstanceUpdate(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error)

	// InstanceBackupsGet request
	InstanceBackupsGet(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceBackupsGetResponse, error)

	// InstanceMetricsGet request
	InstanceMetricsGet(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceMetricsGetResponse, error)
}

type InstanceGetByGatewayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON404      *Error
	JSON410      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceGetByGatewayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceGetByGatewayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceList
	JSON404      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceProvisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *InstanceID
	JSON400      *Error
	JSON409      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceProvisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceProvisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceDeprovisionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceDeprovisionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceDeprovisionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Instance
	JSON404      *Error
	JSON410      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceBackupsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceBackupsList
	JSON404      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceBackupsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceBackupsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstanceMetricsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InstanceMetrics
	JSON404      *Error
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r InstanceMetricsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstanceMetricsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// InstanceGetByGateway request returning *InstanceGetByGatewayResponse
func (c *ClientWithResponses) InstanceGetByGateway(ctx context.Context, gatewayName string, reqEditors ...RequestEditorFn) (*InstanceGetByGatewayResponse, error) {
	rsp, err := c.InstanceGetByGatewayRaw(ctx, gatewayName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceGetByGatewayResponse(rsp)
}

// InstanceList request returning *InstanceListResponse
func (c *ClientWithResponses) InstanceList(ctx context.Context, projectID string, reqEditors ...RequestEditorFn) (*InstanceListResponse, error) {
	rsp, err := c.InstanceListRaw(ctx, projectID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceListResponse(rsp)
}

// InstanceProvisionWithBody request with arbitrary body returning *InstanceProvisionResponse
func (c *ClientWithResponses) InstanceProvisionWithBody(ctx context.Context, projectID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceProvisionResponse, error) {
	rsp, err := c.InstanceProvisionRawWithBody(ctx, projectID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceProvisionResponse(rsp)
}

func (c *ClientWithResponses) InstanceProvision(ctx context.Context, projectID string, body InstanceProvisionJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceProvisionResponse, error) {
	rsp, err := c.InstanceProvisionRaw(ctx, projectID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceProvisionResponse(rsp)
}

// InstanceDeprovision request returning *InstanceDeprovisionResponse
func (c *ClientWithResponses) InstanceDeprovision(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceDeprovisionResponse, error) {
	rsp, err := c.InstanceDeprovisionRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceDeprovisionResponse(rsp)
}

// InstanceGet request returning *InstanceGetResponse
func (c *ClientWithResponses) InstanceGet(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceGetResponse, error) {
	rsp, err := c.InstanceGetRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceGetResponse(rsp)
}

// InstanceUpdateWithBody request with arbitrary body returning *InstanceUpdateResponse
func (c *ClientWithResponses) InstanceUpdateWithBody(ctx context.Context, projectID string, instanceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error) {
	rsp, err := c.InstanceUpdateRawWithBody(ctx, projectID, instanceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceUpdateResponse(rsp)
}

func (c *ClientWithResponses) InstanceUpdate(ctx context.Context, projectID string, instanceID string, body InstanceUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*InstanceUpdateResponse, error) {
	rsp, err := c.InstanceUpdateRaw(ctx, projectID, instanceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceUpdateResponse(rsp)
}

// InstanceBackupsGet request returning *InstanceBackupsGetResponse
func (c *ClientWithResponses) InstanceBackupsGet(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceBackupsGetResponse, error) {
	rsp, err := c.InstanceBackupsGetRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceBackupsGetResponse(rsp)
}

// InstanceMetricsGet request returning *InstanceMetricsGetResponse
func (c *ClientWithResponses) InstanceMetricsGet(ctx context.Context, projectID string, instanceID string, reqEditors ...RequestEditorFn) (*InstanceMetricsGetResponse, error) {
	rsp, err := c.InstanceMetricsGetRaw(ctx, projectID, instanceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseInstanceMetricsGetResponse(rsp)
}

// ParseInstanceGetByGatewayResponse parses an HTTP response from a InstanceGetByGateway call
func (c *ClientWithResponses) ParseInstanceGetByGatewayResponse(rsp *http.Response) (*InstanceGetByGatewayResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceGetByGatewayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON410 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceListResponse parses an HTTP response from a InstanceList call
func (c *ClientWithResponses) ParseInstanceListResponse(rsp *http.Response) (*InstanceListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceProvisionResponse parses an HTTP response from a InstanceProvision call
func (c *ClientWithResponses) ParseInstanceProvisionResponse(rsp *http.Response) (*InstanceProvisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceProvisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest InstanceID
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceDeprovisionResponse parses an HTTP response from a InstanceDeprovision call
func (c *ClientWithResponses) ParseInstanceDeprovisionResponse(rsp *http.Response) (*InstanceDeprovisionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceDeprovisionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceGetResponse parses an HTTP response from a InstanceGet call
func (c *ClientWithResponses) ParseInstanceGetResponse(rsp *http.Response) (*InstanceGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Instance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 410:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON410 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceUpdateResponse parses an HTTP response from a InstanceUpdate call
func (c *ClientWithResponses) ParseInstanceUpdateResponse(rsp *http.Response) (*InstanceUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceBackupsGetResponse parses an HTTP response from a InstanceBackupsGet call
func (c *ClientWithResponses) ParseInstanceBackupsGetResponse(rsp *http.Response) (*InstanceBackupsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceBackupsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceBackupsList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseInstanceMetricsGetResponse parses an HTTP response from a InstanceMetricsGet call
func (c *ClientWithResponses) ParseInstanceMetricsGetResponse(rsp *http.Response) (*InstanceMetricsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstanceMetricsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InstanceMetrics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}
