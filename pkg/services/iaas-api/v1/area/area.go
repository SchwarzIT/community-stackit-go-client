// Package area provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.2 DO NOT EDIT.
package area

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// V1Area The basic properties of a network area.
type V1Area struct {
	// DefaultNameservers A list containing DNS Servers/Nameservers for IPv4.
	DefaultNameservers *V1Nameserver `json:"defaultNameservers,omitempty"`

	// NetworkRanges A list of network ranges.
	NetworkRanges *V1NetworkRangeList `json:"networkRanges,omitempty"`

	// Routes A list of routes.
	Routes *V1RouteList `json:"routes,omitempty"`

	// TransferNetwork Classless Inter-Domain Routing (CIDR).
	TransferNetwork *V1CIDR `json:"transferNetwork,omitempty"`
}

// V1AreaConfig The basic network area object.
type V1AreaConfig struct {
	DefaultNameservers *[]V1IP `json:"defaultNameservers,omitempty"`

	// NetworkRanges A list of network ranges.
	NetworkRanges V1NetworkRangeList `json:"networkRanges"`

	// Routes A list of routes.
	Routes *V1RouteList `json:"routes,omitempty"`

	// TransferNetwork Classless Inter-Domain Routing (CIDR).
	TransferNetwork V1CIDR `json:"transferNetwork"`
}

// V1AreaDefaultPrefixLengthIPv4 The default prefix length for networks in the network area.
type V1AreaDefaultPrefixLengthIPv4 = int

// V1AreaMaxPrefixLengthIPv4 The maximal prefix length for networks in the network area.
type V1AreaMaxPrefixLengthIPv4 = int

// V1AreaMinPrefixLengthIPv4 The minimal prefix length for networks in the network area.
type V1AreaMinPrefixLengthIPv4 = int

// V1AreaPrefixConfigIPv4 The IPv4 prefix config for a network area.
type V1AreaPrefixConfigIPv4 struct {
	DefaultPrefixLen *V1AreaDefaultPrefixLengthIPv4 `json:"defaultPrefixLen,omitempty"`
	MaxPrefixLen     *V1AreaMaxPrefixLengthIPv4     `json:"maxPrefixLen,omitempty"`
	MinPrefixLen     *V1AreaMinPrefixLengthIPv4     `json:"minPrefixLen,omitempty"`
}

// V1CIDR Classless Inter-Domain Routing (CIDR).
type V1CIDR = string

// V1CreateAreaAddressFamily The addressFamily object for a area create request.
type V1CreateAreaAddressFamily struct {
	// Ipv4 The config object for a IPv4 network area.
	Ipv4 *V1CreateAreaIPv4 `json:"ipv4,omitempty"`
}

// V1CreateAreaIPv4 defines model for v1CreateAreaIPv4.
type V1CreateAreaIPv4 struct {
	DefaultNameservers *[]V1IP                        `json:"defaultNameservers,omitempty"`
	DefaultPrefixLen   *V1AreaDefaultPrefixLengthIPv4 `json:"defaultPrefixLen,omitempty"`
	MaxPrefixLen       *V1AreaMaxPrefixLengthIPv4     `json:"maxPrefixLen,omitempty"`
	MinPrefixLen       *V1AreaMinPrefixLengthIPv4     `json:"minPrefixLen,omitempty"`

	// NetworkRanges A list of network ranges.
	NetworkRanges V1NetworkRangeList `json:"networkRanges"`

	// Routes A list of routes.
	Routes *V1RouteList `json:"routes,omitempty"`

	// TransferNetwork Classless Inter-Domain Routing (CIDR).
	TransferNetwork V1CIDR `json:"transferNetwork"`
}

// V1Error Error with HTTP error code and an error message.
type V1Error struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

// V1GenericName The name for a General Object. Matches Names and also UUIDs.
type V1GenericName = string

// V1IP Object that represents an IPv4 address.
type V1IP = string

// V1Nameserver A list containing DNS Servers/Nameservers for IPv4.
type V1Nameserver = []V1IP

// V1NetworkArea Object that represents a network area.
type V1NetworkArea struct {
	// AreaId Universally Unique Identifier (UUID).
	AreaID V1UUID `json:"areaId"`

	// Ipv4 The IPv4 properties of a network area.
	Ipv4 *V1NetworkAreaIPv4 `json:"ipv4,omitempty"`
	Name string             `json:"name"`

	// ProjectCount The amount of projects currently referencing a specific area.
	ProjectCount V1ProjectCount `json:"projectCount"`

	// State The state of a resource object.
	State V1ResourceState `json:"state"`
}

// V1NetworkAreaIPv4 defines model for v1NetworkAreaIPv4.
type V1NetworkAreaIPv4 struct {
	// DefaultNameservers A list containing DNS Servers/Nameservers for IPv4.
	DefaultNameservers *V1Nameserver                  `json:"defaultNameservers,omitempty"`
	DefaultPrefixLen   *V1AreaDefaultPrefixLengthIPv4 `json:"defaultPrefixLen,omitempty"`
	MaxPrefixLen       *V1AreaMaxPrefixLengthIPv4     `json:"maxPrefixLen,omitempty"`
	MinPrefixLen       *V1AreaMinPrefixLengthIPv4     `json:"minPrefixLen,omitempty"`

	// NetworkRanges A list of network ranges.
	NetworkRanges *V1NetworkRangeList `json:"networkRanges,omitempty"`

	// Routes A list of routes.
	Routes *V1RouteList `json:"routes,omitempty"`

	// TransferNetwork Classless Inter-Domain Routing (CIDR).
	TransferNetwork *V1CIDR `json:"transferNetwork,omitempty"`
}

// V1NetworkAreaList A list of network areas.
type V1NetworkAreaList = []V1NetworkArea

// V1NetworkAreaListResponse Network area list response.
type V1NetworkAreaListResponse struct {
	// Items A list of network areas.
	Items V1NetworkAreaList `json:"items"`
}

// V1NetworkRange Object that represents a network range.
type V1NetworkRange struct {
	NetworkRangeID *V1UUID `json:"networkRangeId,omitempty"`

	// Prefix Classless Inter-Domain Routing (CIDR).
	Prefix V1CIDR `json:"prefix"`
}

// V1NetworkRangeList A list of network ranges.
type V1NetworkRangeList = []V1NetworkRange

// V1NetworkRangeListResponse Network Range list response.
type V1NetworkRangeListResponse struct {
	// Items A list of network ranges.
	Items V1NetworkRangeList `json:"items"`
}

// V1ProjectCount The amount of projects currently referencing a specific area.
type V1ProjectCount = int

// V1ProjectList A list of STACKIT projects.
type V1ProjectList = []V1UUID

// V1ProjectListResponse Project list response.
type V1ProjectListResponse struct {
	// Items A list of STACKIT projects.
	Items V1ProjectList `json:"items"`
}

// V1ResourceState The state of a resource object.
type V1ResourceState = string

// V1Route Object represents a network route.
type V1Route struct {
	// Nexthop Object that represents an IPv4 address.
	Nexthop V1IP `json:"nexthop"`

	// Prefix Classless Inter-Domain Routing (CIDR).
	Prefix  V1CIDR  `json:"prefix"`
	RouteID *V1UUID `json:"routeId,omitempty"`
}

// V1RouteList A list of routes.
type V1RouteList = []V1Route

// V1RouteListResponse Route list response.
type V1RouteListResponse struct {
	// Items A list of routes.
	Items V1RouteList `json:"items"`
}

// V1UUID Universally Unique Identifier (UUID).
type V1UUID = openapiTypes.UUID

// V1UpdateAreaAddressFamily The addressFamily object for a area update request.
type V1UpdateAreaAddressFamily struct {
	// Ipv4 The update object for a IPv4 network area.
	Ipv4 *V1UpdateAreaIPv4 `json:"ipv4,omitempty"`
}

// V1UpdateAreaIPv4 The update object for a IPv4 network area.
type V1UpdateAreaIPv4 struct {
	DefaultNameservers *[]V1IP `json:"defaultNameservers,omitempty"`

	// DefaultPrefixLen The default prefix length for networks in the network area.
	DefaultPrefixLen *V1AreaDefaultPrefixLengthIPv4 `json:"defaultPrefixLen,omitempty"`

	// MaxPrefixLen The maximal prefix length for networks in the network area.
	MaxPrefixLen *V1AreaMaxPrefixLengthIPv4 `json:"maxPrefixLen,omitempty"`

	// MinPrefixLen The minimal prefix length for networks in the network area.
	MinPrefixLen *V1AreaMinPrefixLengthIPv4 `json:"minPrefixLen,omitempty"`
}

// BadRequest Error with HTTP error code and an error message.
type BadRequest = V1Error

// Forbidden Error with HTTP error code and an error message.
type Forbidden = V1Error

// InternalServerError Error with HTTP error code and an error message.
type InternalServerError = V1Error

// NotFound Error with HTTP error code and an error message.
type NotFound = V1Error

// Unauthorized Error with HTTP error code and an error message.
type Unauthorized = V1Error

// V1CreateAreaJSONBody defines parameters for V1CreateArea.
type V1CreateAreaJSONBody struct {
	// AddressFamily The addressFamily object for a area create request.
	AddressFamily V1CreateAreaAddressFamily `json:"addressFamily"`

	// Name The name for a General Object. Matches Names and also UUIDs.
	Name V1GenericName `json:"name"`
}

// V1UpdateAreaJSONBody defines parameters for V1UpdateArea.
type V1UpdateAreaJSONBody struct {
	// AddressFamily The addressFamily object for a area update request.
	AddressFamily *V1UpdateAreaAddressFamily `json:"addressFamily,omitempty"`

	// Name The name for a General Object. Matches Names and also UUIDs.
	Name *V1GenericName `json:"name,omitempty"`
}

// V1AddNetworkRangesToAreaJSONBody defines parameters for V1AddNetworkRangesToArea.
type V1AddNetworkRangesToAreaJSONBody struct {
	// Ipv4 A list of network ranges.
	Ipv4 *V1NetworkRangeList `json:"ipv4,omitempty"`
}

// V1AddRoutesToAreaJSONBody defines parameters for V1AddRoutesToArea.
type V1AddRoutesToAreaJSONBody struct {
	// Ipv4 A list of routes.
	Ipv4 *V1RouteList `json:"ipv4,omitempty"`
}

// V1CreateAreaJSONRequestBody defines body for V1CreateArea for application/json ContentType.
type V1CreateAreaJSONRequestBody V1CreateAreaJSONBody

// V1UpdateAreaJSONRequestBody defines body for V1UpdateArea for application/json ContentType.
type V1UpdateAreaJSONRequestBody V1UpdateAreaJSONBody

// V1AddNetworkRangesToAreaJSONRequestBody defines body for V1AddNetworkRangesToArea for application/json ContentType.
type V1AddNetworkRangesToAreaJSONRequestBody V1AddNetworkRangesToAreaJSONBody

// V1AddRoutesToAreaJSONRequestBody defines body for V1AddRoutesToArea for application/json ContentType.
type V1AddRoutesToAreaJSONRequestBody V1AddRoutesToAreaJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// V1ListAreas request
	V1ListAreasRaw(ctx context.Context, organizationID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1CreateArea request with any body
	V1CreateAreaRawWithBody(ctx context.Context, organizationID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1CreateAreaRaw(ctx context.Context, organizationID V1UUID, body V1CreateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1DeleteArea request
	V1DeleteAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetArea request
	V1GetAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1UpdateArea request with any body
	V1UpdateAreaRawWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1UpdateAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1UpdateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ListNetworkRangesOfArea request
	V1ListNetworkRangesOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AddNetworkRangesToArea request with any body
	V1AddNetworkRangesToAreaRawWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AddNetworkRangesToAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddNetworkRangesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1DeleteNetworkRangeFromArea request
	V1DeleteNetworkRangeFromAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetNetworkRangeOfArea request
	V1GetNetworkRangeOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetProjectsUsingArea request
	V1GetProjectsUsingAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ListRoutesOfArea request
	V1ListRoutesOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1AddRoutesToArea request with any body
	V1AddRoutesToAreaRawWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1AddRoutesToAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddRoutesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1DeleteRouteFromArea request
	V1DeleteRouteFromAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetRouteOfArea request
	V1GetRouteOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) V1ListAreasRaw(ctx context.Context, organizationID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListAreasRequest(ctx, c.Server, organizationID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1CreateAreaRawWithBody(ctx context.Context, organizationID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1CreateAreaRequestWithBody(ctx, c.Server, organizationID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1CreateAreaRaw(ctx context.Context, organizationID V1UUID, body V1CreateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1CreateAreaRequest(ctx, c.Server, organizationID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1DeleteAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1DeleteAreaRequest(ctx, c.Server, organizationID, areaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetAreaRequest(ctx, c.Server, organizationID, areaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1UpdateAreaRawWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1UpdateAreaRequestWithBody(ctx, c.Server, organizationID, areaID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1UpdateAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1UpdateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1UpdateAreaRequest(ctx, c.Server, organizationID, areaID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ListNetworkRangesOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListNetworkRangesOfAreaRequest(ctx, c.Server, organizationID, areaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AddNetworkRangesToAreaRawWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AddNetworkRangesToAreaRequestWithBody(ctx, c.Server, organizationID, areaID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AddNetworkRangesToAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddNetworkRangesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AddNetworkRangesToAreaRequest(ctx, c.Server, organizationID, areaID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1DeleteNetworkRangeFromAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1DeleteNetworkRangeFromAreaRequest(ctx, c.Server, organizationID, areaID, networkRangeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetNetworkRangeOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetNetworkRangeOfAreaRequest(ctx, c.Server, organizationID, areaID, networkRangeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetProjectsUsingAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetProjectsUsingAreaRequest(ctx, c.Server, organizationID, areaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ListRoutesOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListRoutesOfAreaRequest(ctx, c.Server, organizationID, areaID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AddRoutesToAreaRawWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AddRoutesToAreaRequestWithBody(ctx, c.Server, organizationID, areaID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1AddRoutesToAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddRoutesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1AddRoutesToAreaRequest(ctx, c.Server, organizationID, areaID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1DeleteRouteFromAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1DeleteRouteFromAreaRequest(ctx, c.Server, organizationID, areaID, routeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetRouteOfAreaRaw(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetRouteOfAreaRequest(ctx, c.Server, organizationID, areaID, routeID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewV1ListAreasRequest generates requests for V1ListAreas
func NewV1ListAreasRequest(ctx context.Context, server string, organizationID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1CreateAreaRequest calls the generic V1CreateArea builder with application/json body
func NewV1CreateAreaRequest(ctx context.Context, server string, organizationID V1UUID, body V1CreateAreaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1CreateAreaRequestWithBody(ctx, server, organizationID, "application/json", bodyReader)
}

// NewV1CreateAreaRequestWithBody generates requests for V1CreateArea with any type of body
func NewV1CreateAreaRequestWithBody(ctx context.Context, server string, organizationID V1UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1DeleteAreaRequest generates requests for V1DeleteArea
func NewV1DeleteAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1GetAreaRequest generates requests for V1GetArea
func NewV1GetAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1UpdateAreaRequest calls the generic V1UpdateArea builder with application/json body
func NewV1UpdateAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, body V1UpdateAreaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1UpdateAreaRequestWithBody(ctx, server, organizationID, areaID, "application/json", bodyReader)
}

// NewV1UpdateAreaRequestWithBody generates requests for V1UpdateArea with any type of body
func NewV1UpdateAreaRequestWithBody(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1ListNetworkRangesOfAreaRequest generates requests for V1ListNetworkRangesOfArea
func NewV1ListNetworkRangesOfAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/network-ranges", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1AddNetworkRangesToAreaRequest calls the generic V1AddNetworkRangesToArea builder with application/json body
func NewV1AddNetworkRangesToAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, body V1AddNetworkRangesToAreaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AddNetworkRangesToAreaRequestWithBody(ctx, server, organizationID, areaID, "application/json", bodyReader)
}

// NewV1AddNetworkRangesToAreaRequestWithBody generates requests for V1AddNetworkRangesToArea with any type of body
func NewV1AddNetworkRangesToAreaRequestWithBody(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/network-ranges", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1DeleteNetworkRangeFromAreaRequest generates requests for V1DeleteNetworkRangeFromArea
func NewV1DeleteNetworkRangeFromAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "networkRangeID", runtime.ParamLocationPath, networkRangeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/network-ranges/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1GetNetworkRangeOfAreaRequest generates requests for V1GetNetworkRangeOfArea
func NewV1GetNetworkRangeOfAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "networkRangeID", runtime.ParamLocationPath, networkRangeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/network-ranges/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1GetProjectsUsingAreaRequest generates requests for V1GetProjectsUsingArea
func NewV1GetProjectsUsingAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/projects", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1ListRoutesOfAreaRequest generates requests for V1ListRoutesOfArea
func NewV1ListRoutesOfAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/routes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1AddRoutesToAreaRequest calls the generic V1AddRoutesToArea builder with application/json body
func NewV1AddRoutesToAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, body V1AddRoutesToAreaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1AddRoutesToAreaRequestWithBody(ctx, server, organizationID, areaID, "application/json", bodyReader)
}

// NewV1AddRoutesToAreaRequestWithBody generates requests for V1AddRoutesToArea with any type of body
func NewV1AddRoutesToAreaRequestWithBody(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/routes", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1DeleteRouteFromAreaRequest generates requests for V1DeleteRouteFromArea
func NewV1DeleteRouteFromAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, routeID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "routeID", runtime.ParamLocationPath, routeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/routes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1GetRouteOfAreaRequest generates requests for V1GetRouteOfArea
func NewV1GetRouteOfAreaRequest(ctx context.Context, server string, organizationID V1UUID, areaID V1UUID, routeID V1UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationID", runtime.ParamLocationPath, organizationID)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "areaID", runtime.ParamLocationPath, areaID)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "routeID", runtime.ParamLocationPath, routeID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/network-areas/%s/routes/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// V1ListAreas request
	V1ListAreas(ctx context.Context, organizationID V1UUID, reqEditors ...RequestEditorFn) (*V1ListAreasResponse, error)

	// V1CreateArea request with any body
	V1CreateAreaWithBody(ctx context.Context, organizationID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1CreateAreaResponse, error)

	V1CreateArea(ctx context.Context, organizationID V1UUID, body V1CreateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1CreateAreaResponse, error)

	// V1DeleteArea request
	V1DeleteArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1DeleteAreaResponse, error)

	// V1GetArea request
	V1GetArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1GetAreaResponse, error)

	// V1UpdateArea request with any body
	V1UpdateAreaWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1UpdateAreaResponse, error)

	V1UpdateArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1UpdateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1UpdateAreaResponse, error)

	// V1ListNetworkRangesOfArea request
	V1ListNetworkRangesOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1ListNetworkRangesOfAreaResponse, error)

	// V1AddNetworkRangesToArea request with any body
	V1AddNetworkRangesToAreaWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AddNetworkRangesToAreaResponse, error)

	V1AddNetworkRangesToArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddNetworkRangesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AddNetworkRangesToAreaResponse, error)

	// V1DeleteNetworkRangeFromArea request
	V1DeleteNetworkRangeFromArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*V1DeleteNetworkRangeFromAreaResponse, error)

	// V1GetNetworkRangeOfArea request
	V1GetNetworkRangeOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*V1GetNetworkRangeOfAreaResponse, error)

	// V1GetProjectsUsingArea request
	V1GetProjectsUsingArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1GetProjectsUsingAreaResponse, error)

	// V1ListRoutesOfArea request
	V1ListRoutesOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1ListRoutesOfAreaResponse, error)

	// V1AddRoutesToArea request with any body
	V1AddRoutesToAreaWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AddRoutesToAreaResponse, error)

	V1AddRoutesToArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddRoutesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AddRoutesToAreaResponse, error)

	// V1DeleteRouteFromArea request
	V1DeleteRouteFromArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*V1DeleteRouteFromAreaResponse, error)

	// V1GetRouteOfArea request
	V1GetRouteOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*V1GetRouteOfAreaResponse, error)
}

type V1ListAreasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkAreaListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1ListAreasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ListAreasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1CreateAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkArea
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1CreateAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1CreateAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1DeleteAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON409      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1DeleteAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1DeleteAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkArea
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1GetAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1UpdateAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkArea
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1UpdateAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1UpdateAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ListNetworkRangesOfAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkRangeListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1ListNetworkRangesOfAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ListNetworkRangesOfAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AddNetworkRangesToAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkRangeListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON409      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1AddNetworkRangesToAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AddNetworkRangesToAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1DeleteNetworkRangeFromAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON409      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1DeleteNetworkRangeFromAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1DeleteNetworkRangeFromAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetNetworkRangeOfAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkRange
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1GetNetworkRangeOfAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetNetworkRangeOfAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetProjectsUsingAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1ProjectListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1GetProjectsUsingAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetProjectsUsingAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ListRoutesOfAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1RouteListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1ListRoutesOfAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ListRoutesOfAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1AddRoutesToAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *V1RouteListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON409      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1AddRoutesToAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1AddRoutesToAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1DeleteRouteFromAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1DeleteRouteFromAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1DeleteRouteFromAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetRouteOfAreaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1Route
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1GetRouteOfAreaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetRouteOfAreaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// V1ListAreas request returning *V1ListAreasResponse
func (c *ClientWithResponses) V1ListAreas(ctx context.Context, organizationID V1UUID, reqEditors ...RequestEditorFn) (*V1ListAreasResponse, error) {
	rsp, err := c.V1ListAreasRaw(ctx, organizationID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1ListAreasResponse(rsp)
}

// V1CreateAreaWithBody request with arbitrary body returning *V1CreateAreaResponse
func (c *ClientWithResponses) V1CreateAreaWithBody(ctx context.Context, organizationID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1CreateAreaResponse, error) {
	rsp, err := c.V1CreateAreaRawWithBody(ctx, organizationID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1CreateAreaResponse(rsp)
}

func (c *ClientWithResponses) V1CreateArea(ctx context.Context, organizationID V1UUID, body V1CreateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1CreateAreaResponse, error) {
	rsp, err := c.V1CreateAreaRaw(ctx, organizationID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1CreateAreaResponse(rsp)
}

// V1DeleteArea request returning *V1DeleteAreaResponse
func (c *ClientWithResponses) V1DeleteArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1DeleteAreaResponse, error) {
	rsp, err := c.V1DeleteAreaRaw(ctx, organizationID, areaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1DeleteAreaResponse(rsp)
}

// V1GetArea request returning *V1GetAreaResponse
func (c *ClientWithResponses) V1GetArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1GetAreaResponse, error) {
	rsp, err := c.V1GetAreaRaw(ctx, organizationID, areaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1GetAreaResponse(rsp)
}

// V1UpdateAreaWithBody request with arbitrary body returning *V1UpdateAreaResponse
func (c *ClientWithResponses) V1UpdateAreaWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1UpdateAreaResponse, error) {
	rsp, err := c.V1UpdateAreaRawWithBody(ctx, organizationID, areaID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1UpdateAreaResponse(rsp)
}

func (c *ClientWithResponses) V1UpdateArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1UpdateAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1UpdateAreaResponse, error) {
	rsp, err := c.V1UpdateAreaRaw(ctx, organizationID, areaID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1UpdateAreaResponse(rsp)
}

// V1ListNetworkRangesOfArea request returning *V1ListNetworkRangesOfAreaResponse
func (c *ClientWithResponses) V1ListNetworkRangesOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1ListNetworkRangesOfAreaResponse, error) {
	rsp, err := c.V1ListNetworkRangesOfAreaRaw(ctx, organizationID, areaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1ListNetworkRangesOfAreaResponse(rsp)
}

// V1AddNetworkRangesToAreaWithBody request with arbitrary body returning *V1AddNetworkRangesToAreaResponse
func (c *ClientWithResponses) V1AddNetworkRangesToAreaWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AddNetworkRangesToAreaResponse, error) {
	rsp, err := c.V1AddNetworkRangesToAreaRawWithBody(ctx, organizationID, areaID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1AddNetworkRangesToAreaResponse(rsp)
}

func (c *ClientWithResponses) V1AddNetworkRangesToArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddNetworkRangesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AddNetworkRangesToAreaResponse, error) {
	rsp, err := c.V1AddNetworkRangesToAreaRaw(ctx, organizationID, areaID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1AddNetworkRangesToAreaResponse(rsp)
}

// V1DeleteNetworkRangeFromArea request returning *V1DeleteNetworkRangeFromAreaResponse
func (c *ClientWithResponses) V1DeleteNetworkRangeFromArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*V1DeleteNetworkRangeFromAreaResponse, error) {
	rsp, err := c.V1DeleteNetworkRangeFromAreaRaw(ctx, organizationID, areaID, networkRangeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1DeleteNetworkRangeFromAreaResponse(rsp)
}

// V1GetNetworkRangeOfArea request returning *V1GetNetworkRangeOfAreaResponse
func (c *ClientWithResponses) V1GetNetworkRangeOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, networkRangeID V1UUID, reqEditors ...RequestEditorFn) (*V1GetNetworkRangeOfAreaResponse, error) {
	rsp, err := c.V1GetNetworkRangeOfAreaRaw(ctx, organizationID, areaID, networkRangeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1GetNetworkRangeOfAreaResponse(rsp)
}

// V1GetProjectsUsingArea request returning *V1GetProjectsUsingAreaResponse
func (c *ClientWithResponses) V1GetProjectsUsingArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1GetProjectsUsingAreaResponse, error) {
	rsp, err := c.V1GetProjectsUsingAreaRaw(ctx, organizationID, areaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1GetProjectsUsingAreaResponse(rsp)
}

// V1ListRoutesOfArea request returning *V1ListRoutesOfAreaResponse
func (c *ClientWithResponses) V1ListRoutesOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, reqEditors ...RequestEditorFn) (*V1ListRoutesOfAreaResponse, error) {
	rsp, err := c.V1ListRoutesOfAreaRaw(ctx, organizationID, areaID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1ListRoutesOfAreaResponse(rsp)
}

// V1AddRoutesToAreaWithBody request with arbitrary body returning *V1AddRoutesToAreaResponse
func (c *ClientWithResponses) V1AddRoutesToAreaWithBody(ctx context.Context, organizationID V1UUID, areaID V1UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1AddRoutesToAreaResponse, error) {
	rsp, err := c.V1AddRoutesToAreaRawWithBody(ctx, organizationID, areaID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1AddRoutesToAreaResponse(rsp)
}

func (c *ClientWithResponses) V1AddRoutesToArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, body V1AddRoutesToAreaJSONRequestBody, reqEditors ...RequestEditorFn) (*V1AddRoutesToAreaResponse, error) {
	rsp, err := c.V1AddRoutesToAreaRaw(ctx, organizationID, areaID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1AddRoutesToAreaResponse(rsp)
}

// V1DeleteRouteFromArea request returning *V1DeleteRouteFromAreaResponse
func (c *ClientWithResponses) V1DeleteRouteFromArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*V1DeleteRouteFromAreaResponse, error) {
	rsp, err := c.V1DeleteRouteFromAreaRaw(ctx, organizationID, areaID, routeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1DeleteRouteFromAreaResponse(rsp)
}

// V1GetRouteOfArea request returning *V1GetRouteOfAreaResponse
func (c *ClientWithResponses) V1GetRouteOfArea(ctx context.Context, organizationID V1UUID, areaID V1UUID, routeID V1UUID, reqEditors ...RequestEditorFn) (*V1GetRouteOfAreaResponse, error) {
	rsp, err := c.V1GetRouteOfAreaRaw(ctx, organizationID, areaID, routeID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1GetRouteOfAreaResponse(rsp)
}

// ParseV1ListAreasResponse parses an HTTP response from a V1ListAreas call
func (c *ClientWithResponses) ParseV1ListAreasResponse(rsp *http.Response) (*V1ListAreasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ListAreasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkAreaListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1CreateAreaResponse parses an HTTP response from a V1CreateArea call
func (c *ClientWithResponses) ParseV1CreateAreaResponse(rsp *http.Response) (*V1CreateAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1CreateAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkArea
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1DeleteAreaResponse parses an HTTP response from a V1DeleteArea call
func (c *ClientWithResponses) ParseV1DeleteAreaResponse(rsp *http.Response) (*V1DeleteAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1DeleteAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1GetAreaResponse parses an HTTP response from a V1GetArea call
func (c *ClientWithResponses) ParseV1GetAreaResponse(rsp *http.Response) (*V1GetAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkArea
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1UpdateAreaResponse parses an HTTP response from a V1UpdateArea call
func (c *ClientWithResponses) ParseV1UpdateAreaResponse(rsp *http.Response) (*V1UpdateAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1UpdateAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkArea
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1ListNetworkRangesOfAreaResponse parses an HTTP response from a V1ListNetworkRangesOfArea call
func (c *ClientWithResponses) ParseV1ListNetworkRangesOfAreaResponse(rsp *http.Response) (*V1ListNetworkRangesOfAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ListNetworkRangesOfAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkRangeListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1AddNetworkRangesToAreaResponse parses an HTTP response from a V1AddNetworkRangesToArea call
func (c *ClientWithResponses) ParseV1AddNetworkRangesToAreaResponse(rsp *http.Response) (*V1AddNetworkRangesToAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AddNetworkRangesToAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkRangeListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1DeleteNetworkRangeFromAreaResponse parses an HTTP response from a V1DeleteNetworkRangeFromArea call
func (c *ClientWithResponses) ParseV1DeleteNetworkRangeFromAreaResponse(rsp *http.Response) (*V1DeleteNetworkRangeFromAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1DeleteNetworkRangeFromAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1GetNetworkRangeOfAreaResponse parses an HTTP response from a V1GetNetworkRangeOfArea call
func (c *ClientWithResponses) ParseV1GetNetworkRangeOfAreaResponse(rsp *http.Response) (*V1GetNetworkRangeOfAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetNetworkRangeOfAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkRange
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1GetProjectsUsingAreaResponse parses an HTTP response from a V1GetProjectsUsingArea call
func (c *ClientWithResponses) ParseV1GetProjectsUsingAreaResponse(rsp *http.Response) (*V1GetProjectsUsingAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetProjectsUsingAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1ProjectListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1ListRoutesOfAreaResponse parses an HTTP response from a V1ListRoutesOfArea call
func (c *ClientWithResponses) ParseV1ListRoutesOfAreaResponse(rsp *http.Response) (*V1ListRoutesOfAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ListRoutesOfAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1RouteListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1AddRoutesToAreaResponse parses an HTTP response from a V1AddRoutesToArea call
func (c *ClientWithResponses) ParseV1AddRoutesToAreaResponse(rsp *http.Response) (*V1AddRoutesToAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1AddRoutesToAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest V1RouteListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1DeleteRouteFromAreaResponse parses an HTTP response from a V1DeleteRouteFromArea call
func (c *ClientWithResponses) ParseV1DeleteRouteFromAreaResponse(rsp *http.Response) (*V1DeleteRouteFromAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1DeleteRouteFromAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1GetRouteOfAreaResponse parses an HTTP response from a V1GetRouteOfArea call
func (c *ClientWithResponses) ParseV1GetRouteOfAreaResponse(rsp *http.Response) (*V1GetRouteOfAreaResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetRouteOfAreaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1Route
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}
