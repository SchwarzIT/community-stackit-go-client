// Package iaas provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.2 DO NOT EDIT.
package iaas

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// V1CIDR Classless Inter-Domain Routing (CIDR).
type V1CIDR = string

// V1Error Error with HTTP error code and an error message.
type V1Error struct {
	Code int    `json:"code"`
	Msg  string `json:"msg"`
}

// V1GenericName The name for a General Object. Matches Names and also UUIDs.
type V1GenericName = string

// V1IP An IP address.
type V1IP = string

// V1Nameserver List of DNS Servers/Nameservers.
type V1Nameserver = []V1IP

// V1Network Object represents a network.
type V1Network struct {
	Name string `json:"name"`

	// Nameservers List of DNS Servers/Nameservers.
	Nameservers *V1Nameserver `json:"nameservers,omitempty"`

	// NetworkId Universally Unique Identifier (UUID).
	NetworkID V1UUID   `json:"networkId"`
	Prefixes  []V1CIDR `json:"prefixes"`

	// PublicIp An IP address.
	PublicIp *V1IP `json:"publicIp,omitempty"`
}

// V1NetworkList List of Networks.
type V1NetworkList = []V1Network

// V1NetworkListResponse Network list response.
type V1NetworkListResponse struct {
	// Items List of Networks.
	Items V1NetworkList `json:"items"`
}

// V1OpenStackNetwork Representation of an OpenStack network.
type V1OpenStackNetwork struct {
	// Cidr Classless Inter-Domain Routing (CIDR).
	Cidr V1CIDR `json:"cidr"`

	// OpenstackNetworkID Universally Unique Identifier (UUID).
	OpenstackNetworkID V1UUID `json:"openstackNetworkID"`

	// OpenstackRouterID Universally Unique Identifier (UUID).
	OpenstackRouterID V1UUID `json:"openstackRouterID"`

	// OpenstackSubnetID Universally Unique Identifier (UUID).
	OpenstackSubnetID V1UUID `json:"openstackSubnetID"`
}

// V1ReqID ID representing a single API request.
type V1ReqID = string

// V1RequestResponse Request response.
type V1RequestResponse struct {
	// RequestId ID representing a single API request.
	RequestID V1ReqID `json:"requestId"`
}

// V1UUID Universally Unique Identifier (UUID).
type V1UUID = openapiTypes.UUID

// BadRequest Error with HTTP error code and an error message.
type BadRequest = V1Error

// Forbidden Error with HTTP error code and an error message.
type Forbidden = V1Error

// InternalServerError Error with HTTP error code and an error message.
type InternalServerError = V1Error

// NotFound Error with HTTP error code and an error message.
type NotFound = V1Error

// Unauthorized Error with HTTP error code and an error message.
type Unauthorized = V1Error

// V1CreateNetworkJSONBody defines parameters for V1CreateNetwork.
type V1CreateNetworkJSONBody struct {
	// Name The name for a General Object. Matches Names and also UUIDs.
	Name V1GenericName `json:"name"`

	// Nameservers List of DNS Servers/Nameservers.
	Nameservers    *V1Nameserver `json:"nameservers,omitempty"`
	PrefixLengthV4 *int          `json:"prefixLengthV4,omitempty"`
}

// V1UpdateNetworkJSONBody defines parameters for V1UpdateNetwork.
type V1UpdateNetworkJSONBody struct {
	// Name The name for a General Object. Matches Names and also UUIDs.
	Name *V1GenericName `json:"name,omitempty"`

	// Nameservers List of DNS Servers/Nameservers.
	Nameservers *V1Nameserver `json:"nameservers,omitempty"`
}

// V1CreateNetworkJSONRequestBody defines body for V1CreateNetwork for application/json ContentType.
type V1CreateNetworkJSONRequestBody V1CreateNetworkJSONBody

// V1UpdateNetworkJSONRequestBody defines body for V1UpdateNetwork for application/json ContentType.
type V1UpdateNetworkJSONRequestBody V1UpdateNetworkJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// V1ListNetworksInProject request
	V1ListNetworksInProjectRaw(ctx context.Context, projectId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1CreateNetwork request with any body
	V1CreateNetworkRawWithBody(ctx context.Context, projectId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1CreateNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, body V1CreateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1DeleteNetwork request
	V1DeleteNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetNetwork request
	V1GetNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1UpdateNetwork request with any body
	V1UpdateNetworkRawWithBody(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1UpdateNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, body V1UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetOpenStackNetworkDetails request
	V1GetOpenStackNetworkDetailsRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) V1ListNetworksInProjectRaw(ctx context.Context, projectId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListNetworksInProjectRequest(ctx, c.Server, projectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1CreateNetworkRawWithBody(ctx context.Context, projectId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1CreateNetworkRequestWithBody(ctx, c.Server, projectId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1CreateNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, body V1CreateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1CreateNetworkRequest(ctx, c.Server, projectId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1DeleteNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1DeleteNetworkRequest(ctx, c.Server, projectId, networkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetNetworkRequest(ctx, c.Server, projectId, networkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1UpdateNetworkRawWithBody(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1UpdateNetworkRequestWithBody(ctx, c.Server, projectId, networkId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1UpdateNetworkRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, body V1UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1UpdateNetworkRequest(ctx, c.Server, projectId, networkId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetOpenStackNetworkDetailsRaw(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetOpenStackNetworkDetailsRequest(ctx, c.Server, projectId, networkId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewV1ListNetworksInProjectRequest generates requests for V1ListNetworksInProject
func NewV1ListNetworksInProjectRequest(ctx context.Context, server string, projectId openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/projects/%s/networks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1CreateNetworkRequest calls the generic V1CreateNetwork builder with application/json body
func NewV1CreateNetworkRequest(ctx context.Context, server string, projectId openapiTypes.UUID, body V1CreateNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1CreateNetworkRequestWithBody(ctx, server, projectId, "application/json", bodyReader)
}

// NewV1CreateNetworkRequestWithBody generates requests for V1CreateNetwork with any type of body
func NewV1CreateNetworkRequestWithBody(ctx context.Context, server string, projectId openapiTypes.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/projects/%s/networks", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1DeleteNetworkRequest generates requests for V1DeleteNetwork
func NewV1DeleteNetworkRequest(ctx context.Context, server string, projectId openapiTypes.UUID, networkId openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "networkId", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/projects/%s/networks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1GetNetworkRequest generates requests for V1GetNetwork
func NewV1GetNetworkRequest(ctx context.Context, server string, projectId openapiTypes.UUID, networkId openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "networkId", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/projects/%s/networks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1UpdateNetworkRequest calls the generic V1UpdateNetwork builder with application/json body
func NewV1UpdateNetworkRequest(ctx context.Context, server string, projectId openapiTypes.UUID, networkId openapiTypes.UUID, body V1UpdateNetworkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1UpdateNetworkRequestWithBody(ctx, server, projectId, networkId, "application/json", bodyReader)
}

// NewV1UpdateNetworkRequestWithBody generates requests for V1UpdateNetwork with any type of body
func NewV1UpdateNetworkRequestWithBody(ctx context.Context, server string, projectId openapiTypes.UUID, networkId openapiTypes.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "networkId", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/projects/%s/networks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1GetOpenStackNetworkDetailsRequest generates requests for V1GetOpenStackNetworkDetails
func NewV1GetOpenStackNetworkDetailsRequest(ctx context.Context, server string, projectId openapiTypes.UUID, networkId openapiTypes.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "projectId", runtime.ParamLocationPath, projectId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "networkId", runtime.ParamLocationPath, networkId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1alpha1/projects/%s/openstack-networks/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// V1ListNetworksInProject request
	V1ListNetworksInProject(ctx context.Context, projectId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1ListNetworksInProjectResponse, error)

	// V1CreateNetwork request with any body
	V1CreateNetworkWithBody(ctx context.Context, projectId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1CreateNetworkResponse, error)

	V1CreateNetwork(ctx context.Context, projectId openapiTypes.UUID, body V1CreateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*V1CreateNetworkResponse, error)

	// V1DeleteNetwork request
	V1DeleteNetwork(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1DeleteNetworkResponse, error)

	// V1GetNetwork request
	V1GetNetwork(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1GetNetworkResponse, error)

	// V1UpdateNetwork request with any body
	V1UpdateNetworkWithBody(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1UpdateNetworkResponse, error)

	V1UpdateNetwork(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, body V1UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*V1UpdateNetworkResponse, error)

	// V1GetOpenStackNetworkDetails request
	V1GetOpenStackNetworkDetails(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1GetOpenStackNetworkDetailsResponse, error)
}

type V1ListNetworksInProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1NetworkListResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1ListNetworksInProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ListNetworksInProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1CreateNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *V1RequestResponse
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON409      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1CreateNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1CreateNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1DeleteNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON409      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1DeleteNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1DeleteNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1Network
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1GetNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1UpdateNetworkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1UpdateNetworkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1UpdateNetworkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetOpenStackNetworkDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1OpenStackNetwork
	JSON400      *V1Error
	JSON401      *V1Error
	JSON403      *V1Error
	JSON404      *V1Error
	JSON500      *V1Error
}

// Status returns HTTPResponse.Status
func (r V1GetOpenStackNetworkDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetOpenStackNetworkDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// V1ListNetworksInProject request returning *V1ListNetworksInProjectResponse
func (c *ClientWithResponses) V1ListNetworksInProject(ctx context.Context, projectId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1ListNetworksInProjectResponse, error) {
	rsp, err := c.V1ListNetworksInProjectRaw(ctx, projectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1ListNetworksInProjectResponse(rsp)
}

// V1CreateNetworkWithBody request with arbitrary body returning *V1CreateNetworkResponse
func (c *ClientWithResponses) V1CreateNetworkWithBody(ctx context.Context, projectId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1CreateNetworkResponse, error) {
	rsp, err := c.V1CreateNetworkRawWithBody(ctx, projectId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1CreateNetworkResponse(rsp)
}

func (c *ClientWithResponses) V1CreateNetwork(ctx context.Context, projectId openapiTypes.UUID, body V1CreateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*V1CreateNetworkResponse, error) {
	rsp, err := c.V1CreateNetworkRaw(ctx, projectId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1CreateNetworkResponse(rsp)
}

// V1DeleteNetwork request returning *V1DeleteNetworkResponse
func (c *ClientWithResponses) V1DeleteNetwork(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1DeleteNetworkResponse, error) {
	rsp, err := c.V1DeleteNetworkRaw(ctx, projectId, networkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1DeleteNetworkResponse(rsp)
}

// V1GetNetwork request returning *V1GetNetworkResponse
func (c *ClientWithResponses) V1GetNetwork(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1GetNetworkResponse, error) {
	rsp, err := c.V1GetNetworkRaw(ctx, projectId, networkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1GetNetworkResponse(rsp)
}

// V1UpdateNetworkWithBody request with arbitrary body returning *V1UpdateNetworkResponse
func (c *ClientWithResponses) V1UpdateNetworkWithBody(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1UpdateNetworkResponse, error) {
	rsp, err := c.V1UpdateNetworkRawWithBody(ctx, projectId, networkId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1UpdateNetworkResponse(rsp)
}

func (c *ClientWithResponses) V1UpdateNetwork(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, body V1UpdateNetworkJSONRequestBody, reqEditors ...RequestEditorFn) (*V1UpdateNetworkResponse, error) {
	rsp, err := c.V1UpdateNetworkRaw(ctx, projectId, networkId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1UpdateNetworkResponse(rsp)
}

// V1GetOpenStackNetworkDetails request returning *V1GetOpenStackNetworkDetailsResponse
func (c *ClientWithResponses) V1GetOpenStackNetworkDetails(ctx context.Context, projectId openapiTypes.UUID, networkId openapiTypes.UUID, reqEditors ...RequestEditorFn) (*V1GetOpenStackNetworkDetailsResponse, error) {
	rsp, err := c.V1GetOpenStackNetworkDetailsRaw(ctx, projectId, networkId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseV1GetOpenStackNetworkDetailsResponse(rsp)
}

// ParseV1ListNetworksInProjectResponse parses an HTTP response from a V1ListNetworksInProject call
func (c *ClientWithResponses) ParseV1ListNetworksInProjectResponse(rsp *http.Response) (*V1ListNetworksInProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ListNetworksInProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1NetworkListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1CreateNetworkResponse parses an HTTP response from a V1CreateNetwork call
func (c *ClientWithResponses) ParseV1CreateNetworkResponse(rsp *http.Response) (*V1CreateNetworkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1CreateNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest V1RequestResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1DeleteNetworkResponse parses an HTTP response from a V1DeleteNetwork call
func (c *ClientWithResponses) ParseV1DeleteNetworkResponse(rsp *http.Response) (*V1DeleteNetworkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1DeleteNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1GetNetworkResponse parses an HTTP response from a V1GetNetwork call
func (c *ClientWithResponses) ParseV1GetNetworkResponse(rsp *http.Response) (*V1GetNetworkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1Network
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1UpdateNetworkResponse parses an HTTP response from a V1UpdateNetwork call
func (c *ClientWithResponses) ParseV1UpdateNetworkResponse(rsp *http.Response) (*V1UpdateNetworkResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1UpdateNetworkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseV1GetOpenStackNetworkDetailsResponse parses an HTTP response from a V1GetOpenStackNetworkDetails call
func (c *ClientWithResponses) ParseV1GetOpenStackNetworkDetailsResponse(rsp *http.Response) (*V1GetOpenStackNetworkDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetOpenStackNetworkDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1OpenStackNetwork
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest V1Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON500 = &dest

	}

	return response, validate.ResponseObject(response)
}
