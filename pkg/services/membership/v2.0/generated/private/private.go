// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/oapi-codegen version v0.5.1 DO NOT EDIT.
package private

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/pkg/errors"

	common "github.com/SchwarzIT/community-stackit-go-client/internal/common"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
	"github.com/do87/oapi-codegen/pkg/runtime"
)

// Defines values for PermissionWithInheritanceInheritance.
const (
	FULL   PermissionWithInheritanceInheritance = "FULL"
	NONE   PermissionWithInheritanceInheritance = "NONE"
	SINGLE PermissionWithInheritanceInheritance = "SINGLE"
)

// Defines values for SubjectType.
const (
	CLIENT          SubjectType = "client"
	SERVICE_ACCOUNT SubjectType = "service-account"
	USER            SubjectType = "user"
)

// AddDefaultRolesRequest defines model for AddDefaultRolesRequest.
type AddDefaultRolesRequest struct {
	Roles []AddRoleRequest `json:"roles"`
}

// AddPermissionsRequest defines model for AddPermissionsRequest.
type AddPermissionsRequest struct {
	Permissions []PermissionWithInheritance `json:"permissions"`
}

// AddRoleRequest defines model for AddRoleRequest.
type AddRoleRequest struct {
	Description string              `json:"description"`
	Name        string              `json:"name"`
	Permissions []PermissionRequest `json:"permissions"`
}

// ChildMembersPayload defines model for ChildMembersPayload.
type ChildMembersPayload struct {
	ChildResourceType string   `json:"childResourceType"`
	Members           []Member `json:"members"`
	ResourceType      string   `json:"resourceType"`
}

// Condition defines model for Condition.
type Condition struct {
	ExpiresAt time.Time `json:"expiresAt"`
}

// DefaultRolesResponse defines model for DefaultRolesResponse.
type DefaultRolesResponse struct {
	Roles []Role `json:"roles"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     string    `json:"error"`
	Message   string    `json:"message"`
	Path      string    `json:"path"`
	Status    int       `json:"status"`
	TimeStamp time.Time `json:"timeStamp"`
}

// Member defines model for Member.
type Member struct {
	Condition *Condition `json:"condition,omitempty"`
	Role      string     `json:"role"`
	Subject   string     `json:"subject"`
}

// MembersPayload defines model for MembersPayload.
type MembersPayload struct {
	Members      []Member `json:"members"`
	ResourceType string   `json:"resourceType"`
}

// MembersResponse defines model for MembersResponse.
type MembersResponse struct {
	Members      []Member `json:"members"`
	ResourceID   string   `json:"resourceId"`
	ResourceType string   `json:"resourceType"`
}

// Permission defines model for Permission.
type Permission struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// PermissionRequest defines model for PermissionRequest.
type PermissionRequest struct {
	Name string `json:"name"`
}

// PermissionWithInheritance defines model for PermissionWithInheritance.
type PermissionWithInheritance struct {
	Description string                               `json:"description"`
	Inheritance PermissionWithInheritanceInheritance `json:"inheritance"`
	Name        string                               `json:"name"`
}

// PermissionWithInheritanceInheritance defines model for PermissionWithInheritance.Inheritance.
type PermissionWithInheritanceInheritance string

// PermissionsResponse defines model for PermissionsResponse.
type PermissionsResponse struct {
	Permissions []PermissionWithInheritance `json:"permissions"`
}

// RemoveDefaultRolesRequest defines model for RemoveDefaultRolesRequest.
type RemoveDefaultRolesRequest struct {
	Roles []RemoveRoleRequest `json:"roles"`
}

// RemovePermissionsRequest defines model for RemovePermissionsRequest.
type RemovePermissionsRequest struct {
	Permissions []PermissionRequest `json:"permissions"`
}

// RemoveRoleRequest defines model for RemoveRoleRequest.
type RemoveRoleRequest struct {
	Name string `json:"name"`
}

// Role defines model for Role.
type Role struct {
	Description string       `json:"description"`
	Name        string       `json:"name"`
	Permissions []Permission `json:"permissions"`
}

// Subject defines model for Subject.
type Subject struct {
	Email string      `json:"email"`
	ID    string      `json:"id"`
	Type  SubjectType `json:"type"`
}

// SubjectType defines model for Subject.Type.
type SubjectType string

// SubjectsResponse defines model for SubjectsResponse.
type SubjectsResponse struct {
	Items []Subject `json:"items"`
}

// GetSubjectsParams defines parameters for GetSubjects.
type GetSubjectsParams struct {
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// AddPermissionsJSONRequestBody defines body for AddPermissions for application/json ContentType.
type AddPermissionsJSONRequestBody = AddPermissionsRequest

// RemovePermissionsJSONRequestBody defines body for RemovePermissions for application/json ContentType.
type RemovePermissionsJSONRequestBody = RemovePermissionsRequest

// AddDefaultRolesJSONRequestBody defines body for AddDefaultRoles for application/json ContentType.
type AddDefaultRolesJSONRequestBody = AddDefaultRolesRequest

// RemoveDefaultRolesJSONRequestBody defines body for RemoveDefaultRoles for application/json ContentType.
type RemoveDefaultRolesJSONRequestBody = RemoveDefaultRolesRequest

// ValidateChildMembersJSONRequestBody defines body for ValidateChildMembers for application/json ContentType.
type ValidateChildMembersJSONRequestBody = ChildMembersPayload

// ReplaceMembersJSONRequestBody defines body for ReplaceMembers for application/json ContentType.
type ReplaceMembersJSONRequestBody = MembersPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client common.Client
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, httpClient common.Client) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddPermissions request with any body
	AddPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPermissions(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovePermissions request with any body
	RemovePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemovePermissions(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultRoles request
	GetDefaultRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDefaultRoles request with any body
	AddDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDefaultRoles(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveDefaultRoles request with any body
	RemoveDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveDefaultRoles(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubjects request
	GetSubjects(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateChildMembers request with any body
	ValidateChildMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateChildMembers(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceMembers request with any body
	ReplaceMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceMembers(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPermissionsRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPermissions(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPermissionsRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovePermissionsRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePermissions(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovePermissionsRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultRolesRequest(ctx, c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultRolesRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultRoles(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultRolesRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDefaultRolesRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDefaultRoles(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDefaultRolesRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubjects(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubjectsRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateChildMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateChildMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateChildMembers(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateChildMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceMembers(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddPermissionsRequest calls the generic AddPermissions builder with application/json body
func NewAddPermissionsRequest(ctx context.Context, server string, body AddPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPermissionsRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewAddPermissionsRequestWithBody generates requests for AddPermissions with any type of body
func NewAddPermissionsRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemovePermissionsRequest calls the generic RemovePermissions builder with application/json body
func NewRemovePermissionsRequest(ctx context.Context, server string, body RemovePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemovePermissionsRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewRemovePermissionsRequestWithBody generates requests for RemovePermissions with any type of body
func NewRemovePermissionsRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/permissions/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultRolesRequest generates requests for GetDefaultRoles
func NewGetDefaultRolesRequest(ctx context.Context, server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddDefaultRolesRequest calls the generic AddDefaultRoles builder with application/json body
func NewAddDefaultRolesRequest(ctx context.Context, server string, body AddDefaultRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDefaultRolesRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewAddDefaultRolesRequestWithBody generates requests for AddDefaultRoles with any type of body
func NewAddDefaultRolesRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveDefaultRolesRequest calls the generic RemoveDefaultRoles builder with application/json body
func NewRemoveDefaultRolesRequest(ctx context.Context, server string, body RemoveDefaultRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveDefaultRolesRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewRemoveDefaultRolesRequestWithBody generates requests for RemoveDefaultRoles with any type of body
func NewRemoveDefaultRolesRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/roles/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubjectsRequest generates requests for GetSubjects
func NewGetSubjectsRequest(ctx context.Context, server string, params *GetSubjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/subjects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateChildMembersRequest calls the generic ValidateChildMembers builder with application/json body
func NewValidateChildMembersRequest(ctx context.Context, server string, resourceID string, body ValidateChildMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateChildMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewValidateChildMembersRequestWithBody generates requests for ValidateChildMembers with any type of body
func NewValidateChildMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/child/members/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceMembersRequest calls the generic ReplaceMembers builder with application/json body
func NewReplaceMembersRequest(ctx context.Context, server string, resourceID string, body ReplaceMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewReplaceMembersRequestWithBody generates requests for ReplaceMembers with any type of body
func NewReplaceMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, httpClient common.Client) *ClientWithResponses {
	return &ClientWithResponses{NewClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddPermissions request with any body
	AddPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error)

	AddPermissionsWithResponse(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error)

	// RemovePermissions request with any body
	RemovePermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error)

	RemovePermissionsWithResponse(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error)

	// GetDefaultRoles request
	GetDefaultRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultRolesResponse, error)

	// AddDefaultRoles request with any body
	AddDefaultRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error)

	AddDefaultRolesWithResponse(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error)

	// RemoveDefaultRoles request with any body
	RemoveDefaultRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error)

	RemoveDefaultRolesWithResponse(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error)

	// GetSubjects request
	GetSubjectsWithResponse(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*GetSubjectsResponse, error)

	// ValidateChildMembers request with any body
	ValidateChildMembersWithBodyWithResponse(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error)

	ValidateChildMembersWithResponse(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error)

	// ReplaceMembers request with any body
	ReplaceMembersWithBodyWithResponse(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error)

	ReplaceMembersWithResponse(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error)
}

type AddPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r AddPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RemovePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultRolesResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetDefaultRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDefaultRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultRolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r AddDefaultRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDefaultRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveDefaultRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultRolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RemoveDefaultRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveDefaultRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubjectsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetSubjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateChildMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ValidateChildMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateChildMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembersResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ReplaceMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddPermissionsWithBodyWithResponse request with arbitrary body returning *AddPermissionsResponse
func (c *ClientWithResponses) AddPermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error) {
	rsp, err := c.AddPermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddPermissionsResponse(rsp)
}

func (c *ClientWithResponses) AddPermissionsWithResponse(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error) {
	rsp, err := c.AddPermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddPermissionsResponse(rsp)
}

// RemovePermissionsWithBodyWithResponse request with arbitrary body returning *RemovePermissionsResponse
func (c *ClientWithResponses) RemovePermissionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error) {
	rsp, err := c.RemovePermissionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemovePermissionsResponse(rsp)
}

func (c *ClientWithResponses) RemovePermissionsWithResponse(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error) {
	rsp, err := c.RemovePermissions(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemovePermissionsResponse(rsp)
}

// GetDefaultRolesWithResponse request returning *GetDefaultRolesResponse
func (c *ClientWithResponses) GetDefaultRolesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultRolesResponse, error) {
	rsp, err := c.GetDefaultRoles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetDefaultRolesResponse(rsp)
}

// AddDefaultRolesWithBodyWithResponse request with arbitrary body returning *AddDefaultRolesResponse
func (c *ClientWithResponses) AddDefaultRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error) {
	rsp, err := c.AddDefaultRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddDefaultRolesResponse(rsp)
}

func (c *ClientWithResponses) AddDefaultRolesWithResponse(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error) {
	rsp, err := c.AddDefaultRoles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddDefaultRolesResponse(rsp)
}

// RemoveDefaultRolesWithBodyWithResponse request with arbitrary body returning *RemoveDefaultRolesResponse
func (c *ClientWithResponses) RemoveDefaultRolesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error) {
	rsp, err := c.RemoveDefaultRolesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveDefaultRolesResponse(rsp)
}

func (c *ClientWithResponses) RemoveDefaultRolesWithResponse(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error) {
	rsp, err := c.RemoveDefaultRoles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveDefaultRolesResponse(rsp)
}

// GetSubjectsWithResponse request returning *GetSubjectsResponse
func (c *ClientWithResponses) GetSubjectsWithResponse(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*GetSubjectsResponse, error) {
	rsp, err := c.GetSubjects(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetSubjectsResponse(rsp)
}

// ValidateChildMembersWithBodyWithResponse request with arbitrary body returning *ValidateChildMembersResponse
func (c *ClientWithResponses) ValidateChildMembersWithBodyWithResponse(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error) {
	rsp, err := c.ValidateChildMembersWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseValidateChildMembersResponse(rsp)
}

func (c *ClientWithResponses) ValidateChildMembersWithResponse(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error) {
	rsp, err := c.ValidateChildMembers(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseValidateChildMembersResponse(rsp)
}

// ReplaceMembersWithBodyWithResponse request with arbitrary body returning *ReplaceMembersResponse
func (c *ClientWithResponses) ReplaceMembersWithBodyWithResponse(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error) {
	rsp, err := c.ReplaceMembersWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseReplaceMembersResponse(rsp)
}

func (c *ClientWithResponses) ReplaceMembersWithResponse(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error) {
	rsp, err := c.ReplaceMembers(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseReplaceMembersResponse(rsp)
}

// ParseAddPermissionsResponse parses an HTTP response from a AddPermissionsWithResponse call
func (c *ClientWithResponses) ParseAddPermissionsResponse(rsp *http.Response) (*AddPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemovePermissionsResponse parses an HTTP response from a RemovePermissionsWithResponse call
func (c *ClientWithResponses) ParseRemovePermissionsResponse(rsp *http.Response) (*RemovePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetDefaultRolesResponse parses an HTTP response from a GetDefaultRolesWithResponse call
func (c *ClientWithResponses) ParseGetDefaultRolesResponse(rsp *http.Response) (*GetDefaultRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseAddDefaultRolesResponse parses an HTTP response from a AddDefaultRolesWithResponse call
func (c *ClientWithResponses) ParseAddDefaultRolesResponse(rsp *http.Response) (*AddDefaultRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDefaultRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseRemoveDefaultRolesResponse parses an HTTP response from a RemoveDefaultRolesWithResponse call
func (c *ClientWithResponses) ParseRemoveDefaultRolesResponse(rsp *http.Response) (*RemoveDefaultRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveDefaultRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseGetSubjectsResponse parses an HTTP response from a GetSubjectsWithResponse call
func (c *ClientWithResponses) ParseGetSubjectsResponse(rsp *http.Response) (*GetSubjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseValidateChildMembersResponse parses an HTTP response from a ValidateChildMembersWithResponse call
func (c *ClientWithResponses) ParseValidateChildMembersResponse(rsp *http.Response) (*ValidateChildMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateChildMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}

// ParseReplaceMembersResponse parses an HTTP response from a ReplaceMembersWithResponse call
func (c *ClientWithResponses) ParseReplaceMembersResponse(rsp *http.Response) (*ReplaceMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, nil
}
