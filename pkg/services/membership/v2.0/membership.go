// Package membership provides primitives to interact with the openapi HTTP API.
//
// Code generated by dev.azure.com/schwarzit/schwarzit.odj.core/_git/stackit-client-generator.git version v1.0.23 DO NOT EDIT.
package membership

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/pkg/errors"

	"github.com/SchwarzIT/community-stackit-go-client/internal/helpers/runtime"
	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// Defines values for PermissionWithInheritanceInheritance.
const (
	FULL   PermissionWithInheritanceInheritance = "FULL"
	NONE   PermissionWithInheritanceInheritance = "NONE"
	SINGLE PermissionWithInheritanceInheritance = "SINGLE"
)

// Defines values for SubjectType.
const (
	CLIENT          SubjectType = "client"
	SERVICE_ACCOUNT SubjectType = "service-account"
	USER            SubjectType = "user"
)

// AddDefaultRolesRequest defines model for AddDefaultRolesRequest.
type AddDefaultRolesRequest struct {
	Roles []AddRoleRequest `json:"roles"`
}

// AddPermissionsRequest defines model for AddPermissionsRequest.
type AddPermissionsRequest struct {
	Permissions []PermissionWithInheritance `json:"permissions"`
}

// AddRoleRequest defines model for AddRoleRequest.
type AddRoleRequest struct {
	Description string              `json:"description"`
	Name        string              `json:"name"`
	Permissions []PermissionRequest `json:"permissions"`
}

// AddRolesPayload defines model for AddRolesPayload.
type AddRolesPayload struct {
	ResourceType string           `json:"resourceType"`
	Roles        []AddRoleRequest `json:"roles"`
}

// ChildMembersPayload defines model for ChildMembersPayload.
type ChildMembersPayload struct {
	ChildResourceType string   `json:"childResourceType"`
	Members           []Member `json:"members"`
	ResourceType      string   `json:"resourceType"`
}

// Condition defines model for Condition.
type Condition struct {
	ExpiresAt time.Time `json:"expiresAt"`
}

// DefaultRolesResponse defines model for DefaultRolesResponse.
type DefaultRolesResponse struct {
	Roles []Role `json:"roles"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     string    `json:"error"`
	Message   string    `json:"message"`
	Path      string    `json:"path"`
	Status    int       `json:"status"`
	TimeStamp time.Time `json:"timeStamp"`
}

// Member defines model for Member.
type Member struct {
	Condition *Condition `json:"condition,omitempty"`
	Role      string     `json:"role"`
	Subject   string     `json:"subject"`
}

// MemberWithoutCondition defines model for MemberWithoutCondition.
type MemberWithoutCondition struct {
	Role    string `json:"role"`
	Subject string `json:"subject"`
}

// MembersPayload defines model for MembersPayload.
type MembersPayload struct {
	Members      []Member `json:"members"`
	ResourceType string   `json:"resourceType"`
}

// MembersResponse defines model for MembersResponse.
type MembersResponse struct {
	Members      []Member `json:"members"`
	ResourceID   string   `json:"resourceId"`
	ResourceType string   `json:"resourceType"`
}

// MembersWithoutConditionPayload defines model for MembersWithoutConditionPayload.
type MembersWithoutConditionPayload struct {
	Members      []MemberWithoutCondition `json:"members"`
	ResourceType string                   `json:"resourceType"`
}

// Permission defines model for Permission.
type Permission struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// PermissionReason defines model for PermissionReason.
type PermissionReason struct {
	Condition *Condition `json:"condition,omitempty"`
	Role      string     `json:"role"`
	Subject   string     `json:"subject"`
}

// PermissionRequest defines model for PermissionRequest.
type PermissionRequest struct {
	Name string `json:"name"`
}

// PermissionWithInheritance defines model for PermissionWithInheritance.
type PermissionWithInheritance struct {
	Description string                               `json:"description"`
	Inheritance PermissionWithInheritanceInheritance `json:"inheritance"`
	Name        string                               `json:"name"`
}

// PermissionWithInheritanceInheritance defines model for PermissionWithInheritance.Inheritance.
type PermissionWithInheritanceInheritance string

// PermissionWithReason defines model for PermissionWithReason.
type PermissionWithReason struct {
	Description string             `json:"description"`
	Memberships []PermissionReason `json:"memberships"`
	Name        string             `json:"name"`
}

// PermissionsResponse defines model for PermissionsResponse.
type PermissionsResponse struct {
	Permissions []PermissionWithInheritance `json:"permissions"`
}

// RemoveDefaultRolesRequest defines model for RemoveDefaultRolesRequest.
type RemoveDefaultRolesRequest struct {
	Roles []RemoveRoleRequest `json:"roles"`
}

// RemovePermissionsRequest defines model for RemovePermissionsRequest.
type RemovePermissionsRequest struct {
	Permissions []PermissionRequest `json:"permissions"`
}

// RemoveRoleRequest defines model for RemoveRoleRequest.
type RemoveRoleRequest struct {
	Name string `json:"name"`
}

// RemoveRolesPayload defines model for RemoveRolesPayload.
type RemoveRolesPayload struct {
	ResourceType string              `json:"resourceType"`
	Roles        []RemoveRoleRequest `json:"roles"`
}

// Resource defines model for Resource.
type Resource struct {
	ResourceAlias *string `json:"resourceAlias,omitempty"`
	ResourceID    string  `json:"resourceId"`
	ResourceType  string  `json:"resourceType"`
}

// Role defines model for Role.
type Role struct {
	Description string       `json:"description"`
	Name        string       `json:"name"`
	Permissions []Permission `json:"permissions"`
}

// RolesResponse defines model for RolesResponse.
type RolesResponse struct {
	ResourceID   string `json:"resourceId"`
	ResourceType string `json:"resourceType"`
	Roles        []Role `json:"roles"`
}

// Subject defines model for Subject.
type Subject struct {
	Email string      `json:"email"`
	ID    string      `json:"id"`
	Type  SubjectType `json:"type"`
}

// SubjectType defines model for Subject.Type.
type SubjectType string

// SubjectsResponse defines model for SubjectsResponse.
type SubjectsResponse struct {
	Items []Subject `json:"items"`
}

// UserMembership defines model for UserMembership.
type UserMembership struct {
	Condition    *Condition `json:"condition,omitempty"`
	ResourceID   string     `json:"resourceId"`
	ResourceType string     `json:"resourceType"`
	Role         string     `json:"role"`
	Subject      string     `json:"subject"`
}

// UserMembershipsResponse defines model for UserMembershipsResponse.
type UserMembershipsResponse struct {
	Items []UserMembership `json:"items"`
}

// UserPermission defines model for UserPermission.
type UserPermission struct {
	Permissions  []PermissionWithReason `json:"permissions"`
	ResourceID   string                 `json:"resourceId"`
	ResourceType string                 `json:"resourceType"`
}

// UserPermissionsResponse defines model for UserPermissionsResponse.
type UserPermissionsResponse struct {
	Items []UserPermission `json:"items"`
}

// UserResourcesResponse defines model for UserResourcesResponse.
type UserResourcesResponse struct {
	Cursor string     `json:"cursor"`
	Items  []Resource `json:"items"`
	Limit  int32      `json:"limit"`
}

// GetPermissionsParams defines parameters for GetPermissions.
type GetPermissionsParams struct {
	ResourceType *string `form:"resourceType,omitempty" json:"resourceType,omitempty"`
}

// GetSubjectsParams defines parameters for GetSubjects.
type GetSubjectsParams struct {
	Email *string `form:"email,omitempty" json:"email,omitempty"`
}

// GetUserMembershipsParams defines parameters for GetUserMemberships.
type GetUserMembershipsParams struct {
	ResourceType     *string `form:"resourceType,omitempty" json:"resourceType,omitempty"`
	ResourceID       *string `form:"resourceID,omitempty" json:"resourceID,omitempty"`
	ParentResourceID *string `form:"parentResourceID,omitempty" json:"parentResourceID,omitempty"`
}

// GetUserPermissionsParams defines parameters for GetUserPermissions.
type GetUserPermissionsParams struct {
	ShowReason   *bool     `form:"showReason,omitempty" json:"showReason,omitempty"`
	ResourceType *string   `form:"resourceType,omitempty" json:"resourceType,omitempty"`
	Permissions  *[]string `form:"permissions,omitempty" json:"permissions,omitempty"`
	Resource     *string   `form:"resource,omitempty" json:"resource,omitempty"`
}

// GetUserResourcesParams defines parameters for GetUserResources.
type GetUserResourcesParams struct {
	ParentResourceID   *string   `form:"parentResourceID,omitempty" json:"parentResourceID,omitempty"`
	ParentResourceType *string   `form:"parentResourceType,omitempty" json:"parentResourceType,omitempty"`
	ResourceType       *string   `form:"resourceType,omitempty" json:"resourceType,omitempty"`
	Recursive          *bool     `form:"recursive,omitempty" json:"recursive,omitempty"`
	Permissions        *[]string `form:"permissions,omitempty" json:"permissions,omitempty"`
	Cursor             *string   `form:"cursor,omitempty" json:"cursor,omitempty"`
	Limit              *int32    `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMembersParams defines parameters for GetMembers.
type GetMembersParams struct {
	Subject *string `form:"subject,omitempty" json:"subject,omitempty"`
}

// AddPermissionsJSONRequestBody defines body for AddPermissions for application/json ContentType.
type AddPermissionsJSONRequestBody = AddPermissionsRequest

// RemovePermissionsJSONRequestBody defines body for RemovePermissions for application/json ContentType.
type RemovePermissionsJSONRequestBody = RemovePermissionsRequest

// AddDefaultRolesJSONRequestBody defines body for AddDefaultRoles for application/json ContentType.
type AddDefaultRolesJSONRequestBody = AddDefaultRolesRequest

// RemoveDefaultRolesJSONRequestBody defines body for RemoveDefaultRoles for application/json ContentType.
type RemoveDefaultRolesJSONRequestBody = RemoveDefaultRolesRequest

// ValidateChildMembersJSONRequestBody defines body for ValidateChildMembers for application/json ContentType.
type ValidateChildMembersJSONRequestBody = ChildMembersPayload

// AddMembersJSONRequestBody defines body for AddMembers for application/json ContentType.
type AddMembersJSONRequestBody = MembersPayload

// ReplaceMembersJSONRequestBody defines body for ReplaceMembers for application/json ContentType.
type ReplaceMembersJSONRequestBody = MembersPayload

// RemoveMembersJSONRequestBody defines body for RemoveMembers for application/json ContentType.
type RemoveMembersJSONRequestBody = MembersWithoutConditionPayload

// ValidateMembersJSONRequestBody defines body for ValidateMembers for application/json ContentType.
type ValidateMembersJSONRequestBody = MembersPayload

// AddRolesJSONRequestBody defines body for AddRoles for application/json ContentType.
type AddRolesJSONRequestBody = AddRolesPayload

// RemoveRolesJSONRequestBody defines body for RemoveRoles for application/json ContentType.
type RemoveRolesJSONRequestBody = RemoveRolesPayload

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface
}

// NewRawClient Creates a new Client, with reasonable defaults
func NewRawClient(server string, httpClient contracts.BaseClientInterface) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type rawClientInterface interface {
	// GetPermissions request
	GetPermissionsRaw(ctx context.Context, params *GetPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddPermissions request with any body
	AddPermissionsRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPermissionsRaw(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemovePermissions request with any body
	RemovePermissionsRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemovePermissionsRaw(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultRoles request
	GetDefaultRolesRaw(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddDefaultRoles request with any body
	AddDefaultRolesRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddDefaultRolesRaw(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveDefaultRoles request with any body
	RemoveDefaultRolesRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveDefaultRolesRaw(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubjects request
	GetSubjectsRaw(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserMemberships request
	GetUserMembershipsRaw(ctx context.Context, email string, params *GetUserMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserPermissions request
	GetUserPermissionsRaw(ctx context.Context, email string, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserResources request
	GetUserResourcesRaw(ctx context.Context, email string, params *GetUserResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateChildMembers request with any body
	ValidateChildMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateChildMembersRaw(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddMembers request with any body
	AddMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddMembersRaw(ctx context.Context, resourceID string, body AddMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceMembers request with any body
	ReplaceMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceMembersRaw(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveMembers request with any body
	RemoveMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveMembersRaw(ctx context.Context, resourceID string, body RemoveMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ValidateMembers request with any body
	ValidateMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ValidateMembersRaw(ctx context.Context, resourceID string, body ValidateMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddRoles request with any body
	AddRolesRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddRolesRaw(ctx context.Context, resourceID string, body AddRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveRoles request with any body
	RemoveRolesRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveRolesRaw(ctx context.Context, resourceID string, body RemoveRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMembers request
	GetMembersRaw(ctx context.Context, resourceType string, resourceID string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRoles request
	GetRolesRaw(ctx context.Context, resourceType string, resourceID string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPermissionsRaw(ctx context.Context, params *GetPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPermissionsRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPermissionsRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPermissionsRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPermissionsRaw(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPermissionsRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePermissionsRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovePermissionsRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemovePermissionsRaw(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemovePermissionsRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultRolesRaw(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultRolesRequest(ctx, c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultRolesRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultRolesRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddDefaultRolesRaw(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddDefaultRolesRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDefaultRolesRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDefaultRolesRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveDefaultRolesRaw(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveDefaultRolesRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubjectsRaw(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubjectsRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserMembershipsRaw(ctx context.Context, email string, params *GetUserMembershipsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserMembershipsRequest(ctx, c.Server, email, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserPermissionsRaw(ctx context.Context, email string, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserPermissionsRequest(ctx, c.Server, email, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserResourcesRaw(ctx context.Context, email string, params *GetUserResourcesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserResourcesRequest(ctx, c.Server, email, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateChildMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateChildMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateChildMembersRaw(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateChildMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddMembersRaw(ctx context.Context, resourceID string, body AddMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceMembersRaw(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveMembersRaw(ctx context.Context, resourceID string, body RemoveMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateMembersRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateMembersRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ValidateMembersRaw(ctx context.Context, resourceID string, body ValidateMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewValidateMembersRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolesRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolesRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddRolesRaw(ctx context.Context, resourceID string, body AddRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddRolesRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolesRawWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolesRequestWithBody(ctx, c.Server, resourceID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveRolesRaw(ctx context.Context, resourceID string, body RemoveRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveRolesRequest(ctx, c.Server, resourceID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMembersRaw(ctx context.Context, resourceType string, resourceID string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMembersRequest(ctx, c.Server, resourceType, resourceID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRolesRaw(ctx context.Context, resourceType string, resourceID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRolesRequest(ctx, c.Server, resourceType, resourceID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPermissionsRequest generates requests for GetPermissions
func NewGetPermissionsRequest(ctx context.Context, server string, params *GetPermissionsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddPermissionsRequest calls the generic AddPermissions builder with application/json body
func NewAddPermissionsRequest(ctx context.Context, server string, body AddPermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPermissionsRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewAddPermissionsRequestWithBody generates requests for AddPermissions with any type of body
func NewAddPermissionsRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/permissions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemovePermissionsRequest calls the generic RemovePermissions builder with application/json body
func NewRemovePermissionsRequest(ctx context.Context, server string, body RemovePermissionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemovePermissionsRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewRemovePermissionsRequestWithBody generates requests for RemovePermissions with any type of body
func NewRemovePermissionsRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/permissions/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultRolesRequest generates requests for GetDefaultRoles
func NewGetDefaultRolesRequest(ctx context.Context, server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddDefaultRolesRequest calls the generic AddDefaultRoles builder with application/json body
func NewAddDefaultRolesRequest(ctx context.Context, server string, body AddDefaultRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddDefaultRolesRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewAddDefaultRolesRequestWithBody generates requests for AddDefaultRoles with any type of body
func NewAddDefaultRolesRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/roles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveDefaultRolesRequest calls the generic RemoveDefaultRoles builder with application/json body
func NewRemoveDefaultRolesRequest(ctx context.Context, server string, body RemoveDefaultRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveDefaultRolesRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewRemoveDefaultRolesRequestWithBody generates requests for RemoveDefaultRoles with any type of body
func NewRemoveDefaultRolesRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/roles/remove")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSubjectsRequest generates requests for GetSubjects
func NewGetSubjectsRequest(ctx context.Context, server string, params *GetSubjectsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/subjects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Email != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "email", runtime.ParamLocationQuery, *params.Email); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserMembershipsRequest generates requests for GetUserMemberships
func NewGetUserMembershipsRequest(ctx context.Context, server string, email string, params *GetUserMembershipsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s/memberships", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResourceID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceID", runtime.ParamLocationQuery, *params.ResourceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentResourceID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentResourceID", runtime.ParamLocationQuery, *params.ParentResourceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserPermissionsRequest generates requests for GetUserPermissions
func NewGetUserPermissionsRequest(ctx context.Context, server string, email string, params *GetUserPermissionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s/permissions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ShowReason != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "showReason", runtime.ParamLocationQuery, *params.ShowReason); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Permissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissions", runtime.ParamLocationQuery, *params.Permissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Resource != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource", runtime.ParamLocationQuery, *params.Resource); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserResourcesRequest generates requests for GetUserResources
func NewGetUserResourcesRequest(ctx context.Context, server string, email string, params *GetUserResourcesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "email", runtime.ParamLocationPath, email)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/users/%s/resources", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ParentResourceID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentResourceID", runtime.ParamLocationQuery, *params.ParentResourceID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "parentResourceType", runtime.ParamLocationQuery, *params.ParentResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ResourceType != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resourceType", runtime.ParamLocationQuery, *params.ResourceType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Permissions != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "permissions", runtime.ParamLocationQuery, *params.Permissions); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewValidateChildMembersRequest calls the generic ValidateChildMembers builder with application/json body
func NewValidateChildMembersRequest(ctx context.Context, server string, resourceID string, body ValidateChildMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateChildMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewValidateChildMembersRequestWithBody generates requests for ValidateChildMembers with any type of body
func NewValidateChildMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/child/members/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddMembersRequest calls the generic AddMembers builder with application/json body
func NewAddMembersRequest(ctx context.Context, server string, resourceID string, body AddMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewAddMembersRequestWithBody generates requests for AddMembers with any type of body
func NewAddMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReplaceMembersRequest calls the generic ReplaceMembers builder with application/json body
func NewReplaceMembersRequest(ctx context.Context, server string, resourceID string, body ReplaceMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewReplaceMembersRequestWithBody generates requests for ReplaceMembers with any type of body
func NewReplaceMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveMembersRequest calls the generic RemoveMembers builder with application/json body
func NewRemoveMembersRequest(ctx context.Context, server string, resourceID string, body RemoveMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewRemoveMembersRequestWithBody generates requests for RemoveMembers with any type of body
func NewRemoveMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/members/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewValidateMembersRequest calls the generic ValidateMembers builder with application/json body
func NewValidateMembersRequest(ctx context.Context, server string, resourceID string, body ValidateMembersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewValidateMembersRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewValidateMembersRequestWithBody generates requests for ValidateMembers with any type of body
func NewValidateMembersRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/members/validate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAddRolesRequest calls the generic AddRoles builder with application/json body
func NewAddRolesRequest(ctx context.Context, server string, resourceID string, body AddRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddRolesRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewAddRolesRequestWithBody generates requests for AddRoles with any type of body
func NewAddRolesRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/roles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveRolesRequest calls the generic RemoveRoles builder with application/json body
func NewRemoveRolesRequest(ctx context.Context, server string, resourceID string, body RemoveRolesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveRolesRequestWithBody(ctx, server, resourceID, "application/json", bodyReader)
}

// NewRemoveRolesRequestWithBody generates requests for RemoveRoles with any type of body
func NewRemoveRolesRequestWithBody(ctx context.Context, server string, resourceID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/roles/remove", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMembersRequest generates requests for GetMembers
func NewGetMembersRequest(ctx context.Context, server string, resourceType string, resourceID string, params *GetMembersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/members", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Subject != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "subject", runtime.ParamLocationQuery, *params.Subject); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRolesRequest generates requests for GetRoles
func NewGetRolesRequest(ctx context.Context, server string, resourceType string, resourceID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, resourceID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/%s/%s/roles", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on rawClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, httpClient contracts.BaseClientInterface) *ClientWithResponses {
	return &ClientWithResponses{NewRawClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPermissions request
	GetPermissions(ctx context.Context, params *GetPermissionsParams, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error)

	// AddPermissions request with any body
	AddPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error)

	AddPermissions(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error)

	// RemovePermissions request with any body
	RemovePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error)

	RemovePermissions(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error)

	// GetDefaultRoles request
	GetDefaultRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultRolesResponse, error)

	// AddDefaultRoles request with any body
	AddDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error)

	AddDefaultRoles(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error)

	// RemoveDefaultRoles request with any body
	RemoveDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error)

	RemoveDefaultRoles(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error)

	// GetSubjects request
	GetSubjects(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*GetSubjectsResponse, error)

	// GetUserMemberships request
	GetUserMemberships(ctx context.Context, email string, params *GetUserMembershipsParams, reqEditors ...RequestEditorFn) (*GetUserMembershipsResponse, error)

	// GetUserPermissions request
	GetUserPermissions(ctx context.Context, email string, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error)

	// GetUserResources request
	GetUserResources(ctx context.Context, email string, params *GetUserResourcesParams, reqEditors ...RequestEditorFn) (*GetUserResourcesResponse, error)

	// ValidateChildMembers request with any body
	ValidateChildMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error)

	ValidateChildMembers(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error)

	// AddMembers request with any body
	AddMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMembersResponse, error)

	AddMembers(ctx context.Context, resourceID string, body AddMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMembersResponse, error)

	// ReplaceMembers request with any body
	ReplaceMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error)

	ReplaceMembers(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error)

	// RemoveMembers request with any body
	RemoveMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMembersResponse, error)

	RemoveMembers(ctx context.Context, resourceID string, body RemoveMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMembersResponse, error)

	// ValidateMembers request with any body
	ValidateMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateMembersResponse, error)

	ValidateMembers(ctx context.Context, resourceID string, body ValidateMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateMembersResponse, error)

	// AddRoles request with any body
	AddRolesWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolesResponse, error)

	AddRoles(ctx context.Context, resourceID string, body AddRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolesResponse, error)

	// RemoveRoles request with any body
	RemoveRolesWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolesResponse, error)

	RemoveRoles(ctx context.Context, resourceID string, body RemoveRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolesResponse, error)

	// GetMembers request
	GetMembers(ctx context.Context, resourceType string, resourceID string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*GetMembersResponse, error)

	// GetRoles request
	GetRoles(ctx context.Context, resourceType string, resourceID string, reqEditors ...RequestEditorFn) (*GetRolesResponse, error)
}

type GetPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r AddPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemovePermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PermissionsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RemovePermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemovePermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultRolesResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetDefaultRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddDefaultRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultRolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r AddDefaultRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddDefaultRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveDefaultRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DefaultRolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RemoveDefaultRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveDefaultRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubjectsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetSubjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserMembershipsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserMembershipsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetUserMembershipsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserMembershipsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserPermissionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPermissionsResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetUserPermissionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserPermissionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResourcesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetUserResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateChildMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ValidateChildMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateChildMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembersResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r AddMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembersResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ReplaceMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembersResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RemoveMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ValidateMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ValidateMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ValidateMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r AddRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r RemoveRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MembersResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRolesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *RolesResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetRolesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRolesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPermissions request returning *GetPermissionsResponse
func (c *ClientWithResponses) GetPermissions(ctx context.Context, params *GetPermissionsParams, reqEditors ...RequestEditorFn) (*GetPermissionsResponse, error) {
	rsp, err := c.GetPermissionsRaw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetPermissionsResponse(rsp)
}

// AddPermissionsWithBody request with arbitrary body returning *AddPermissionsResponse
func (c *ClientWithResponses) AddPermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error) {
	rsp, err := c.AddPermissionsRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddPermissionsResponse(rsp)
}

func (c *ClientWithResponses) AddPermissions(ctx context.Context, body AddPermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPermissionsResponse, error) {
	rsp, err := c.AddPermissionsRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddPermissionsResponse(rsp)
}

// RemovePermissionsWithBody request with arbitrary body returning *RemovePermissionsResponse
func (c *ClientWithResponses) RemovePermissionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error) {
	rsp, err := c.RemovePermissionsRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemovePermissionsResponse(rsp)
}

func (c *ClientWithResponses) RemovePermissions(ctx context.Context, body RemovePermissionsJSONRequestBody, reqEditors ...RequestEditorFn) (*RemovePermissionsResponse, error) {
	rsp, err := c.RemovePermissionsRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemovePermissionsResponse(rsp)
}

// GetDefaultRoles request returning *GetDefaultRolesResponse
func (c *ClientWithResponses) GetDefaultRoles(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultRolesResponse, error) {
	rsp, err := c.GetDefaultRolesRaw(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetDefaultRolesResponse(rsp)
}

// AddDefaultRolesWithBody request with arbitrary body returning *AddDefaultRolesResponse
func (c *ClientWithResponses) AddDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error) {
	rsp, err := c.AddDefaultRolesRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddDefaultRolesResponse(rsp)
}

func (c *ClientWithResponses) AddDefaultRoles(ctx context.Context, body AddDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddDefaultRolesResponse, error) {
	rsp, err := c.AddDefaultRolesRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddDefaultRolesResponse(rsp)
}

// RemoveDefaultRolesWithBody request with arbitrary body returning *RemoveDefaultRolesResponse
func (c *ClientWithResponses) RemoveDefaultRolesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error) {
	rsp, err := c.RemoveDefaultRolesRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveDefaultRolesResponse(rsp)
}

func (c *ClientWithResponses) RemoveDefaultRoles(ctx context.Context, body RemoveDefaultRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveDefaultRolesResponse, error) {
	rsp, err := c.RemoveDefaultRolesRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveDefaultRolesResponse(rsp)
}

// GetSubjects request returning *GetSubjectsResponse
func (c *ClientWithResponses) GetSubjects(ctx context.Context, params *GetSubjectsParams, reqEditors ...RequestEditorFn) (*GetSubjectsResponse, error) {
	rsp, err := c.GetSubjectsRaw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetSubjectsResponse(rsp)
}

// GetUserMemberships request returning *GetUserMembershipsResponse
func (c *ClientWithResponses) GetUserMemberships(ctx context.Context, email string, params *GetUserMembershipsParams, reqEditors ...RequestEditorFn) (*GetUserMembershipsResponse, error) {
	rsp, err := c.GetUserMembershipsRaw(ctx, email, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetUserMembershipsResponse(rsp)
}

// GetUserPermissions request returning *GetUserPermissionsResponse
func (c *ClientWithResponses) GetUserPermissions(ctx context.Context, email string, params *GetUserPermissionsParams, reqEditors ...RequestEditorFn) (*GetUserPermissionsResponse, error) {
	rsp, err := c.GetUserPermissionsRaw(ctx, email, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetUserPermissionsResponse(rsp)
}

// GetUserResources request returning *GetUserResourcesResponse
func (c *ClientWithResponses) GetUserResources(ctx context.Context, email string, params *GetUserResourcesParams, reqEditors ...RequestEditorFn) (*GetUserResourcesResponse, error) {
	rsp, err := c.GetUserResourcesRaw(ctx, email, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetUserResourcesResponse(rsp)
}

// ValidateChildMembersWithBody request with arbitrary body returning *ValidateChildMembersResponse
func (c *ClientWithResponses) ValidateChildMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error) {
	rsp, err := c.ValidateChildMembersRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseValidateChildMembersResponse(rsp)
}

func (c *ClientWithResponses) ValidateChildMembers(ctx context.Context, resourceID string, body ValidateChildMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateChildMembersResponse, error) {
	rsp, err := c.ValidateChildMembersRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseValidateChildMembersResponse(rsp)
}

// AddMembersWithBody request with arbitrary body returning *AddMembersResponse
func (c *ClientWithResponses) AddMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddMembersResponse, error) {
	rsp, err := c.AddMembersRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddMembersResponse(rsp)
}

func (c *ClientWithResponses) AddMembers(ctx context.Context, resourceID string, body AddMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*AddMembersResponse, error) {
	rsp, err := c.AddMembersRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddMembersResponse(rsp)
}

// ReplaceMembersWithBody request with arbitrary body returning *ReplaceMembersResponse
func (c *ClientWithResponses) ReplaceMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error) {
	rsp, err := c.ReplaceMembersRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseReplaceMembersResponse(rsp)
}

func (c *ClientWithResponses) ReplaceMembers(ctx context.Context, resourceID string, body ReplaceMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceMembersResponse, error) {
	rsp, err := c.ReplaceMembersRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseReplaceMembersResponse(rsp)
}

// RemoveMembersWithBody request with arbitrary body returning *RemoveMembersResponse
func (c *ClientWithResponses) RemoveMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveMembersResponse, error) {
	rsp, err := c.RemoveMembersRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveMembersResponse(rsp)
}

func (c *ClientWithResponses) RemoveMembers(ctx context.Context, resourceID string, body RemoveMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveMembersResponse, error) {
	rsp, err := c.RemoveMembersRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveMembersResponse(rsp)
}

// ValidateMembersWithBody request with arbitrary body returning *ValidateMembersResponse
func (c *ClientWithResponses) ValidateMembersWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ValidateMembersResponse, error) {
	rsp, err := c.ValidateMembersRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseValidateMembersResponse(rsp)
}

func (c *ClientWithResponses) ValidateMembers(ctx context.Context, resourceID string, body ValidateMembersJSONRequestBody, reqEditors ...RequestEditorFn) (*ValidateMembersResponse, error) {
	rsp, err := c.ValidateMembersRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseValidateMembersResponse(rsp)
}

// AddRolesWithBody request with arbitrary body returning *AddRolesResponse
func (c *ClientWithResponses) AddRolesWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddRolesResponse, error) {
	rsp, err := c.AddRolesRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddRolesResponse(rsp)
}

func (c *ClientWithResponses) AddRoles(ctx context.Context, resourceID string, body AddRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*AddRolesResponse, error) {
	rsp, err := c.AddRolesRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseAddRolesResponse(rsp)
}

// RemoveRolesWithBody request with arbitrary body returning *RemoveRolesResponse
func (c *ClientWithResponses) RemoveRolesWithBody(ctx context.Context, resourceID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveRolesResponse, error) {
	rsp, err := c.RemoveRolesRawWithBody(ctx, resourceID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveRolesResponse(rsp)
}

func (c *ClientWithResponses) RemoveRoles(ctx context.Context, resourceID string, body RemoveRolesJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveRolesResponse, error) {
	rsp, err := c.RemoveRolesRaw(ctx, resourceID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseRemoveRolesResponse(rsp)
}

// GetMembers request returning *GetMembersResponse
func (c *ClientWithResponses) GetMembers(ctx context.Context, resourceType string, resourceID string, params *GetMembersParams, reqEditors ...RequestEditorFn) (*GetMembersResponse, error) {
	rsp, err := c.GetMembersRaw(ctx, resourceType, resourceID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetMembersResponse(rsp)
}

// GetRoles request returning *GetRolesResponse
func (c *ClientWithResponses) GetRoles(ctx context.Context, resourceType string, resourceID string, reqEditors ...RequestEditorFn) (*GetRolesResponse, error) {
	rsp, err := c.GetRolesRaw(ctx, resourceType, resourceID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetRolesResponse(rsp)
}

// ParseGetPermissionsResponse parses an HTTP response from a GetPermissions call
func (c *ClientWithResponses) ParseGetPermissionsResponse(rsp *http.Response) (*GetPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseAddPermissionsResponse parses an HTTP response from a AddPermissions call
func (c *ClientWithResponses) ParseAddPermissionsResponse(rsp *http.Response) (*AddPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseRemovePermissionsResponse parses an HTTP response from a RemovePermissions call
func (c *ClientWithResponses) ParseRemovePermissionsResponse(rsp *http.Response) (*RemovePermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemovePermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetDefaultRolesResponse parses an HTTP response from a GetDefaultRoles call
func (c *ClientWithResponses) ParseGetDefaultRolesResponse(rsp *http.Response) (*GetDefaultRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseAddDefaultRolesResponse parses an HTTP response from a AddDefaultRoles call
func (c *ClientWithResponses) ParseAddDefaultRolesResponse(rsp *http.Response) (*AddDefaultRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddDefaultRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseRemoveDefaultRolesResponse parses an HTTP response from a RemoveDefaultRoles call
func (c *ClientWithResponses) ParseRemoveDefaultRolesResponse(rsp *http.Response) (*RemoveDefaultRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveDefaultRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DefaultRolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetSubjectsResponse parses an HTTP response from a GetSubjects call
func (c *ClientWithResponses) ParseGetSubjectsResponse(rsp *http.Response) (*GetSubjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetUserMembershipsResponse parses an HTTP response from a GetUserMemberships call
func (c *ClientWithResponses) ParseGetUserMembershipsResponse(rsp *http.Response) (*GetUserMembershipsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserMembershipsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserMembershipsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetUserPermissionsResponse parses an HTTP response from a GetUserPermissions call
func (c *ClientWithResponses) ParseGetUserPermissionsResponse(rsp *http.Response) (*GetUserPermissionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserPermissionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPermissionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetUserResourcesResponse parses an HTTP response from a GetUserResources call
func (c *ClientWithResponses) ParseGetUserResourcesResponse(rsp *http.Response) (*GetUserResourcesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResourcesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseValidateChildMembersResponse parses an HTTP response from a ValidateChildMembers call
func (c *ClientWithResponses) ParseValidateChildMembersResponse(rsp *http.Response) (*ValidateChildMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateChildMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseAddMembersResponse parses an HTTP response from a AddMembers call
func (c *ClientWithResponses) ParseAddMembersResponse(rsp *http.Response) (*AddMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseReplaceMembersResponse parses an HTTP response from a ReplaceMembers call
func (c *ClientWithResponses) ParseReplaceMembersResponse(rsp *http.Response) (*ReplaceMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseRemoveMembersResponse parses an HTTP response from a RemoveMembers call
func (c *ClientWithResponses) ParseRemoveMembersResponse(rsp *http.Response) (*RemoveMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseValidateMembersResponse parses an HTTP response from a ValidateMembers call
func (c *ClientWithResponses) ParseValidateMembersResponse(rsp *http.Response) (*ValidateMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ValidateMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseAddRolesResponse parses an HTTP response from a AddRoles call
func (c *ClientWithResponses) ParseAddRolesResponse(rsp *http.Response) (*AddRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseRemoveRolesResponse parses an HTTP response from a RemoveRoles call
func (c *ClientWithResponses) ParseRemoveRolesResponse(rsp *http.Response) (*RemoveRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetMembersResponse parses an HTTP response from a GetMembers call
func (c *ClientWithResponses) ParseGetMembersResponse(rsp *http.Response) (*GetMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MembersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetRolesResponse parses an HTTP response from a GetRoles call
func (c *ClientWithResponses) ParseGetRolesResponse(rsp *http.Response) (*GetRolesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRolesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest RolesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}
