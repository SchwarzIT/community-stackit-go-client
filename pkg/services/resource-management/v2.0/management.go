// Package resourcemanagement provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/stackit-client-generator version v0.0.3 DO NOT EDIT.
package resourcemanagement

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	contracts "github.com/SchwarzIT/community-stackit-go-client/pkg/contracts"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/runtime"
	openapiTypes "github.com/SchwarzIT/community-stackit-go-client/pkg/helpers/types"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
)

// Defines values for ChildrenResponseItemsType.
const (
	CHILDREN_RESPONSE_ITEMS_TYPE_PROJECT ChildrenResponseItemsType = "PROJECT"
)

// Defines values for ContainerResponseItemsType.
const (
	CONTAINER_RESPONSE_ITEMS_TYPE_PROJECT ContainerResponseItemsType = "PROJECT"
)

// Defines values for LifecycleState.
const (
	ACTIVE   LifecycleState = "ACTIVE"
	CREATING LifecycleState = "CREATING"
	DELETING LifecycleState = "DELETING"
	INACTIVE LifecycleState = "INACTIVE"
)

// Defines values for OrganizationMemberRole.
const (
	ORGANIZATION_ADMIN   OrganizationMemberRole = "organization.admin"
	ORGANIZATION_AUDITOR OrganizationMemberRole = "organization.auditor"
	ORGANIZATION_MEMBER  OrganizationMemberRole = "organization.member"
	ORGANIZATION_OWNER   OrganizationMemberRole = "organization.owner"
)

// Defines values for ParentType.
const (
	PARENT_TYPE_FOLDER       ParentType = "FOLDER"
	PARENT_TYPE_ORGANIZATION ParentType = "ORGANIZATION"
)

// Defines values for ParentListType.
const (
	PARENT_LIST_TYPE_FOLDER       ParentListType = "FOLDER"
	PARENT_LIST_TYPE_ORGANIZATION ParentListType = "ORGANIZATION"
)

// Defines values for ProjectMemberRole.
const (
	PROJECT_ADMIN   ProjectMemberRole = "project.admin"
	PROJECT_AUDITOR ProjectMemberRole = "project.auditor"
	PROJECT_MEMBER  ProjectMemberRole = "project.member"
	PROJECT_OWNER   ProjectMemberRole = "project.owner"
)

// Defines values for GetContainersOfAFolderParamsType.
const (
	GET_CONTAINERS_OF_A_FOLDER_PARAMS_TYPE_PROJECT GetContainersOfAFolderParamsType = "project"
)

// Defines values for GetOrganizationsContainerIDSupportParamsType.
const (
	GET_ORGANIZATIONS_CONTAINER_ID_SUPPORT_PARAMS_TYPE_PROJECT GetOrganizationsContainerIDSupportParamsType = "project"
)

// Defines values for GetContainersOfAnOrganizationParamsType.
const (
	PROJECT GetContainersOfAnOrganizationParamsType = "project"
)

// AllFoldersResponse defines model for AllFoldersResponse.
type AllFoldersResponse struct {
	Items []struct {
		// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "folderId".
		ContainerID string `json:"containerId"`

		// CreationTime Timestamp at which the folder was created.
		CreationTime string `json:"creationTime"`

		// FolderId Globally unique, legacy folder identifier (for backward compatibility)
		FolderID openapiTypes.UUID `json:"folderId"`

		// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
		// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
		// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
		Labels *ResourceLabels `json:"labels,omitempty"`

		// Name Name of the folder.
		Name string `json:"name"`

		// Parent Parent container.
		Parent Parent `json:"parent"`

		// UpdateTime Timestamp at which the folder was created.
		UpdateTime string `json:"updateTime"`
	} `json:"items"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	Limit LimitSchema `json:"limit"`

	// Offset The offset of the first item in the collection to return.
	Offset OffsetSchema `json:"offset"`
}

// AllOrgResponse defines model for AllOrgResponse.
type AllOrgResponse struct {
	Items []struct {
		// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "organizationId".
		ContainerID string `json:"containerId"`

		// CreationTime Timestamp at which the organization was created.
		CreationTime string `json:"creationTime"`

		// LifecycleState Lifecycle state of the resource container.
		//
		// | LIFECYCLE STATE | DESCRIPTION |
		// |----------|--------------------|
		// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
		// | ACTIVE   | Resource container can be fully used. |
		// | INACTIVE | Resource container usage has been disabled. |
		// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
		LifecycleState LifecycleState `json:"lifecycleState"`

		// Name Name of the organization.
		Name string `json:"name"`

		// OrganizationId Globally unique, legacy organization identifier (for backward compatibility)
		OrganizationID openapiTypes.UUID `json:"organizationId"`

		// UpdateTime Timestamp at which the organization was last modified.
		UpdateTime string `json:"updateTime"`
	} `json:"items"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	Limit LimitSchema `json:"limit"`

	// Offset The offset of the first item in the collection to return.
	Offset OffsetSchema `json:"offset"`
}

// AllProjectsResponse defines model for AllProjectsResponse.
type AllProjectsResponse struct {
	Items []ProjectResponse `json:"items"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	Limit LimitSchema `json:"limit"`

	// Offset The offset of the first item in the collection to return.
	Offset OffsetSchema `json:"offset"`
}

// ChildrenResponse defines model for ChildrenResponse.
type ChildrenResponse struct {
	Items []struct {
		Item ProjectResponse `json:"item"`

		// Type Resource container type.
		Type ChildrenResponseItemsType `json:"type"`
	} `json:"items"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	Limit LimitSchema `json:"limit"`

	// Offset The offset of the first item in the collection to return.
	Offset OffsetSchema `json:"offset"`
}

// ChildrenResponseItemsType Resource container type.
type ChildrenResponseItemsType string

// ContainerResponse defines model for ContainerResponse.
type ContainerResponse struct {
	// Cursor A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.
	Cursor CursorSchema `json:"cursor"`
	Items  []struct {
		Item ProjectResponse `json:"item"`

		// Type Resource container type.
		Type ContainerResponseItemsType `json:"type"`
	} `json:"items"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	Limit LimitSchema `json:"limit"`
}

// ContainerResponseItemsType Resource container type.
type ContainerResponseItemsType string

// CursorSchema A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.
type CursorSchema = string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error The reason phrase of the status code.
	Error string `json:"error"`

	// Message Description of the error.
	Message string `json:"message"`

	// Path Path which was called.
	Path string `json:"path"`

	// Status Http Status Code.
	Status float32 `json:"status"`

	// TimeStamp Timestamp at which the error occurred.
	TimeStamp string `json:"timeStamp"`
}

// FolderRequestBody defines model for FolderRequestBody.
type FolderRequestBody struct {
	// ContainerParentId User-friendly Id of the parent resource container.
	ContainerParentID string `json:"containerParentId"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Name The name of the folder matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name string `json:"name"`
}

// FolderResponse A Folder can have another folder as parent. 5 levels of nested folders are permitted.
type FolderResponse struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "folderId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the folder was created.
	CreationTime string `json:"creationTime"`

	// FolderId Globally unique, legacy folder identifier (for backward compatibility)
	FolderID openapiTypes.UUID `json:"folderId"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Name Folder name.
	Name string `json:"name"`

	// Parent Parent container.
	Parent Parent `json:"parent"`

	// UpdateTime Timestamp at which the folder was last modified.
	UpdateTime string `json:"updateTime"`
}

// FolderResponseWithParents A Folder can have another folder as parent. 5 levels of nested folders are permitted.
type FolderResponseWithParents struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "folderId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the folder was created.
	CreationTime string `json:"creationTime"`

	// FolderId Globally unique, legacy folder identifier (for backward compatibility)
	FolderID openapiTypes.UUID `json:"folderId"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Name Folder name.
	Name string `json:"name"`

	// Parent Parent container.
	Parent  Parent      `json:"parent"`
	Parents *ParentList `json:"parents,omitempty"`

	// UpdateTime Timestamp at which the folder was last modified.
	UpdateTime string `json:"updateTime"`
}

// LifecycleState Lifecycle state of the resource container.
//
// | LIFECYCLE STATE | DESCRIPTION |
// |----------|--------------------|
// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
// | ACTIVE   | Resource container can be fully used. |
// | INACTIVE | Resource container usage has been disabled. |
// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
type LifecycleState string

// LimitSchema The maximum number of projects to return in the response. If not present, an appropriate default will be used.
type LimitSchema = float32

// OffsetSchema The offset of the first item in the collection to return.
type OffsetSchema = float32

// OrganizationMember defines model for OrganizationMember.
type OrganizationMember struct {
	// Role Unique name of the role.
	Role OrganizationMemberRole `json:"role"`

	// Subject Unique identifier of the user, service account, or client.
	Subject string `json:"subject"`
}

// OrganizationMemberRole Unique name of the role.
type OrganizationMemberRole string

// OrganizationRequestBody defines model for OrganizationRequestBody.
type OrganizationRequestBody struct {
	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Members The initial members that are assigned to the organization. At least one subject needs to be a user and not a client or service account.
	Members []OrganizationMember `json:"members"`

	// Name The name for the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name string `json:"name"`
}

// OrganizationResponse defines model for OrganizationResponse.
type OrganizationResponse struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "organizationId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the organization was created.
	CreationTime string `json:"creationTime"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// LifecycleState Lifecycle state of the resource container.
	//
	// | LIFECYCLE STATE | DESCRIPTION |
	// |----------|--------------------|
	// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
	// | ACTIVE   | Resource container can be fully used. |
	// | INACTIVE | Resource container usage has been disabled. |
	// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
	LifecycleState LifecycleState `json:"lifecycleState"`

	// Name Organization name.
	Name string `json:"name"`

	// OrganizationId Globally unique, legacy organization identifier (for backward compatibility)
	OrganizationID openapiTypes.UUID `json:"organizationId"`

	// UpdateTime Timestamp at which the organization was last modified.
	UpdateTime string `json:"updateTime"`
}

// Parent Parent container.
type Parent struct {
	// ContainerId User-friendly identifier of either organization or folder (will replace id).
	ContainerID string `json:"containerId"`

	// Id Legacy identifier of either organization or folder (for backward compatibility). Field name according to parent object of v1.
	ID openapiTypes.UUID `json:"id"`

	// Type Container type of parent container.
	Type ParentType `json:"type"`
}

// ParentType Container type of parent container.
type ParentType string

// ParentList defines model for ParentList.
type ParentList = []struct {
	// ContainerId User-friendly identifier of either organization or folder (will replace id).
	ContainerID string `json:"containerId"`

	// ContainerParentId User-friendly parent identifier of either organization or folder (will replace parentId).
	ContainerParentID string `json:"containerParentId"`

	// Id Legacy identifier (for backward compatibility).
	ID openapiTypes.UUID `json:"id"`

	// Name Parent container name.
	Name string `json:"name"`

	// ParentId Legacy identifier of the parent resource container (for backward compatibility).
	ParentID openapiTypes.UUID `json:"parentId"`

	// Type Parent container type.
	Type ParentListType `json:"type"`
}

// ParentListType Parent container type.
type ParentListType string

// PatchFolderOrProject defines model for PatchFolderOrProject.
type PatchFolderOrProject struct {
	// ContainerParentId New user-friendly parent Id for the resource container.
	ContainerParentID *string `json:"containerParentId,omitempty"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Name New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name *string `json:"name,omitempty"`
}

// PatchOrganizationRequestBody defines model for PatchOrganizationRequestBody.
type PatchOrganizationRequestBody struct {
	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Name The new name of the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name *string `json:"name,omitempty"`
}

// ProjectMember defines model for ProjectMember.
type ProjectMember struct {
	Role    *ProjectMemberRole `json:"role,omitempty"`
	Subject *string            `json:"subject,omitempty"`
}

// ProjectMemberRole defines model for ProjectMember.Role.
type ProjectMemberRole string

// ProjectRequestBody defines model for ProjectRequestBody.
type ProjectRequestBody struct {
	// ContainerParentId User-friendly identifier of the parent resource container.
	ContainerParentID string `json:"containerParentId"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Members The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.
	Members []ProjectMember `json:"members"`

	// Name Project name matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name string `json:"name"`
}

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "projectId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the project was created.
	CreationTime string `json:"creationTime"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// LifecycleState Lifecycle state of the resource container.
	//
	// | LIFECYCLE STATE | DESCRIPTION |
	// |----------|--------------------|
	// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
	// | ACTIVE   | Resource container can be fully used. |
	// | INACTIVE | Resource container usage has been disabled. |
	// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
	LifecycleState LifecycleState `json:"lifecycleState"`

	// Name Project name.
	Name string `json:"name"`

	// Parent Parent container.
	Parent Parent `json:"parent"`

	// ProjectId Globally unique, legacy project identifier (for backward compatibility)
	ProjectID openapiTypes.UUID `json:"projectId"`

	// UpdateTime Timestamp at which the project was last modified.
	UpdateTime string `json:"updateTime"`
}

// ProjectResponseWithParents defines model for ProjectResponseWithParents.
type ProjectResponseWithParents struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "projectId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the project was created.
	CreationTime string `json:"creationTime"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// LifecycleState Lifecycle state of the resource container.
	//
	// | LIFECYCLE STATE | DESCRIPTION |
	// |----------|--------------------|
	// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
	// | ACTIVE   | Resource container can be fully used. |
	// | INACTIVE | Resource container usage has been disabled. |
	// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
	LifecycleState LifecycleState `json:"lifecycleState"`

	// Name Project name.
	Name string `json:"name"`

	// Parent Parent container.
	Parent  Parent      `json:"parent"`
	Parents *ParentList `json:"parents,omitempty"`

	// ProjectId Globally unique, legacy project identifier (for backward compatibility)
	ProjectID openapiTypes.UUID `json:"projectId"`

	// UpdateTime Timestamp at which the project was last modified.
	UpdateTime string `json:"updateTime"`
}

// ResourceLabels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
type ResourceLabels map[string]string

// CreationTimeStart defines model for creation-time-start.
type CreationTimeStart = string

// Cursor defines model for cursor.
type Cursor = string

// Limit defines model for limit.
type Limit = float32

// Member defines model for member.
type Member = string

// Offset defines model for offset.
type Offset = float32

// Recursive defines model for recursive.
type Recursive = bool

// GetFoldersParams defines parameters for GetFolders.
type GetFoldersParams struct {
	// ContainerParentID container Id of the parent resource container.
	ContainerParentID *string `form:"containerParentID,omitempty" json:"containerParentID,omitempty"`

	// ContainerIDs List of user-friendly container Ids.
	ContainerIDs *[]interface{} `form:"containerIDs,omitempty" json:"containerIDs,omitempty"`

	// Member E-Mail address of the user for whom the visible resource containers should be filtered.
	Member *Member `form:"member,omitempty" json:"member,omitempty"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of the first item in the collection to return.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// CreationTimeStart A timestamp to specifiy the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.
	CreationTimeStart *CreationTimeStart `form:"creation-time-start,omitempty" json:"creation-time-start,omitempty"`
}

// DeleteFoldersContainerIDParams defines parameters for DeleteFoldersContainerID.
type DeleteFoldersContainerIDParams struct {
	// Force If true, all nested, empty folders are deleted recursively - if no project is attached!
	Force *bool `form:"force,omitempty" json:"force,omitempty"`
}

// GetFoldersContainerIDParams defines parameters for GetFoldersContainerID.
type GetFoldersContainerIDParams struct {
	IncludeParents *bool `form:"includeParents,omitempty" json:"includeParents,omitempty"`
}

// GetContainersOfAFolderParams defines parameters for GetContainersOfAFolder.
type GetContainersOfAFolderParams struct {
	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Member E-Mail address of the user for whom the visible resource containers should be filtered.
	Member *Member `form:"member,omitempty" json:"member,omitempty"`

	// Type If given, only children of specified type will be returned.
	Type *GetContainersOfAFolderParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetContainersOfAFolderParamsType defines parameters for GetContainersOfAFolder.
type GetContainersOfAFolderParamsType string

// DeleteFolderLabelsParams defines parameters for DeleteFolderLabels.
type DeleteFolderLabelsParams struct {
	// Keys Label name.
	Keys *[]interface{} `form:"keys,omitempty" json:"keys,omitempty"`
}

// GetAllOrganizationsParams defines parameters for GetAllOrganizations.
type GetAllOrganizationsParams struct {
	// ContainerIDs Preferable the containerIds, but for migration purpose, the legacy uuids of the organizations are accepted as well.
	ContainerIDs *[]interface{} `form:"containerIDs,omitempty" json:"containerIDs,omitempty"`

	// Member E-Mail address of the user for whom the visible resource containers should be filtered.
	Member *Member `form:"member,omitempty" json:"member,omitempty"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of the first item in the collection to return.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// CreationTimeStart A timestamp to specifiy the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.
	CreationTimeStart *CreationTimeStart `form:"creation-time-start,omitempty" json:"creation-time-start,omitempty"`
}

// GetOrganizationsContainerIDSupportParams defines parameters for GetOrganizationsContainerIDSupport.
type GetOrganizationsContainerIDSupportParams struct {
	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset The offset of the first item in the collection to return.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// CreationTimeStart A timestamp to specifiy the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.
	CreationTimeStart *CreationTimeStart `form:"creation-time-start,omitempty" json:"creation-time-start,omitempty"`

	// Type If given, only children of specified type will be returned.
	Type *GetOrganizationsContainerIDSupportParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetOrganizationsContainerIDSupportParamsType defines parameters for GetOrganizationsContainerIDSupport.
type GetOrganizationsContainerIDSupportParamsType string

// GetContainersOfAnOrganizationParams defines parameters for GetContainersOfAnOrganization.
type GetContainersOfAnOrganizationParams struct {
	// Member E-Mail address of the user for whom the visible resource containers should be filtered.
	Member *Member `form:"member,omitempty" json:"member,omitempty"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Cursor A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.
	Cursor *Cursor `form:"cursor,omitempty" json:"cursor,omitempty"`

	// Recursive If true, list all children. If false, list only the next direct children.
	Recursive *Recursive `form:"recursive,omitempty" json:"recursive,omitempty"`

	// Type If given, only children of specified type will be returned.
	Type *GetContainersOfAnOrganizationParamsType `form:"type,omitempty" json:"type,omitempty"`
}

// GetContainersOfAnOrganizationParamsType defines parameters for GetContainersOfAnOrganization.
type GetContainersOfAnOrganizationParamsType string

// DeleteOrganizationsContainerIDLabelsParams defines parameters for DeleteOrganizationsContainerIDLabels.
type DeleteOrganizationsContainerIDLabelsParams struct {
	// Keys Label name.
	Keys *[]interface{} `form:"keys,omitempty" json:"keys,omitempty"`
}

// ListParams defines parameters for List.
type ListParams struct {
	// ContainerParentID Container ID from parent container.
	ContainerParentID *string `form:"containerParentID,omitempty" json:"containerParentID,omitempty"`

	// ContainerIDs List of container IDs
	ContainerIDs *[]interface{} `form:"containerIDs,omitempty" json:"containerIDs,omitempty"`

	// Member E-Mail address of the user for whom the visible resource containers should be filtered.
	Member *Member `form:"member,omitempty" json:"member,omitempty"`

	// Offset The offset of the first item in the collection to return.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// CreationTimeStart A timestamp to specifiy the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.
	CreationTimeStart *CreationTimeStart `form:"creation-time-start,omitempty" json:"creation-time-start,omitempty"`
}

// GetParams defines parameters for Get.
type GetParams struct {
	IncludeParents *bool `form:"includeParents,omitempty" json:"includeParents,omitempty"`
}

// DeleteProjectContainerIDLabelsParams defines parameters for DeleteProjectContainerIDLabels.
type DeleteProjectContainerIDLabelsParams struct {
	// Keys Label name.
	Keys *[]interface{} `form:"keys,omitempty" json:"keys,omitempty"`
}

// PostFoldersJSONRequestBody defines body for PostFolders for application/json ContentType.
type PostFoldersJSONRequestBody = FolderRequestBody

// PatchFoldersContainerIDJSONRequestBody defines body for PatchFoldersContainerID for application/json ContentType.
type PatchFoldersContainerIDJSONRequestBody = PatchFolderOrProject

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody = OrganizationRequestBody

// PatchOrganizationsContainerIDJSONRequestBody defines body for PatchOrganizationsContainerID for application/json ContentType.
type PatchOrganizationsContainerIDJSONRequestBody = PatchOrganizationRequestBody

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = ProjectRequestBody

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = PatchFolderOrProject

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client contracts.BaseClientInterface

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// NewRawClient creates a new Client, with reasonable defaults
func NewRawClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer contracts.BaseClientInterface) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type rawClientInterface interface {
	// GetFolders request
	GetFoldersRaw(ctx context.Context, params *GetFoldersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostFolders request with any body
	PostFoldersRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostFoldersRaw(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFoldersContainerID request
	DeleteFoldersContainerIDRaw(ctx context.Context, containerId string, params *DeleteFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFoldersContainerID request
	GetFoldersContainerIDRaw(ctx context.Context, containerId string, params *GetFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchFoldersContainerID request with any body
	PatchFoldersContainerIDRawWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchFoldersContainerIDRaw(ctx context.Context, containerId string, body PatchFoldersContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainersOfAFolder request
	GetContainersOfAFolderRaw(ctx context.Context, containerId string, params *GetContainersOfAFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFolderLabels request
	DeleteFolderLabelsRaw(ctx context.Context, containerId string, params *DeleteFolderLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllOrganizations request
	GetAllOrganizationsRaw(ctx context.Context, params *GetAllOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizations request with any body
	PostOrganizationsRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsRaw(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsContainerID request
	DeleteOrganizationsContainerIDRaw(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsContainerID request
	GetOrganizationsContainerIDRaw(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PatchOrganizationsContainerID request with any body
	PatchOrganizationsContainerIDRawWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PatchOrganizationsContainerIDRaw(ctx context.Context, containerId string, body PatchOrganizationsContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsContainerIDSupport request
	GetOrganizationsContainerIDSupportRaw(ctx context.Context, containerId string, params *GetOrganizationsContainerIDSupportParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetContainersOfAnOrganization request
	GetContainersOfAnOrganizationRaw(ctx context.Context, containerId string, params *GetContainersOfAnOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrganizationsContainerIDLabels request
	DeleteOrganizationsContainerIDLabelsRaw(ctx context.Context, containerId string, params *DeleteOrganizationsContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// List request
	ListRaw(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create request with any body
	CreateRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateRaw(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	DeleteRaw(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request
	GetRaw(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update request with any body
	UpdateRawWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateRaw(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectContainerIDLabels request
	DeleteProjectContainerIDLabelsRaw(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetFoldersRaw(ctx context.Context, params *GetFoldersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFoldersRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoldersRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostFoldersRaw(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFoldersRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFoldersContainerIDRaw(ctx context.Context, containerId string, params *DeleteFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFoldersContainerIDRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFoldersContainerIDRaw(ctx context.Context, containerId string, params *GetFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFoldersContainerIDRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFoldersContainerIDRawWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFoldersContainerIDRequestWithBody(ctx, c.Server, containerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchFoldersContainerIDRaw(ctx context.Context, containerId string, body PatchFoldersContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchFoldersContainerIDRequest(ctx, c.Server, containerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainersOfAFolderRaw(ctx context.Context, containerId string, params *GetContainersOfAFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainersOfAFolderRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFolderLabelsRaw(ctx context.Context, containerId string, params *DeleteFolderLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFolderLabelsRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllOrganizationsRaw(ctx context.Context, params *GetAllOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllOrganizationsRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsRaw(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsContainerIDRaw(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsContainerIDRequest(ctx, c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsContainerIDRaw(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsContainerIDRequest(ctx, c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrganizationsContainerIDRawWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrganizationsContainerIDRequestWithBody(ctx, c.Server, containerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PatchOrganizationsContainerIDRaw(ctx context.Context, containerId string, body PatchOrganizationsContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPatchOrganizationsContainerIDRequest(ctx, c.Server, containerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsContainerIDSupportRaw(ctx context.Context, containerId string, params *GetOrganizationsContainerIDSupportParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsContainerIDSupportRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetContainersOfAnOrganizationRaw(ctx context.Context, containerId string, params *GetContainersOfAnOrganizationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetContainersOfAnOrganizationRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrganizationsContainerIDLabelsRaw(ctx context.Context, containerId string, params *DeleteOrganizationsContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrganizationsContainerIDLabelsRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRaw(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRawWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateRaw(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRaw(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(ctx, c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRaw(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRawWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(ctx, c.Server, containerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateRaw(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(ctx, c.Server, containerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectContainerIDLabelsRaw(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectContainerIDLabelsRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetFoldersRequest generates requests for GetFolders
func NewGetFoldersRequest(ctx context.Context, server string, params *GetFoldersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ContainerParentID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerParentID", runtime.ParamLocationQuery, *params.ContainerParentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContainerIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerIDs", runtime.ParamLocationQuery, *params.ContainerIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Member != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member", runtime.ParamLocationQuery, *params.Member); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationTimeStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creation-time-start", runtime.ParamLocationQuery, *params.CreationTimeStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostFoldersRequest calls the generic PostFolders builder with application/json body
func NewPostFoldersRequest(ctx context.Context, server string, body PostFoldersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostFoldersRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewPostFoldersRequestWithBody generates requests for PostFolders with any type of body
func NewPostFoldersRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFoldersContainerIDRequest generates requests for DeleteFoldersContainerID
func NewDeleteFoldersContainerIDRequest(ctx context.Context, server string, containerId string, params *DeleteFoldersContainerIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Force != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFoldersContainerIDRequest generates requests for GetFoldersContainerID
func NewGetFoldersContainerIDRequest(ctx context.Context, server string, containerId string, params *GetFoldersContainerIDParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeParents != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeParents", runtime.ParamLocationQuery, *params.IncludeParents); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchFoldersContainerIDRequest calls the generic PatchFoldersContainerID builder with application/json body
func NewPatchFoldersContainerIDRequest(ctx context.Context, server string, containerId string, body PatchFoldersContainerIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchFoldersContainerIDRequestWithBody(ctx, server, containerId, "application/json", bodyReader)
}

// NewPatchFoldersContainerIDRequestWithBody generates requests for PatchFoldersContainerID with any type of body
func NewPatchFoldersContainerIDRequestWithBody(ctx context.Context, server string, containerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetContainersOfAFolderRequest generates requests for GetContainersOfAFolder
func NewGetContainersOfAFolderRequest(ctx context.Context, server string, containerId string, params *GetContainersOfAFolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s/containers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Member != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member", runtime.ParamLocationQuery, *params.Member); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteFolderLabelsRequest generates requests for DeleteFolderLabels
func NewDeleteFolderLabelsRequest(ctx context.Context, server string, containerId string, params *DeleteFolderLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/folders/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Keys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys", runtime.ParamLocationQuery, *params.Keys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllOrganizationsRequest generates requests for GetAllOrganizations
func NewGetAllOrganizationsRequest(ctx context.Context, server string, params *GetAllOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ContainerIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerIDs", runtime.ParamLocationQuery, *params.ContainerIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Member != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member", runtime.ParamLocationQuery, *params.Member); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationTimeStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creation-time-start", runtime.ParamLocationQuery, *params.CreationTimeStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(ctx context.Context, server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrganizationsContainerIDRequest generates requests for DeleteOrganizationsContainerID
func NewDeleteOrganizationsContainerIDRequest(ctx context.Context, server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsContainerIDRequest generates requests for GetOrganizationsContainerID
func NewGetOrganizationsContainerIDRequest(ctx context.Context, server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchOrganizationsContainerIDRequest calls the generic PatchOrganizationsContainerID builder with application/json body
func NewPatchOrganizationsContainerIDRequest(ctx context.Context, server string, containerId string, body PatchOrganizationsContainerIDJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchOrganizationsContainerIDRequestWithBody(ctx, server, containerId, "application/json", bodyReader)
}

// NewPatchOrganizationsContainerIDRequestWithBody generates requests for PatchOrganizationsContainerID with any type of body
func NewPatchOrganizationsContainerIDRequestWithBody(ctx context.Context, server string, containerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsContainerIDSupportRequest generates requests for GetOrganizationsContainerIDSupport
func NewGetOrganizationsContainerIDSupportRequest(ctx context.Context, server string, containerId string, params *GetOrganizationsContainerIDSupportParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/children", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationTimeStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creation-time-start", runtime.ParamLocationQuery, *params.CreationTimeStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetContainersOfAnOrganizationRequest generates requests for GetContainersOfAnOrganization
func NewGetContainersOfAnOrganizationRequest(ctx context.Context, server string, containerId string, params *GetContainersOfAnOrganizationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/containers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Member != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member", runtime.ParamLocationQuery, *params.Member); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Cursor != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Recursive != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "recursive", runtime.ParamLocationQuery, *params.Recursive); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Type != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "type", runtime.ParamLocationQuery, *params.Type); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteOrganizationsContainerIDLabelsRequest generates requests for DeleteOrganizationsContainerIDLabels
func NewDeleteOrganizationsContainerIDLabelsRequest(ctx context.Context, server string, containerId string, params *DeleteOrganizationsContainerIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Keys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys", runtime.ParamLocationQuery, *params.Keys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRequest generates requests for List
func NewListRequest(ctx context.Context, server string, params *ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ContainerParentID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerParentID", runtime.ParamLocationQuery, *params.ContainerParentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContainerIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerIDs", runtime.ParamLocationQuery, *params.ContainerIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Member != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member", runtime.ParamLocationQuery, *params.Member); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationTimeStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creation-time-start", runtime.ParamLocationQuery, *params.CreationTimeStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(ctx context.Context, server string, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(ctx context.Context, server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequest generates requests for Get
func NewGetRequest(ctx context.Context, server string, containerId string, params *GetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeParents != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeParents", runtime.ParamLocationQuery, *params.IncludeParents); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(ctx context.Context, server string, containerId string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(ctx, server, containerId, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(ctx context.Context, server string, containerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectContainerIDLabelsRequest generates requests for DeleteProjectContainerIDLabels
func NewDeleteProjectContainerIDLabelsRequest(ctx context.Context, server string, containerId string, params *DeleteProjectContainerIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Keys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys", runtime.ParamLocationQuery, *params.Keys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	rawClientInterface
}

// NewClient creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClient(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewRawClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetFolders request
	GetFolders(ctx context.Context, params *GetFoldersParams, reqEditors ...RequestEditorFn) (*GetFoldersResponse, error)

	// PostFolders request with any body
	PostFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error)

	PostFolders(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error)

	// DeleteFoldersContainerID request
	DeleteFoldersContainerID(ctx context.Context, containerId string, params *DeleteFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*DeleteFoldersContainerIDResponse, error)

	// GetFoldersContainerID request
	GetFoldersContainerID(ctx context.Context, containerId string, params *GetFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*GetFoldersContainerIDResponse, error)

	// PatchFoldersContainerID request with any body
	PatchFoldersContainerIDWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFoldersContainerIDResponse, error)

	PatchFoldersContainerID(ctx context.Context, containerId string, body PatchFoldersContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFoldersContainerIDResponse, error)

	// GetContainersOfAFolder request
	GetContainersOfAFolder(ctx context.Context, containerId string, params *GetContainersOfAFolderParams, reqEditors ...RequestEditorFn) (*GetContainersOfAFolderResponse, error)

	// DeleteFolderLabels request
	DeleteFolderLabels(ctx context.Context, containerId string, params *DeleteFolderLabelsParams, reqEditors ...RequestEditorFn) (*DeleteFolderLabelsResponse, error)

	// GetAllOrganizations request
	GetAllOrganizations(ctx context.Context, params *GetAllOrganizationsParams, reqEditors ...RequestEditorFn) (*GetAllOrganizationsResponse, error)

	// PostOrganizations request with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	// DeleteOrganizationsContainerID request
	DeleteOrganizationsContainerID(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsContainerIDResponse, error)

	// GetOrganizationsContainerID request
	GetOrganizationsContainerID(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*GetOrganizationsContainerIDResponse, error)

	// PatchOrganizationsContainerID request with any body
	PatchOrganizationsContainerIDWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrganizationsContainerIDResponse, error)

	PatchOrganizationsContainerID(ctx context.Context, containerId string, body PatchOrganizationsContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsContainerIDResponse, error)

	// GetOrganizationsContainerIDSupport request
	GetOrganizationsContainerIDSupport(ctx context.Context, containerId string, params *GetOrganizationsContainerIDSupportParams, reqEditors ...RequestEditorFn) (*GetOrganizationsContainerIDSupportResponse, error)

	// GetContainersOfAnOrganization request
	GetContainersOfAnOrganization(ctx context.Context, containerId string, params *GetContainersOfAnOrganizationParams, reqEditors ...RequestEditorFn) (*GetContainersOfAnOrganizationResponse, error)

	// DeleteOrganizationsContainerIDLabels request
	DeleteOrganizationsContainerIDLabels(ctx context.Context, containerId string, params *DeleteOrganizationsContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*DeleteOrganizationsContainerIDLabelsResponse, error)

	// List request
	List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// Create request with any body
	CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// Delete request
	Delete(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// Get request
	Get(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// Update request with any body
	UpdateWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	Update(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// DeleteProjectContainerIDLabels request
	DeleteProjectContainerIDLabels(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*DeleteProjectContainerIDLabelsResponse, error)
}

type GetFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllFoldersResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostFoldersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FolderResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r PostFoldersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFoldersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFoldersContainerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteFoldersContainerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFoldersContainerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFoldersContainerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponseWithParents
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetFoldersContainerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFoldersContainerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchFoldersContainerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FolderResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r PatchFoldersContainerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchFoldersContainerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainersOfAFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerResponse
	JSON400      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetContainersOfAFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainersOfAFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFolderLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteFolderLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFolderLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllOrgResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetAllOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrganizationResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsContainerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsContainerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsContainerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsContainerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON404      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsContainerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsContainerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchOrganizationsContainerIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OrganizationResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r PatchOrganizationsContainerIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchOrganizationsContainerIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsContainerIDSupportResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChildrenResponse
	JSON404      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsContainerIDSupportResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsContainerIDSupportResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetContainersOfAnOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ContainerResponse
	JSON404      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetContainersOfAnOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetContainersOfAnOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrganizationsContainerIDLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteOrganizationsContainerIDLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrganizationsContainerIDLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllProjectsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProjectResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectResponseWithParents
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectContainerIDLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteProjectContainerIDLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectContainerIDLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetFolders request returning *GetFoldersResponse
func (c *ClientWithResponses) GetFolders(ctx context.Context, params *GetFoldersParams, reqEditors ...RequestEditorFn) (*GetFoldersResponse, error) {
	rsp, err := c.GetFoldersRaw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetFoldersResponse(rsp)
}

// PostFoldersWithBody request with arbitrary body returning *PostFoldersResponse
func (c *ClientWithResponses) PostFoldersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error) {
	rsp, err := c.PostFoldersRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostFoldersResponse(rsp)
}

func (c *ClientWithResponses) PostFolders(ctx context.Context, body PostFoldersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostFoldersResponse, error) {
	rsp, err := c.PostFoldersRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostFoldersResponse(rsp)
}

// DeleteFoldersContainerID request returning *DeleteFoldersContainerIDResponse
func (c *ClientWithResponses) DeleteFoldersContainerID(ctx context.Context, containerId string, params *DeleteFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*DeleteFoldersContainerIDResponse, error) {
	rsp, err := c.DeleteFoldersContainerIDRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteFoldersContainerIDResponse(rsp)
}

// GetFoldersContainerID request returning *GetFoldersContainerIDResponse
func (c *ClientWithResponses) GetFoldersContainerID(ctx context.Context, containerId string, params *GetFoldersContainerIDParams, reqEditors ...RequestEditorFn) (*GetFoldersContainerIDResponse, error) {
	rsp, err := c.GetFoldersContainerIDRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetFoldersContainerIDResponse(rsp)
}

// PatchFoldersContainerIDWithBody request with arbitrary body returning *PatchFoldersContainerIDResponse
func (c *ClientWithResponses) PatchFoldersContainerIDWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchFoldersContainerIDResponse, error) {
	rsp, err := c.PatchFoldersContainerIDRawWithBody(ctx, containerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePatchFoldersContainerIDResponse(rsp)
}

func (c *ClientWithResponses) PatchFoldersContainerID(ctx context.Context, containerId string, body PatchFoldersContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchFoldersContainerIDResponse, error) {
	rsp, err := c.PatchFoldersContainerIDRaw(ctx, containerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePatchFoldersContainerIDResponse(rsp)
}

// GetContainersOfAFolder request returning *GetContainersOfAFolderResponse
func (c *ClientWithResponses) GetContainersOfAFolder(ctx context.Context, containerId string, params *GetContainersOfAFolderParams, reqEditors ...RequestEditorFn) (*GetContainersOfAFolderResponse, error) {
	rsp, err := c.GetContainersOfAFolderRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetContainersOfAFolderResponse(rsp)
}

// DeleteFolderLabels request returning *DeleteFolderLabelsResponse
func (c *ClientWithResponses) DeleteFolderLabels(ctx context.Context, containerId string, params *DeleteFolderLabelsParams, reqEditors ...RequestEditorFn) (*DeleteFolderLabelsResponse, error) {
	rsp, err := c.DeleteFolderLabelsRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteFolderLabelsResponse(rsp)
}

// GetAllOrganizations request returning *GetAllOrganizationsResponse
func (c *ClientWithResponses) GetAllOrganizations(ctx context.Context, params *GetAllOrganizationsParams, reqEditors ...RequestEditorFn) (*GetAllOrganizationsResponse, error) {
	rsp, err := c.GetAllOrganizationsRaw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetAllOrganizationsResponse(rsp)
}

// PostOrganizationsWithBody request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostOrganizationsResponse(rsp)
}

// DeleteOrganizationsContainerID request returning *DeleteOrganizationsContainerIDResponse
func (c *ClientWithResponses) DeleteOrganizationsContainerID(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteOrganizationsContainerIDResponse, error) {
	rsp, err := c.DeleteOrganizationsContainerIDRaw(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteOrganizationsContainerIDResponse(rsp)
}

// GetOrganizationsContainerID request returning *GetOrganizationsContainerIDResponse
func (c *ClientWithResponses) GetOrganizationsContainerID(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*GetOrganizationsContainerIDResponse, error) {
	rsp, err := c.GetOrganizationsContainerIDRaw(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetOrganizationsContainerIDResponse(rsp)
}

// PatchOrganizationsContainerIDWithBody request with arbitrary body returning *PatchOrganizationsContainerIDResponse
func (c *ClientWithResponses) PatchOrganizationsContainerIDWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PatchOrganizationsContainerIDResponse, error) {
	rsp, err := c.PatchOrganizationsContainerIDRawWithBody(ctx, containerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePatchOrganizationsContainerIDResponse(rsp)
}

func (c *ClientWithResponses) PatchOrganizationsContainerID(ctx context.Context, containerId string, body PatchOrganizationsContainerIDJSONRequestBody, reqEditors ...RequestEditorFn) (*PatchOrganizationsContainerIDResponse, error) {
	rsp, err := c.PatchOrganizationsContainerIDRaw(ctx, containerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePatchOrganizationsContainerIDResponse(rsp)
}

// GetOrganizationsContainerIDSupport request returning *GetOrganizationsContainerIDSupportResponse
func (c *ClientWithResponses) GetOrganizationsContainerIDSupport(ctx context.Context, containerId string, params *GetOrganizationsContainerIDSupportParams, reqEditors ...RequestEditorFn) (*GetOrganizationsContainerIDSupportResponse, error) {
	rsp, err := c.GetOrganizationsContainerIDSupportRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetOrganizationsContainerIDSupportResponse(rsp)
}

// GetContainersOfAnOrganization request returning *GetContainersOfAnOrganizationResponse
func (c *ClientWithResponses) GetContainersOfAnOrganization(ctx context.Context, containerId string, params *GetContainersOfAnOrganizationParams, reqEditors ...RequestEditorFn) (*GetContainersOfAnOrganizationResponse, error) {
	rsp, err := c.GetContainersOfAnOrganizationRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetContainersOfAnOrganizationResponse(rsp)
}

// DeleteOrganizationsContainerIDLabels request returning *DeleteOrganizationsContainerIDLabelsResponse
func (c *ClientWithResponses) DeleteOrganizationsContainerIDLabels(ctx context.Context, containerId string, params *DeleteOrganizationsContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*DeleteOrganizationsContainerIDLabelsResponse, error) {
	rsp, err := c.DeleteOrganizationsContainerIDLabelsRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteOrganizationsContainerIDLabelsResponse(rsp)
}

// List request returning *ListResponse
func (c *ClientWithResponses) List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.ListRaw(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListResponse(rsp)
}

// CreateWithBody request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses) CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateRawWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

func (c *ClientWithResponses) Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateRaw(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

// Delete request returning *DeleteResponse
func (c *ClientWithResponses) Delete(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.DeleteRaw(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteResponse(rsp)
}

// Get request returning *GetResponse
func (c *ClientWithResponses) Get(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.GetRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetResponse(rsp)
}

// UpdateWithBody request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateRawWithBody(ctx, containerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) Update(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateRaw(ctx, containerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateResponse(rsp)
}

// DeleteProjectContainerIDLabels request returning *DeleteProjectContainerIDLabelsResponse
func (c *ClientWithResponses) DeleteProjectContainerIDLabels(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*DeleteProjectContainerIDLabelsResponse, error) {
	rsp, err := c.DeleteProjectContainerIDLabelsRaw(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteProjectContainerIDLabelsResponse(rsp)
}

// ParseGetFoldersResponse parses an HTTP response from a GetFolders call
func (c *ClientWithResponses) ParseGetFoldersResponse(rsp *http.Response) (*GetFoldersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllFoldersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParsePostFoldersResponse parses an HTTP response from a PostFolders call
func (c *ClientWithResponses) ParsePostFoldersResponse(rsp *http.Response) (*PostFoldersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFoldersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteFoldersContainerIDResponse parses an HTTP response from a DeleteFoldersContainerID call
func (c *ClientWithResponses) ParseDeleteFoldersContainerIDResponse(rsp *http.Response) (*DeleteFoldersContainerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFoldersContainerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetFoldersContainerIDResponse parses an HTTP response from a GetFoldersContainerID call
func (c *ClientWithResponses) ParseGetFoldersContainerIDResponse(rsp *http.Response) (*GetFoldersContainerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFoldersContainerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponseWithParents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParsePatchFoldersContainerIDResponse parses an HTTP response from a PatchFoldersContainerID call
func (c *ClientWithResponses) ParsePatchFoldersContainerIDResponse(rsp *http.Response) (*PatchFoldersContainerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchFoldersContainerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FolderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetContainersOfAFolderResponse parses an HTTP response from a GetContainersOfAFolder call
func (c *ClientWithResponses) ParseGetContainersOfAFolderResponse(rsp *http.Response) (*GetContainersOfAFolderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContainersOfAFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteFolderLabelsResponse parses an HTTP response from a DeleteFolderLabels call
func (c *ClientWithResponses) ParseDeleteFolderLabelsResponse(rsp *http.Response) (*DeleteFolderLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFolderLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetAllOrganizationsResponse parses an HTTP response from a GetAllOrganizations call
func (c *ClientWithResponses) ParseGetAllOrganizationsResponse(rsp *http.Response) (*GetAllOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllOrgResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizations call
func (c *ClientWithResponses) ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteOrganizationsContainerIDResponse parses an HTTP response from a DeleteOrganizationsContainerID call
func (c *ClientWithResponses) ParseDeleteOrganizationsContainerIDResponse(rsp *http.Response) (*DeleteOrganizationsContainerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsContainerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetOrganizationsContainerIDResponse parses an HTTP response from a GetOrganizationsContainerID call
func (c *ClientWithResponses) ParseGetOrganizationsContainerIDResponse(rsp *http.Response) (*GetOrganizationsContainerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsContainerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParsePatchOrganizationsContainerIDResponse parses an HTTP response from a PatchOrganizationsContainerID call
func (c *ClientWithResponses) ParsePatchOrganizationsContainerIDResponse(rsp *http.Response) (*PatchOrganizationsContainerIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PatchOrganizationsContainerIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetOrganizationsContainerIDSupportResponse parses an HTTP response from a GetOrganizationsContainerIDSupport call
func (c *ClientWithResponses) ParseGetOrganizationsContainerIDSupportResponse(rsp *http.Response) (*GetOrganizationsContainerIDSupportResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsContainerIDSupportResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChildrenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetContainersOfAnOrganizationResponse parses an HTTP response from a GetContainersOfAnOrganization call
func (c *ClientWithResponses) ParseGetContainersOfAnOrganizationResponse(rsp *http.Response) (*GetContainersOfAnOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetContainersOfAnOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ContainerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteOrganizationsContainerIDLabelsResponse parses an HTTP response from a DeleteOrganizationsContainerIDLabels call
func (c *ClientWithResponses) ParseDeleteOrganizationsContainerIDLabelsResponse(rsp *http.Response) (*DeleteOrganizationsContainerIDLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrganizationsContainerIDLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseListResponse parses an HTTP response from a List call
func (c *ClientWithResponses) ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseCreateResponse parses an HTTP response from a Create call
func (c *ClientWithResponses) ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteResponse parses an HTTP response from a Delete call
func (c *ClientWithResponses) ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseGetResponse parses an HTTP response from a Get call
func (c *ClientWithResponses) ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectResponseWithParents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseUpdateResponse parses an HTTP response from a Update call
func (c *ClientWithResponses) ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}

// ParseDeleteProjectContainerIDLabelsResponse parses an HTTP response from a DeleteProjectContainerIDLabels call
func (c *ClientWithResponses) ParseDeleteProjectContainerIDLabelsResponse(rsp *http.Response) (*DeleteProjectContainerIDLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectContainerIDLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, validate.ResponseObject(response)
}
