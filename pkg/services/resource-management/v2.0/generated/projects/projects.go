// Package projects provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/oapi-codegen version v0.5.1 DO NOT EDIT.
package projects

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/pkg/errors"

	common "github.com/SchwarzIT/community-stackit-go-client/internal/common"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
	"github.com/do87/oapi-codegen/pkg/runtime"
	openapi_types "github.com/do87/oapi-codegen/pkg/types"
)

// Defines values for LifecycleState.
const (
	ACTIVE   LifecycleState = "ACTIVE"
	CREATING LifecycleState = "CREATING"
	DELETING LifecycleState = "DELETING"
	INACTIVE LifecycleState = "INACTIVE"
)

// Defines values for ParentType.
const (
	PARENT_TYPE_FOLDER       ParentType = "FOLDER"
	PARENT_TYPE_ORGANIZATION ParentType = "ORGANIZATION"
)

// Defines values for ParentListType.
const (
	PARENT_LIST_TYPE_FOLDER       ParentListType = "FOLDER"
	PARENT_LIST_TYPE_ORGANIZATION ParentListType = "ORGANIZATION"
)

// Defines values for ProjectMemberRole.
const (
	PROJECT_ADMIN   ProjectMemberRole = "project.admin"
	PROJECT_AUDITOR ProjectMemberRole = "project.auditor"
	PROJECT_MEMBER  ProjectMemberRole = "project.member"
	PROJECT_OWNER   ProjectMemberRole = "project.owner"
)

// AllProjectsResponse defines model for AllProjectsResponse.
type AllProjectsResponse struct {
	Items []ProjectResponse `json:"items"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used.
	Limit LimitSchema `json:"limit"`

	// Offset The offset of the first item in the collection to return.
	Offset OffsetSchema `json:"offset"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error The reason phrase of the status code.
	Error string `json:"error"`

	// Message Description of the error.
	Message string `json:"message"`

	// Path Path which was called.
	Path string `json:"path"`

	// Status Http Status Code.
	Status float32 `json:"status"`

	// TimeStamp Timestamp at which the error occurred.
	TimeStamp string `json:"timeStamp"`
}

// LifecycleState Lifecycle state of the resource container.
//
// | LIFECYCLE STATE | DESCRIPTION |
// |----------|--------------------|
// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
// | ACTIVE   | Resource container can be fully used. |
// | INACTIVE | Resource container usage has been disabled. |
// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
type LifecycleState string

// LimitSchema The maximum number of projects to return in the response. If not present, an appropriate default will be used.
type LimitSchema = float32

// OffsetSchema The offset of the first item in the collection to return.
type OffsetSchema = float32

// Parent Parent container.
type Parent struct {
	// ContainerId User-friendly identifier of either organization or folder (will replace id).
	ContainerID string `json:"containerId"`

	// Id Legacy identifier of either organization or folder (for backward compatibility). Field name according to parent object of v1.
	ID openapi_types.UUID `json:"id"`

	// Type Container type of parent container.
	Type ParentType `json:"type"`
}

// ParentType Container type of parent container.
type ParentType string

// ParentList defines model for ParentList.
type ParentList = []struct {
	// ContainerId User-friendly identifier of either organization or folder (will replace id).
	ContainerID string `json:"containerId"`

	// ContainerParentId User-friendly parent identifier of either organization or folder (will replace parentId).
	ContainerParentID string `json:"containerParentId"`

	// Id Legacy identifier (for backward compatibility).
	ID openapi_types.UUID `json:"id"`

	// Name Parent container name.
	Name string `json:"name"`

	// ParentId Legacy identifier of the parent resource container (for backward compatibility).
	ParentID openapi_types.UUID `json:"parentId"`

	// Type Parent container type.
	Type ParentListType `json:"type"`
}

// ParentListType Parent container type.
type ParentListType string

// PatchFolderOrProject defines model for PatchFolderOrProject.
type PatchFolderOrProject struct {
	// ContainerParentId New user-friendly parent Id for the resource container.
	ContainerParentID *string `json:"containerParentId,omitempty"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Name New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name *string `json:"name,omitempty"`
}

// ProjectMember defines model for ProjectMember.
type ProjectMember struct {
	Role    *ProjectMemberRole `json:"role,omitempty"`
	Subject *string            `json:"subject,omitempty"`
}

// ProjectMemberRole defines model for ProjectMember.Role.
type ProjectMemberRole string

// ProjectRequestBody defines model for ProjectRequestBody.
type ProjectRequestBody struct {
	// ContainerParentId User-friendly identifier of the parent resource container.
	ContainerParentID string `json:"containerParentId"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Members The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.
	Members []ProjectMember `json:"members"`

	// Name Project name matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name string `json:"name"`
}

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "projectId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the project was created.
	CreationTime string `json:"creationTime"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// LifecycleState Lifecycle state of the resource container.
	//
	// | LIFECYCLE STATE | DESCRIPTION |
	// |----------|--------------------|
	// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
	// | ACTIVE   | Resource container can be fully used. |
	// | INACTIVE | Resource container usage has been disabled. |
	// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
	LifecycleState LifecycleState `json:"lifecycleState"`

	// Name Project name.
	Name string `json:"name"`

	// Parent Parent container.
	Parent Parent `json:"parent"`

	// ProjectId Globally unique, legacy project identifier (for backward compatibility)
	ProjectID openapi_types.UUID `json:"projectId"`

	// UpdateTime Timestamp at which the project was last modified.
	UpdateTime string `json:"updateTime"`
}

// ProjectResponseWithParents defines model for ProjectResponseWithParents.
type ProjectResponseWithParents struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "projectId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the project was created.
	CreationTime string `json:"creationTime"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// LifecycleState Lifecycle state of the resource container.
	//
	// | LIFECYCLE STATE | DESCRIPTION |
	// |----------|--------------------|
	// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
	// | ACTIVE   | Resource container can be fully used. |
	// | INACTIVE | Resource container usage has been disabled. |
	// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
	LifecycleState LifecycleState `json:"lifecycleState"`

	// Name Project name.
	Name string `json:"name"`

	// Parent Parent container.
	Parent  Parent      `json:"parent"`
	Parents *ParentList `json:"parents,omitempty"`

	// ProjectId Globally unique, legacy project identifier (for backward compatibility)
	ProjectID openapi_types.UUID `json:"projectId"`

	// UpdateTime Timestamp at which the project was last modified.
	UpdateTime string `json:"updateTime"`
}

// ResourceLabels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
type ResourceLabels map[string]string

// CreationTimeStart defines model for creation-time-start.
type CreationTimeStart = string

// Limit defines model for limit.
type Limit = float32

// Member defines model for member.
type Member = string

// Offset defines model for offset.
type Offset = float32

// ListParams defines parameters for List.
type ListParams struct {
	// ContainerParentID Container ID from parent container.
	ContainerParentID *string `form:"containerParentID,omitempty" json:"containerParentID,omitempty"`

	// ContainerIDs List of container IDs
	ContainerIDs *[]interface{} `form:"containerIDs,omitempty" json:"containerIDs,omitempty"`

	// Member E-Mail address of the user for whom the visible resource containers should be filtered.
	Member *Member `form:"member,omitempty" json:"member,omitempty"`

	// Offset The offset of the first item in the collection to return.
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used.
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// CreationTimeStart A timestamp to specifiy the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time.
	CreationTimeStart *CreationTimeStart `form:"creation-time-start,omitempty" json:"creation-time-start,omitempty"`
}

// GetParams defines parameters for Get.
type GetParams struct {
	IncludeParents *bool `form:"includeParents,omitempty" json:"includeParents,omitempty"`
}

// DeleteProjectContainerIDLabelsParams defines parameters for DeleteProjectContainerIDLabels.
type DeleteProjectContainerIDLabelsParams struct {
	// Keys Label name.
	Keys *[]interface{} `form:"keys,omitempty" json:"keys,omitempty"`
}

// CreateJSONRequestBody defines body for Create for application/json ContentType.
type CreateJSONRequestBody = ProjectRequestBody

// UpdateJSONRequestBody defines body for Update for application/json ContentType.
type UpdateJSONRequestBody = PatchFolderOrProject

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client common.Client
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, httpClient common.Client) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type ClientInterface interface {
	// List request
	List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Create request with any body
	CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Delete request
	Delete(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Get request
	Get(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Update request with any body
	UpdateWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Update(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProjectContainerIDLabels request
	DeleteProjectContainerIDLabels(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) List(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRequest(ctx, c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Create(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Delete(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRequest(ctx, c.Server, containerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Get(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWithBody(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequestWithBody(ctx, c.Server, containerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Update(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateRequest(ctx, c.Server, containerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProjectContainerIDLabels(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectContainerIDLabelsRequest(ctx, c.Server, containerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListRequest generates requests for List
func NewListRequest(ctx context.Context, server string, params *ListParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.ContainerParentID != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerParentID", runtime.ParamLocationQuery, *params.ContainerParentID); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ContainerIDs != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "containerIDs", runtime.ParamLocationQuery, *params.ContainerIDs); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Member != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "member", runtime.ParamLocationQuery, *params.Member); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CreationTimeStart != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "creation-time-start", runtime.ParamLocationQuery, *params.CreationTimeStart); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateRequest calls the generic Create builder with application/json body
func NewCreateRequest(ctx context.Context, server string, body CreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewCreateRequestWithBody generates requests for Create with any type of body
func NewCreateRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRequest generates requests for Delete
func NewDeleteRequest(ctx context.Context, server string, containerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRequest generates requests for Get
func NewGetRequest(ctx context.Context, server string, containerId string, params *GetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeParents != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeParents", runtime.ParamLocationQuery, *params.IncludeParents); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateRequest calls the generic Update builder with application/json body
func NewUpdateRequest(ctx context.Context, server string, containerId string, body UpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateRequestWithBody(ctx, server, containerId, "application/json", bodyReader)
}

// NewUpdateRequestWithBody generates requests for Update with any type of body
func NewUpdateRequestWithBody(ctx context.Context, server string, containerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectContainerIDLabelsRequest generates requests for DeleteProjectContainerIDLabels
func NewDeleteProjectContainerIDLabelsRequest(ctx context.Context, server string, containerId string, params *DeleteProjectContainerIDLabelsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "containerId", runtime.ParamLocationPath, containerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/projects/%s/labels", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Keys != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keys", runtime.ParamLocationQuery, *params.Keys); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequestWithContext(ctx, "DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, httpClient common.Client) *ClientWithResponses {
	return &ClientWithResponses{NewClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// List request
	ListWithResponse(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error)

	// Create request with any body
	CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	CreateWithResponse(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error)

	// Delete request
	DeleteWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteResponse, error)

	// Get request
	GetWithResponse(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error)

	// Update request with any body
	UpdateWithBodyWithResponse(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	UpdateWithResponse(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error)

	// DeleteProjectContainerIDLabels request
	DeleteProjectContainerIDLabelsWithResponse(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*DeleteProjectContainerIDLabelsResponse, error)
}

type ListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AllProjectsResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r ListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProjectResponse
	JSON400      *ErrorResponse
	JSON403      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r CreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectResponseWithParents
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r GetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectResponse
	JSON403      *ErrorResponse
	JSON404      *ErrorResponse
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r UpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectContainerIDLabelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON409      *ErrorResponse
	Error        error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r DeleteProjectContainerIDLabelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectContainerIDLabelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListWithResponse request returning *ListResponse
func (c *ClientWithResponses) ListWithResponse(ctx context.Context, params *ListParams, reqEditors ...RequestEditorFn) (*ListResponse, error) {
	rsp, err := c.List(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseListResponse(rsp)
}

// CreateWithBodyWithResponse request with arbitrary body returning *CreateResponse
func (c *ClientWithResponses) CreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.CreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

func (c *ClientWithResponses) CreateWithResponse(ctx context.Context, body CreateJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateResponse, error) {
	rsp, err := c.Create(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseCreateResponse(rsp)
}

// DeleteWithResponse request returning *DeleteResponse
func (c *ClientWithResponses) DeleteWithResponse(ctx context.Context, containerId string, reqEditors ...RequestEditorFn) (*DeleteResponse, error) {
	rsp, err := c.Delete(ctx, containerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteResponse(rsp)
}

// GetWithResponse request returning *GetResponse
func (c *ClientWithResponses) GetWithResponse(ctx context.Context, containerId string, params *GetParams, reqEditors ...RequestEditorFn) (*GetResponse, error) {
	rsp, err := c.Get(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseGetResponse(rsp)
}

// UpdateWithBodyWithResponse request with arbitrary body returning *UpdateResponse
func (c *ClientWithResponses) UpdateWithBodyWithResponse(ctx context.Context, containerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.UpdateWithBody(ctx, containerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateResponse(rsp)
}

func (c *ClientWithResponses) UpdateWithResponse(ctx context.Context, containerId string, body UpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateResponse, error) {
	rsp, err := c.Update(ctx, containerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseUpdateResponse(rsp)
}

// DeleteProjectContainerIDLabelsWithResponse request returning *DeleteProjectContainerIDLabelsResponse
func (c *ClientWithResponses) DeleteProjectContainerIDLabelsWithResponse(ctx context.Context, containerId string, params *DeleteProjectContainerIDLabelsParams, reqEditors ...RequestEditorFn) (*DeleteProjectContainerIDLabelsResponse, error) {
	rsp, err := c.DeleteProjectContainerIDLabels(ctx, containerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParseDeleteProjectContainerIDLabelsResponse(rsp)
}

// ParseListResponse parses an HTTP response from a ListWithResponse call
func (c *ClientWithResponses) ParseListResponse(rsp *http.Response) (*ListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AllProjectsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseCreateResponse parses an HTTP response from a CreateWithResponse call
func (c *ClientWithResponses) ParseCreateResponse(rsp *http.Response) (*CreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteResponse parses an HTTP response from a DeleteWithResponse call
func (c *ClientWithResponses) ParseDeleteResponse(rsp *http.Response) (*DeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseGetResponse parses an HTTP response from a GetWithResponse call
func (c *ClientWithResponses) ParseGetResponse(rsp *http.Response) (*GetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectResponseWithParents
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateResponse parses an HTTP response from a UpdateWithResponse call
func (c *ClientWithResponses) ParseUpdateResponse(rsp *http.Response) (*UpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteProjectContainerIDLabelsResponse parses an HTTP response from a DeleteProjectContainerIDLabelsWithResponse call
func (c *ClientWithResponses) ParseDeleteProjectContainerIDLabelsResponse(rsp *http.Response) (*DeleteProjectContainerIDLabelsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectContainerIDLabelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.Error = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("body was: %s", string(bodyBytes)))
		}
		response.JSON409 = &dest

	}

	return response, nil
}
