// Package private provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/do87/oapi-codegen version v0.5.0 DO NOT EDIT.
package private

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	common "github.com/SchwarzIT/community-stackit-go-client/internal/common"
	"github.com/SchwarzIT/community-stackit-go-client/pkg/validate"
	openapi_types "github.com/do87/oapi-codegen/pkg/types"
)

// Defines values for LifecycleState.
const (
	ACTIVE   LifecycleState = "ACTIVE"
	CREATING LifecycleState = "CREATING"
	DELETING LifecycleState = "DELETING"
	INACTIVE LifecycleState = "INACTIVE"
)

// Defines values for OrganizationMemberRole.
const (
	ORGANIZATION_ADMIN   OrganizationMemberRole = "organization.admin"
	ORGANIZATION_AUDITOR OrganizationMemberRole = "organization.auditor"
	ORGANIZATION_MEMBER  OrganizationMemberRole = "organization.member"
	ORGANIZATION_OWNER   OrganizationMemberRole = "organization.owner"
)

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error The reason phrase of the status code.
	Error string `json:"error"`

	// Message Description of the error.
	Message string `json:"message"`

	// Path Path which was called.
	Path string `json:"path"`

	// Status Http Status Code.
	Status float32 `json:"status"`

	// TimeStamp Timestamp at which the error occurred.
	TimeStamp time.Time `json:"timeStamp"`
}

// LifecycleState Lifecycle state of the resource container.
//
// | LIFECYCLE STATE | DESCRIPTION |
// |----------|--------------------|
// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
// | ACTIVE   | Resource container can be fully used. |
// | INACTIVE | Resource container usage has been disabled. |
// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
type LifecycleState string

// OrganizationMember defines model for OrganizationMember.
type OrganizationMember struct {
	// Role Unique name of the role.
	Role OrganizationMemberRole `json:"role"`

	// Subject Unique identifier of the user, service account, or client.
	Subject string `json:"subject"`
}

// OrganizationMemberRole Unique name of the role.
type OrganizationMemberRole string

// OrganizationRequestBody defines model for OrganizationRequestBody.
type OrganizationRequestBody struct {
	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// Members The initial members that are assigned to the organization. At least one subject needs to be a user and not a client or service account.
	Members []OrganizationMember `json:"members"`

	// Name The name for the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.
	Name string `json:"name"`
}

// OrganizationResponse defines model for OrganizationResponse.
type OrganizationResponse struct {
	// ContainerId Globally unique, user-friendly identifier. Will replace old, legacy identifier "organizationId".
	ContainerID string `json:"containerId"`

	// CreationTime Timestamp at which the organization was created.
	CreationTime time.Time `json:"creationTime"`

	// Labels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
	// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
	Labels *ResourceLabels `json:"labels,omitempty"`

	// LifecycleState Lifecycle state of the resource container.
	//
	// | LIFECYCLE STATE | DESCRIPTION |
	// |----------|--------------------|
	// | CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |
	// | ACTIVE   | Resource container can be fully used. |
	// | INACTIVE | Resource container usage has been disabled. |
	// | DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |
	LifecycleState LifecycleState `json:"lifecycleState"`

	// Name Organization name.
	Name string `json:"name"`

	// OrganizationId Globally unique, legacy organization identifier (for backward compatibility)
	OrganizationID openapi_types.UUID `json:"organizationId"`

	// UpdateTime Timestamp at which the organization was last modified.
	UpdateTime time.Time `json:"updateTime"`
}

// ResourceLabels Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies.
// - A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
// - A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.
type ResourceLabels map[string]string

// PostOrganizationsJSONRequestBody defines body for PostOrganizations for application/json ContentType.
type PostOrganizationsJSONRequestBody = OrganizationRequestBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client common.Client
}

// Creates a new Client, with reasonable defaults
func NewClient(server string, httpClient common.Client) *Client {
	// create a client with sane default values
	client := Client{
		Server: server,
		Client: httpClient,
	}
	return &client
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostOrganizations request with any body
	PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostOrganizationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequestWithBody(ctx, c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizations(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsRequest(ctx, c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostOrganizationsRequest calls the generic PostOrganizations builder with application/json body
func NewPostOrganizationsRequest(ctx context.Context, server string, body PostOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsRequestWithBody(ctx, server, "application/json", bodyReader)
}

// NewPostOrganizationsRequestWithBody generates requests for PostOrganizations with any type of body
func NewPostOrganizationsRequestWithBody(ctx context.Context, server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequestWithContext(ctx, "POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, httpClient common.Client) *ClientWithResponses {
	return &ClientWithResponses{NewClient(server, httpClient)}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostOrganizations request with any body
	PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)

	PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error)
}

type PostOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrganizationResponse
	JSON400      *ErrorResponse
	JSON409      *ErrorResponse
	HasError     error // Aggregated error
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostOrganizationsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsResponse
func (c *ClientWithResponses) PostOrganizationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsWithResponse(ctx context.Context, body PostOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsResponse, error) {
	rsp, err := c.PostOrganizations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return c.ParsePostOrganizationsResponse(rsp)
}

// ParsePostOrganizationsResponse parses an HTTP response from a PostOrganizationsWithResponse call
func (c *ClientWithResponses) ParsePostOrganizationsResponse(rsp *http.Response) (*PostOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}
	response.HasError = validate.DefaultResponseErrorHandler(rsp)

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}
