{
  "openapi": "3.1.0",
  "info": {
    "title": "Resource Manager API",
    "version": "2.0",
    "description": "API v2 to manage resource containers - organizations, folders, projects incl. labels\n\n### Resource Management\nSTACKIT resource management handles the terms _Organization_, _Folder_, _Project_, _Label_, and the hierarchical structure between them. Technically, organizations, \nfolders, and projects are _Resource Containers_ to which a _Label_ can be attached to. The STACKIT _Resource Manager_ provides CRUD endpoints to query and to modify the state.\n\n### Resource Hierarchy\nSTACKIT resource hierarchy defines the relationship of resource containers as tree structure with organizations as the root node. Folders and projects are optional \nchild elements referencing the organization as parent. STACKIT resource hierarchy allows to structure cloud-resources clearly providing flexibility and individuality \nfor fine grained access control, access inheritance, and policies.\n\nThe STACKIT resource hierarchy model can be compared to the folder concept of a Unix file system. A folder can have exactly one parent. Folder nesting allows to organize and to structure content while defining \nfine grained access permissions per folder. Within STACKIT resource hierarchy access is inherited, meaning if you have access to a resource container, you also have access to its child containers.\n- Users are assigned to resource containers as members by role\n- A user inherits permissions to all child containers\n\n### Organizations\nSTACKIT organizations are the base element to create and to use cloud-resources. An organization is bound to one customer account. Organizations have a lifecycle.\n- Organizations are always the root node in resource hierarchy and do not have a parent\n\n### Folders\nSTACKIT folders allow to organize cloud-resources and to define fine-grained access control. A folder might represent departments, teams, user groups, components etc. \nFolders do not have a lifecycle as they act as structural element only.\n- Folders are optional\n- A folder can be created having either an organization, or a folder as parent\n- Folder names under the same parent must be unique (case insensitive)\n- Root organization cannot be changed\n\n### Projects\nSTACKIT projects are needed to use cloud-resources. Projects serve as wrapper for underlying technical structures and processes. Projects have a lifecycle. Projects compared to folders may have different policies.\n- Projects are optional, but mandatory for cloud-resource usage\n- A project can be created having either an organization, or a folder as parent\n- A project must not have a project as parent\n- Project names under the same parent must not be unique\n- Root organization cannot be changed\n\n### Label\nSTACKIT labels are key-value pairs including a resource container reference. Labels can be defined and attached freely to resource containers by which resources can be organized and queried.\n- Policy-based, immutable labels may exists\n\n### Current Limits\n- Vertically - Maximum folder nesting level: 5\n- Horizontally - Maximum number of folders under one parent: 150\n- Maximum number of projects under one organization: 2.500\n- Maximum number of labels attached to one container: 100\n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->",
    "contact": {
      "name": "SIT-STACKIT-Core-Platform-Security",
      "url": "https://developers.stackit.schwarz/",
      "email": "SIT-STACKIT-Core-Platform-Security@mail.schwarz"
    },
    "summary": "API to manage resource containers - organizations, folders, projects"
  },
  "servers": [
    {
      "url": "https://api.stackit.cloud/resource-management/v2",
      "description": "prod"
    },
    {
      "url": "https://api-qa.stackit.cloud/resource-management/v2",
      "description": "qa"
    },
    {
      "url": "https://api-dev.stackit.cloud/resource-management/v2",
      "description": "dev"
    }
  ],
  "paths": {
    "/projects": {
      "post": {
        "summary": "Create Project",
        "tags": [
          "Projects"
        ],
        "responses": {
          "201": {
            "description": "Project created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "operationId": "post-projects",
        "description": "Create a new project. \n- The request is synchronous, but the workflow-based creation is asynchronous.\n- Lifecycle state remains in CREATING, until workflow completes",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProjectRequestBody"
              }
            }
          }
        }
      },
      "get": {
        "summary": "Get All Projects",
        "operationId": "get-all-projects",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllProjectsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "containerParentId",
            "description": "Container ID from parent container."
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "containerIds",
            "description": "List of container IDs"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          }
        ],
        "description": "Returns all projects and their metadata that: \n- Are children of the specific containerParentId\n- Match the given containerIds\n- User is member of\n\nFilter:\n- Either containerParentId OR containerIds OR member must be passed\n- If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent\n- If member and containerParentId are given, both are used for filtering\n- If member is given, containers must not point to the same container parent",
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{containerId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "in": "path",
          "required": true,
          "description": "The user-friendly project identifier. Preferable the containerId, but for migration purpose, the legacy uuid of the project is accepted as well."
        }
      ],
      "get": {
        "summary": "Get Project Details",
        "operationId": "get-projects-containerId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponseWithParents"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          }
        },
        "description": "Returns the project and its metadata.",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query",
            "name": "includeParents"
          }
        ]
      },
      "delete": {
        "summary": "Delete Project",
        "operationId": "delete-projects-containerId",
        "responses": {
          "202": {
            "description": "Deletion process triggered"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Triggers the deletion of a project. \n- The request is synchronous, but the workflow-based deletion is asynchronous\n- Lifecycle state remains in DELETING, until workflow completes",
        "tags": [
          "Projects"
        ]
      },
      "patch": {
        "summary": "Update Project",
        "operationId": "patch-projects-containerId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Update the project and its metadata.\n- Update project name \n- Update project labels \n- Update project parent (folder or organization)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchFolderOrProject"
              }
            }
          }
        },
        "tags": [
          "Projects"
        ]
      }
    },
    "/projects/{containerId}/labels": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "description": "Preferable the containerId, but for migration purpose, the legacy uuid of the organization is accepted as well.",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete Project Labels",
        "operationId": "delete-project-containerId-labels",
        "responses": {
          "202": {
            "description": "Labels removed"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Deletes all project labels by given keys.\n- Specific labels may be deleted by key(s)\n- If no key is specified, all labels will be deleted!",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "keys",
            "description": "Label name."
          }
        ]
      }
    },
    "/organizations": {
      "post": {
        "summary": "Create Organization",
        "operationId": "post-organizations",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrganizationRequestBody"
              }
            }
          }
        },
        "description": "Request to create a new organization. \n- The request is synchronous, the creation process is asynchronous\n- It may take a moment, until organization creation is synchronized to all sub-systems",
        "tags": [
          "Private"
        ]
      },
      "get": {
        "summary": "Get All Organizations",
        "operationId": "get-all-organizations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllOrgResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "containerIds",
            "description": "Preferable the containerIds, but for migration purpose, the legacy uuids of the organizations are accepted as well."
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          }
        ],
        "description": "Returns all organizations and their metadata.\n- If no containerIds are specified, all organizations are returned, if permitted\n- ContainerIds may be set to filter\n- Member may be set to filter\n- If member and containerIds are given, both are used for filtering\n",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/organizations/{containerId}": {
      "get": {
        "summary": "Get Organization Details",
        "tags": [
          "Organizations"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-organizations-containerId",
        "description": "Returns the organization and its metadata."
      },
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "description": "Preferable the containerId, but for migration purpose, the legacy uuid of the organization is accepted as well.",
          "in": "path",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Organization",
        "operationId": "patch-organizations-containerId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationResponse"
                },
                "examples": {}
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Update the organization and its metadata.\n- Update organization name\n- Update organization labels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchOrganizationRequestBody"
              }
            }
          }
        },
        "tags": [
          "Organizations"
        ]
      },
      "delete": {
        "summary": "Delete Organization",
        "operationId": "delete-organizations-containerId",
        "responses": {
          "202": {
            "description": "Deletion process triggered"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Trigger organization deletion.\n- The request is synchronous, the deletion process is asynchronous.\n- Lifecycle state remains in DELETING, until process completes\n- Organization must not be parent of any other container",
        "tags": [
          "Organizations"
        ]
      }
    },
    "/organizations/{containerId}/labels": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "description": "Preferable the containerId, but for migration purpose, the legacy uuid of the organization is accepted as well.",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete Organization Labels",
        "operationId": "delete-organizations-containerId-labels",
        "responses": {
          "202": {
            "description": "Labels removed"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Deletes all organization labels by given keys.\n- Specific labels may be deleted by key(s)\n- If no key is specified, all labels will be deleted!",
        "tags": [
          "Organizations"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "keys",
            "description": "Label name."
          }
        ]
      }
    },
    "/organizations/{containerId}/containers": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "description": "Preferable the containerId, but for migration purpose, the legacy uuid of the organization is accepted as well.",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Containers Of An Organization",
        "tags": [
          "Organizations"
        ],
        "responses": {
          "200": {
            "description": "OK ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Organization Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-containers-of-an-organization",
        "parameters": [
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/recursive"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "folder",
                "project"
              ]
            },
            "in": "query",
            "name": "type",
            "description": "If given, only children of specified type will be returned."
          }
        ],
        "description": "Returns all direct resource container under this organization including their metadata.\n- Response items will contain all folders first, followed by all projects\n- If organization does not have any containers, an empty items list will be returned"
      }
    },
    "/organizations/{containerId}/children": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "description": "Preferable the containerId, but for migration purpose, the legacy uuid of the organization is accepted as well.",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Children Of An Organization [deprecated]",
        "tags": [
          "Organizations"
        ],
        "responses": {
          "200": {
            "description": "OK ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChildrenResponse"
                }
              }
            }
          },
          "404": {
            "description": "Organization Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Organization Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-organizations-containerId-support",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "folder",
                "project"
              ]
            },
            "in": "query",
            "name": "type",
            "description": "If given, only children of specified type will be returned."
          }
        ],
        "description": "Returns all children including their metadata. \n- Response items will contain all folders first, followed by all projects\n- If organization does not have any children, an empty items list will be returned\n\n**Update:** A new v2 API variant is offered here, see `getContainersOfAnOrganization`. This API ist deprecated and will be removed soon!"
      }
    },
    "/folders": {
      "post": {
        "summary": "Create Folder",
        "operationId": "post-folders",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Create a new folder.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FolderRequestBody"
              }
            }
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "get": {
        "summary": "Get All Folders",
        "operationId": "get-folders",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllFoldersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "containerParentId",
            "description": "container Id of the parent resource container."
          },
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "containerIds",
            "description": "List of user-friendly container Ids."
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/creation-time-start"
          }
        ],
        "description": "Returns all folders and their metadata that: \n- Are children of the specific containerParentId\n- Match the given containerIds\n- User is member of <br />\n\nFilter:\n- Either containerParentId OR containerIds OR member must be passed\n- If containerId and containerParentId are given, both are used for filtering - containers must point to the same parent\n- If member and containerParentId are given, both are used for filtering\n- If member is given, containers must not point to the same container parent\n",
        "tags": [
          "Folders"
        ]
      }
    },
    "/folders/{containerId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Folder Details",
        "tags": [
          "Folders"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponseWithParents"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-folders-containerId",
        "description": "Returns all metadata for a specific folder.",
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query",
            "name": "includeParents"
          }
        ]
      },
      "patch": {
        "summary": "Update Folder",
        "operationId": "patch-folders-containerId",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FolderResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Forbidden": {
                    "$ref": "#/components/examples/Forbidden"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Update the folder and its metadata.\n- Update folder name\n- Update folder labels\n- Update folder parent (folder or organization)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchFolderOrProject"
              }
            }
          }
        },
        "tags": [
          "Folders"
        ]
      },
      "delete": {
        "summary": "Delete Folder",
        "operationId": "delete-folders-containerId",
        "parameters": [
          {
            "schema": {
              "type": "boolean",
              "default": false
            },
            "in": "query",
            "name": "force",
            "description": "If true, all nested, empty folders are deleted recursively - if no project is attached!"
          }
        ],
        "responses": {
          "202": {
            "description": "Deletion process triggered"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Not Found": {
                    "$ref": "#/components/examples/NotFound"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Conflict": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Delete a folder and its metadata.\n- Folder must not be parent of any other container\n- A force flag may be set, deleting all underlying folders recursively - if no project is attached!",
        "tags": [
          "Folders"
        ]
      }
    },
    "/folders/{containerId}/containers": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "in": "path",
          "required": true
        }
      ],
      "get": {
        "summary": "Get Containers Of A Folder",
        "tags": [
          "Folders"
        ],
        "responses": {
          "200": {
            "description": "OK ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContainerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Bad Request": {
                    "$ref": "#/components/examples/BadRequest"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-containers-of-a-folder",
        "parameters": [
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/cursor"
          },
          {
            "$ref": "#/components/parameters/member"
          },
          {
            "schema": {
              "type": "string",
              "enum": [
                "folder",
                "project"
              ]
            },
            "in": "query",
            "name": "type",
            "description": "If given, only children of specified type will be returned."
          }
        ],
        "description": "Returns all direct resource container under this folder including their metadata. \n- Response items will contain all folders first, followed by all projects\n- If a folder does not have any containers, an empty items list will be returned\n\n**Note:** Recursion is not supported - meaning only the next level in hierarchy tree is considered!"
      }
    },
    "/folders/{containerId}/labels": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "containerId",
          "in": "path",
          "required": true
        }
      ],
      "delete": {
        "summary": "Delete Folder Labels",
        "operationId": "delete-folder-labels",
        "responses": {
          "202": {
            "description": "Labels removed"
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                },
                "examples": {
                  "Cannot delete label because of policy": {
                    "$ref": "#/components/examples/PolicyConflict"
                  }
                }
              }
            }
          }
        },
        "description": "Deletes all folder labels by given keys.\n- Specific labels may be deleted by key(s)\n- If no key is specified, all labels will be deleted!",
        "tags": [
          "Folders"
        ],
        "parameters": [
          {
            "schema": {
              "type": "array"
            },
            "in": "query",
            "name": "keys",
            "description": "Label name."
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ResourceLabels": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        },
        "description": "Labels are key-value string pairs which can be attached to a resource container. Some labels may be enforced via policies. \n- A label key must match the regex `[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.\n- A label value must match the regex `^$|[A-ZÄÜÖa-zäüöß0-9_-]{1,64}`.",
        "examples": [
          {
            "billingReference": "T-0012535B",
            "scope": "PUBLIC"
          }
        ],
        "title": "Labels",
        "maxProperties": 100
      },
      "LifecycleState": {
        "type": "string",
        "enum": [
          "CREATING",
          "ACTIVE",
          "DELETING",
          "INACTIVE"
        ],
        "description": "Lifecycle state of the resource container.\n\n| LIFECYCLE STATE | DESCRIPTION |\n|----------|--------------------|\n| CREATING | The creation process has been triggered. The state remains until resource manager gets notified about successful process completion. |\n| ACTIVE   | Resource container can be fully used. |\n| INACTIVE | Resource container usage has been disabled. |\n| DELETING | The deletion process has been triggered. The state remains until resource manager gets notified about successful process completion. Afterwards, the record will be deleted. |",
        "title": "LifecycleState",
        "example": "CREATING"
      },
      "ProjectRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$",
            "example": "My first project"
          },
          "containerParentId": {
            "type": "string",
            "description": "User-friendly identifier of the parent resource container.",
            "example": "name-of-parent-173523"
          },
          "members": {
            "type": "array",
            "uniqueItems": true,
            "minItems": 1,
            "description": "The initial members assigned to the project. At least one subject needs to be a user, and not a client or service account.",
            "items": {
              "$ref": "#/components/schemas/ProjectMember"
            }
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        },
        "required": [
          "name",
          "containerParentId",
          "members"
        ]
      },
      "PatchFolderOrProject": {
        "description": null,
        "type": "object",
        "title": "PatchFolderOrProject",
        "properties": {
          "name": {
            "type": "string",
            "description": "New name for the resource container matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$"
          },
          "containerParentId": {
            "type": "string",
            "description": "New user-friendly parent Id for the resource container.",
            "example": "name-of-parent-173523"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        }
      },
      "ProjectResponse": {
        "type": "object",
        "title": "ProjectResponse",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name. ",
            "example": "My first project"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "containerId": {
            "type": "string",
            "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"projectId\".",
            "example": "my-first-project-45789"
          },
          "projectId": {
            "type": "string",
            "description": "Globally unique, legacy project identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
            "format": "uuid"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "updateTime": {
            "type": "string",
            "description": "Timestamp at which the project was last modified.",
            "example": "2021-08-24T14:15:22Z"
          },
          "creationTime": {
            "type": "string",
            "description": "Timestamp at which the project was created.",
            "example": "2021-08-24T14:15:22Z"
          }
        },
        "required": [
          "name",
          "parent",
          "containerId",
          "projectId",
          "lifecycleState",
          "updateTime",
          "creationTime"
        ]
      },
      "ProjectResponseWithParents": {
        "type": "object",
        "title": "ProjectResponse",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project name. ",
            "example": "My first project"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "containerId": {
            "type": "string",
            "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"projectId\".",
            "example": "my-first-project-45789"
          },
          "projectId": {
            "type": "string",
            "description": "Globally unique, legacy project identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f66-fb23c348fee3",
            "format": "uuid"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "parents": {
            "$ref": "#/components/schemas/ParentList"
          },
          "updateTime": {
            "type": "string",
            "description": "Timestamp at which the project was last modified.",
            "example": "2021-08-24T14:15:22Z"
          },
          "creationTime": {
            "type": "string",
            "description": "Timestamp at which the project was created.",
            "example": "2021-08-24T14:15:22Z"
          }
        },
        "required": [
          "name",
          "parent",
          "containerId",
          "projectId",
          "lifecycleState",
          "updateTime",
          "creationTime"
        ]
      },
      "AllProjectsResponse": {
        "type": "object",
        "title": "AllProjectResponse",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectResponse"
            }
          },
          "offset": {
            "$ref": "#/components/schemas/OffsetSchema"
          },
          "limit": {
            "$ref": "#/components/schemas/LimitSchema"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ]
      },
      "OrganizationResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Organization name.",
            "example": "My Organization"
          },
          "containerId": {
            "type": "string",
            "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"organizationId\".",
            "example": "my-organization-184629"
          },
          "organizationId": {
            "type": "string",
            "description": "Globally unique, legacy organization identifier (for backward compatibility)",
            "example": "54066bf4-2bff-4f7b-9f83-fb23c348fee3",
            "format": "uuid"
          },
          "lifecycleState": {
            "$ref": "#/components/schemas/LifecycleState"
          },
          "creationTime": {
            "type": "string",
            "description": "Timestamp at which the organization was created.",
            "example": "2021-08-24T14:15:22Z"
          },
          "updateTime": {
            "type": "string",
            "description": "Timestamp at which the organization was last modified.",
            "example": "2021-08-24T14:15:22Z"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        },
        "required": [
          "name",
          "containerId",
          "organizationId",
          "lifecycleState",
          "creationTime",
          "updateTime"
        ]
      },
      "OrganizationRequestBody": {
        "type": "object",
        "title": "OrganizationRequestBody",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name for the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$",
            "example": "My Organization"
          },
          "members": {
            "type": "array",
            "description": "The initial members that are assigned to the organization. At least one subject needs to be a user and not a client or service account. ",
            "items": {
              "$ref": "#/components/schemas/OrganizationMember"
            }
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        },
        "required": [
          "name",
          "members"
        ]
      },
      "PatchOrganizationRequestBody": {
        "title": "PatchOrganizationRequestBody",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name of the organization matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$",
            "example": "My Organization"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        }
      },
      "AllOrgResponse": {
        "title": "AllOrgResponse",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "minItems": 0,
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the organization.",
                  "example": "My Organization"
                },
                "containerId": {
                  "type": "string",
                  "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"organizationId\".",
                  "example": "my-organization-156846"
                },
                "organizationId": {
                  "type": "string",
                  "description": "Globally unique, legacy organization identifier (for backward compatibility)",
                  "example": "54066bf4-2bff-4f7b-9f83-fb23c348fee3",
                  "format": "uuid"
                },
                "lifecycleState": {
                  "$ref": "#/components/schemas/LifecycleState"
                },
                "creationTime": {
                  "type": "string",
                  "description": "Timestamp at which the organization was created.",
                  "example": "2021-08-24T14:15:22Z"
                },
                "updateTime": {
                  "type": "string",
                  "description": "Timestamp at which the organization was last modified.",
                  "example": "2021-08-24T14:15:22Z"
                }
              },
              "required": [
                "name",
                "containerId",
                "organizationId",
                "lifecycleState",
                "creationTime",
                "updateTime"
              ]
            }
          },
          "offset": {
            "$ref": "#/components/schemas/OffsetSchema"
          },
          "limit": {
            "$ref": "#/components/schemas/LimitSchema"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ]
      },
      "ContainerResponse": {
        "title": "Children",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Resource container type.",
                      "enum": [
                        "FOLDER"
                      ],
                      "example": "FOLDER"
                    },
                    "item": {
                      "$ref": "#/components/schemas/FolderResponse"
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                },
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "PROJECT"
                      ],
                      "description": "Resource container type.",
                      "example": "PROJECT"
                    },
                    "item": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                }
              ],
              "type": "object"
            }
          },
          "cursor": {
            "$ref": "#/components/schemas/CursorSchema"
          },
          "limit": {
            "$ref": "#/components/schemas/LimitSchema"
          }
        },
        "required": [
          "limit",
          "cursor",
          "items"
        ]
      },
      "ChildrenResponse": {
        "title": "Children",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Resource container type.",
                      "enum": [
                        "FOLDER"
                      ],
                      "example": "FOLDER"
                    },
                    "item": {
                      "$ref": "#/components/schemas/FolderResponse"
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                },
                {
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "PROJECT"
                      ],
                      "description": "Resource container type.",
                      "example": "PROJECT"
                    },
                    "item": {
                      "$ref": "#/components/schemas/ProjectResponse"
                    }
                  },
                  "required": [
                    "type",
                    "item"
                  ]
                }
              ],
              "type": "object"
            }
          },
          "offset": {
            "$ref": "#/components/schemas/OffsetSchema"
          },
          "limit": {
            "$ref": "#/components/schemas/LimitSchema"
          }
        },
        "required": [
          "limit",
          "offset",
          "items"
        ]
      },
      "FolderResponse": {
        "description": "A Folder can have another folder as parent. 5 levels of nested folders are permitted.",
        "type": "object",
        "title": "FolderResponse",
        "properties": {
          "name": {
            "type": "string",
            "description": "Folder name.",
            "example": "First Folder"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "containerId": {
            "type": "string",
            "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"folderId\".",
            "example": "first-folder-158955"
          },
          "folderId": {
            "type": "string",
            "description": "Globally unique, legacy folder identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
            "format": "uuid"
          },
          "creationTime": {
            "type": "string",
            "description": "Timestamp at which the folder was created.",
            "example": "2021-08-24T14:15:22Z"
          },
          "updateTime": {
            "type": "string",
            "description": "Timestamp at which the folder was last modified.",
            "example": "2021-08-24T14:15:22Z"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        },
        "required": [
          "name",
          "containerId",
          "folderId",
          "creationTime",
          "updateTime",
          "parent"
        ]
      },
      "FolderResponseWithParents": {
        "description": "A Folder can have another folder as parent. 5 levels of nested folders are permitted.",
        "type": "object",
        "title": "FolderResponse",
        "properties": {
          "name": {
            "type": "string",
            "description": "Folder name.",
            "example": "First Folder"
          },
          "parent": {
            "$ref": "#/components/schemas/Parent"
          },
          "containerId": {
            "type": "string",
            "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"folderId\".",
            "example": "first-folder-158955"
          },
          "folderId": {
            "type": "string",
            "description": "Globally unique, legacy folder identifier (for backward compatibility)",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
            "format": "uuid"
          },
          "creationTime": {
            "type": "string",
            "description": "Timestamp at which the folder was created.",
            "example": "2021-08-24T14:15:22Z"
          },
          "updateTime": {
            "type": "string",
            "description": "Timestamp at which the folder was last modified.",
            "example": "2021-08-24T14:15:22Z"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          },
          "parents": {
            "$ref": "#/components/schemas/ParentList"
          }
        },
        "required": [
          "name",
          "containerId",
          "folderId",
          "creationTime",
          "updateTime",
          "parent"
        ]
      },
      "FolderRequestBody": {
        "title": "FolderRequestBody",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the folder matching the regex `^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$`.",
            "pattern": "^[a-zA-ZäüöÄÜÖ0-9][ a-zA-ZäüöÄÜÖß0-9_+&-]{1,39}$",
            "example": "My Folder"
          },
          "containerParentId": {
            "type": "string",
            "description": "User-friendly Id of the parent resource container.",
            "example": "name-of-parent-173523"
          },
          "labels": {
            "$ref": "#/components/schemas/ResourceLabels"
          }
        },
        "required": [
          "name",
          "containerParentId"
        ]
      },
      "AllFoldersResponse": {
        "title": "AllFoldersResponse",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the folder.",
                  "example": "My Folder"
                },
                "parent": {
                  "$ref": "#/components/schemas/Parent"
                },
                "containerId": {
                  "type": "string",
                  "description": "Globally unique, user-friendly identifier. Will replace old, legacy identifier \"folderId\".",
                  "example": "first-folder-158955"
                },
                "folderId": {
                  "type": "string",
                  "description": "Globally unique, legacy folder identifier (for backward compatibility)",
                  "example": "54066bf4-1aff-4f7b-9f83-fb23c348fff3",
                  "format": "uuid"
                },
                "creationTime": {
                  "type": "string",
                  "description": "Timestamp at which the folder was created.",
                  "example": "2020-08-24T14:15:22Z"
                },
                "updateTime": {
                  "type": "string",
                  "description": "Timestamp at which the folder was created.",
                  "example": "2020-08-24T14:15:22Z"
                },
                "labels": {
                  "$ref": "#/components/schemas/ResourceLabels"
                }
              },
              "required": [
                "name",
                "parent",
                "containerId",
                "folderId",
                "creationTime",
                "updateTime"
              ]
            }
          },
          "offset": {
            "$ref": "#/components/schemas/OffsetSchema"
          },
          "limit": {
            "$ref": "#/components/schemas/LimitSchema"
          }
        },
        "required": [
          "items",
          "offset",
          "limit"
        ]
      },
      "OrganizationMember": {
        "type": "object",
        "properties": {
          "subject": {
            "type": "string",
            "description": "Unique identifier of the user, service account, or client.",
            "example": "max.musterman@mail.schwarz"
          },
          "role": {
            "type": "string",
            "description": "Unique name of the role. ",
            "enum": [
              "organization.owner",
              "organization.admin",
              "organization.member",
              "organization.auditor"
            ]
          }
        },
        "required": [
          "subject",
          "role"
        ]
      },
      "ProjectMember": {
        "title": "ProjectMember",
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": [
              "project.owner",
              "project.member",
              "project.admin",
              "project.auditor"
            ],
            "example": "project.owner"
          },
          "subject": {
            "type": "string",
            "example": "max.mustermann@schwarz.mail"
          }
        }
      },
      "Parent": {
        "type": "object",
        "description": "Parent container.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Legacy identifier of either organization or folder (for backward compatibility). Field name according to parent object of v1.",
            "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3",
            "format": "uuid"
          },
          "containerId": {
            "type": "string",
            "description": "User-friendly identifier of either organization or folder (will replace id).",
            "example": "container-name-Rq86WY1"
          },
          "type": {
            "type": "string",
            "enum": [
              "ORGANIZATION",
              "FOLDER"
            ],
            "description": "Container type of parent container.",
            "example": "ORGANIZATION"
          }
        },
        "required": [
          "containerId",
          "id",
          "type"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "timeStamp": {
            "type": "string",
            "description": "Timestamp at which the error occurred.",
            "example": "2019-08-24T14:15:22Z"
          },
          "path": {
            "type": "string",
            "description": "Path which was called.",
            "example": "/path/where/error/occurred"
          },
          "status": {
            "type": "number",
            "description": "Http Status Code.",
            "example": 400
          },
          "error": {
            "type": "string",
            "description": "The reason phrase of the status code.",
            "example": "Bad Request"
          },
          "message": {
            "type": "string",
            "description": "Description of the error.",
            "example": "Validation of {param} failed."
          }
        },
        "required": [
          "timeStamp",
          "path",
          "status",
          "error",
          "message"
        ]
      },
      "ParentList": {
        "title": "ParentList",
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "name": {
              "description": "Parent container name.",
              "type": "string",
              "example": "My Organization"
            },
            "type": {
              "description": "Parent container type.",
              "type": "string",
              "enum": [
                "FOLDER",
                "ORGANIZATION"
              ],
              "example": "ORGANIZATION"
            },
            "parentId": {
              "type": "string",
              "description": "Legacy identifier of the parent resource container (for backward compatibility).",
              "format": "uuid",
              "example": "54066bf4-1aff-4f7b-9f83-fb23c348fee3"
            },
            "id": {
              "type": "string",
              "description": "Legacy identifier (for backward compatibility).",
              "format": "uuid",
              "example": "910a3330-8fad-42a7-ab2d-f214633cf047"
            },
            "containerId": {
              "type": "string",
              "description": "User-friendly identifier of either organization or folder (will replace id).",
              "example": "container-name-Rq86WY1"
            },
            "containerParentId": {
              "type": "string",
              "description": "User-friendly parent identifier of either organization or folder (will replace parentId).",
              "example": "parent-name-VuUfqh1"
            }
          },
          "required": [
            "name",
            "type",
            "id",
            "parentId",
            "containerId",
            "containerParentId"
          ]
        }
      },
      "OffsetSchema": {
        "type": "number",
        "title": "Offset",
        "description": "The offset of the first item in the collection to return.",
        "minimum": 0,
        "default": 0
      },
      "LimitSchema": {
        "type": "number",
        "title": "Limit",
        "description": "The maximum number of projects to return in the response. If not present, an appropriate default will be used.",
        "minimum": 0,
        "maximum": 100,
        "default": 50
      },
      "CursorSchema": {
        "title": "cursor",
        "type": "string",
        "description": "A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started.",
        "example": "string"
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://auth.01.idp.eu01.stackit.cloud/login",
            "scopes": {}
          }
        }
      }
    },
    "examples": {
      "BadRequest": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/path/where/error/occurred",
          "status": 400,
          "error": "Bad Request",
          "message": "Validation of {param-one} failed."
        }
      },
      "NotFound": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/path/where/error/occurred",
          "status": 404,
          "error": "Not Found",
          "message": "{resource} not found."
        }
      },
      "PolicyConflict": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/path/where/error/occurred",
          "status": 409,
          "error": "Conflict",
          "message": "Request aborted due conflict."
        }
      },
      "Forbidden": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/path/where/error/occurred",
          "status": 403,
          "error": "Forbidden",
          "message": "Access to this resource is forbidden."
        }
      }
    },
    "parameters": {
      "offset": {
        "name": "offset",
        "in": "query",
        "required": false,
        "schema": {
          "type": "number",
          "minimum": 0,
          "default": 0
        },
        "description": "The offset of the first item in the collection to return."
      },
      "limit": {
        "name": "limit",
        "in": "query",
        "required": false,
        "schema": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "default": 50
        },
        "description": "The maximum number of projects to return in the response. If not present, an appropriate default will be used. If maximum is exceeded, maximum is used."
      },
      "cursor": {
        "name": "cursor",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "A pagination cursor is returned on the first call of the pagination process. If given, it will start from the end of the previous position. If not given, a new pagination is started."
      },
      "creation-time-start": {
        "name": "creation-time-start",
        "in": "query",
        "schema": {
          "type": "string",
          "example": "2021-01-20T00:00:00Z"
        },
        "description": "A timestamp to specifiy the beginning of the creationTime from which entries should be returned. If not given, defaults to the beginning of time."
      },
      "recursive": {
        "name": "recursive",
        "in": "query",
        "schema": {
          "type": "boolean",
          "default": false
        },
        "description": "If true, list all children. If false, list only the next direct children."
      },
      "member": {
        "name": "member",
        "in": "query",
        "required": false,
        "schema": {
          "type": "string"
        },
        "description": "E-Mail address of the user for whom the visible resource containers should be filtered."
      }
    }
  },
  "tags": [
    {
      "name": "Organizations"
    },
    {
      "name": "Folders"
    },
    {
      "name": "Projects"
    },
    {
      "name": "Private"
    }
  ]
}