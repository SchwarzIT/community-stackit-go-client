{
  "components": {
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "examples": {
              "InvalidAffinityPolicy": {
                "value": {
                  "code": 400,
                  "msg": "The server group policy is not supported"
                }
              },
              "InvalidBootDeviceSize": {
                "value": {
                  "code": 400,
                  "msg": "boot device size is not valid or missing"
                }
              },
              "InvalidFlavor": {
                "value": {
                  "code": 400,
                  "msg": "flavor is not valid"
                }
              },
              "InvalidParameter": {
                "value": {
                  "code": 400,
                  "msg": "request body has an error: doesn't match schema: Error at \"/name\": value must be a string"
                }
              },
              "InvalidPublicKey": {
                "value": {
                  "code": 400,
                  "msg": "invalid pubkey"
                }
              },
              "InvalidUUID": {
                "value": {
                  "code": 400,
                  "msg": "invalid uuid"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Bad request."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "code": 403,
              "msg": "Forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Forbidden Request."
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "code": 500,
              "msg": "internal server error"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Internal Server Error, returns a 500 if something is broken on IaaS API Side."
      },
      "InvalidServerAction": {
        "content": {
          "application/json": {
            "example": {
              "code": 409,
              "msg": "InvalidServerAction"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Invalid server action."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "examples": {
              "AreaNotFound": {
                "value": {
                  "code": 404,
                  "msg": "area not found"
                }
              },
              "KeyPairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "KeypairNotFound": {
                "value": {
                  "code": 404,
                  "msg": "keypair not found"
                }
              },
              "NetworkNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network not found"
                }
              },
              "NetworkRangeNotFound": {
                "value": {
                  "code": 404,
                  "msg": "network range not found"
                }
              },
              "OrganizationNotFound": {
                "value": {
                  "code": 404,
                  "msg": "organization not found"
                }
              },
              "ProjectNotFound": {
                "value": {
                  "code": 404,
                  "msg": "project not found"
                }
              },
              "RequestNotFound": {
                "value": {
                  "code": 404,
                  "msg": "request not found"
                }
              },
              "RouteNotFound": {
                "value": {
                  "code": 404,
                  "msg": "route not found"
                }
              }
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Object not found."
      },
      "ServerOrPublicIPNotFound": {
        "content": {
          "application/json": {
            "example": {
              "code": 404,
              "msg": "ServerOrPublicIPNotFound"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Server or public IP not found."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "code": 401,
              "msg": "Unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/v1Error"
            }
          }
        },
        "description": "Unauthorized Request."
      }
    },
    "schemas": {
      "v1CIDR": {
        "description": "Classless Inter-Domain Routing (CIDR).",
        "example": "10.1.2.0/24",
        "pattern": "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(3[0-2]|2[0-9]|1[0-9]|[0-9]))$|^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))(\\/((1(1[0-9]|2[0-8]))|([0-9][0-9])|([0-9])))?$",
        "type": "string"
      },
      "v1Error": {
        "description": "Error with HTTP error code and an error message.",
        "properties": {
          "code": {
            "example": 404,
            "type": "integer"
          },
          "msg": {
            "example": "Project not found",
            "type": "string"
          }
        },
        "required": [
          "code",
          "msg"
        ],
        "type": "object"
      },
      "v1GenericName": {
        "description": "The name for a General Object. Matches Names and also UUIDs.",
        "example": "objectName26",
        "maxLength": 63,
        "pattern": "^[A-Za-z0-9]+((-|_|\\s|\\.)[A-Za-z0-9]+)*$",
        "type": "string"
      },
      "v1IP": {
        "description": "An IP address.",
        "example": "10.1.2.10",
        "pattern": "((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9a-f]{1,4}:){7}([0-9a-f]{1,4}|:))|(([0-9a-f]{1,4}:){6}(:[0-9a-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){5}(((:[0-9a-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9a-f]{1,4}:){4}(((:[0-9a-f]{1,4}){1,3})|((:[0-9a-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){3}(((:[0-9a-f]{1,4}){1,4})|((:[0-9a-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){2}(((:[0-9a-f]{1,4}){1,5})|((:[0-9a-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9a-f]{1,4}:){1}(((:[0-9a-f]{1,4}){1,6})|((:[0-9a-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9a-f]{1,4}){1,7})|((:[0-9a-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))",
        "type": "string"
      },
      "v1Nameserver": {
        "description": "List of DNS Servers/Nameservers.",
        "example": [
          "10.20.30.40",
          "50.60.70.80"
        ],
        "items": {
          "$ref": "#/components/schemas/v1IP"
        },
        "maxItems": 3,
        "type": "array"
      },
      "v1Network": {
        "description": "Object represents a network.",
        "properties": {
          "name": {
            "example": "My network",
            "type": "string"
          },
          "nameservers": {
            "$ref": "#/components/schemas/v1Nameserver"
          },
          "networkId": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "prefixes": {
            "example": [
              "10.1.2.0/24"
            ],
            "items": {
              "$ref": "#/components/schemas/v1CIDR"
            },
            "type": "array"
          },
          "publicIp": {
            "$ref": "#/components/schemas/v1IP"
          }
        },
        "required": [
          "networkId",
          "prefixes",
          "name"
        ],
        "type": "object"
      },
      "v1NetworkList": {
        "description": "List of Networks.",
        "items": {
          "$ref": "#/components/schemas/v1Network"
        },
        "type": "array"
      },
      "v1NetworkListResponse": {
        "description": "Network list response.",
        "properties": {
          "items": {
            "$ref": "#/components/schemas/v1NetworkList"
          }
        },
        "required": [
          "items"
        ],
        "type": "object"
      },
      "v1OpenStackNetwork": {
        "description": "Representation of an OpenStack network.",
        "properties": {
          "cidr": {
            "$ref": "#/components/schemas/v1CIDR"
          },
          "openstackNetworkID": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "openstackRouterID": {
            "$ref": "#/components/schemas/v1UUID"
          },
          "openstackSubnetID": {
            "$ref": "#/components/schemas/v1UUID"
          }
        },
        "required": [
          "openstackRouterID",
          "openstackNetworkID",
          "openstackSubnetID",
          "cidr"
        ],
        "type": "object"
      },
      "v1ReqID": {
        "description": "ID representing a single API request.",
        "example": "req-d61a8564c8dd4ffbbc15143e7d0c85ed",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^req-[0-9a-f]{32}$",
        "type": "string"
      },
      "v1RequestResponse": {
        "description": "Request response.",
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/v1ReqID"
          }
        },
        "required": [
          "requestId"
        ],
        "type": "object"
      },
      "v1UUID": {
        "description": "Universally Unique Identifier (UUID).",
        "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
        "format": "uuid",
        "maxLength": 36,
        "minLength": 36,
        "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
        "type": "string"
      }
    }
  },
  "info": {
    "contact": {
      "email": "stackit-iaas@mail.schwarz",
      "name": "STACKIT IaaS Teams",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "This API allows you to create and modify IaaS resources.",
    "license": {
      "name": "KMZ",
      "url": "https://ab.fahrt"
    },
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "IaaS-API",
    "version": "1alpha1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1alpha1/projects/{projectId}/networks": {
      "parameters": [
        {
          "schema": {
            "description": "Universally Unique Identifier (UUID).",
            "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36,
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "STACKIT Project ID."
        }
      ],
      "get": {
        "description": "Get a list of all networks inside a project.",
        "operationId": "v1ListNetworksInProject",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NetworkListResponse"
                }
              }
            },
            "description": "List all networks of a project."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "List all networks inside a project.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.list"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.list"
          ]
        }
      },
      "post": {
        "description": "Create a new network in a project. `nameservers` will be filled from `defaultNameservers` of the respective area if not specified. If the project has `internetAccess` enabled and this is the first network in the project this might incur cost.",
        "operationId": "v1CreateNetwork",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "My Network",
                "nameservers": [
                  "10.1.2.10"
                ],
                "prefixLengthV4": 24
              },
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "nameservers": {
                    "$ref": "#/components/schemas/v1Nameserver"
                  },
                  "prefixLengthV4": {
                    "default": 25,
                    "example": 24,
                    "maximum": 29,
                    "minimum": 22,
                    "type": "integer"
                  }
                },
                "required": [
                  "name"
                ],
                "type": "object"
              }
            }
          },
          "description": "Create network request.",
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RequestResponse"
                }
              }
            },
            "description": "Create request for network accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Can not allocate prefixes for network. Ensure the area has sufficient space in the configured network ranges"
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Can not allocate prefixes for network."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Create new network.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.create"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.create"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/networks/{networkId}": {
      "parameters": [
        {
          "description": "STACKIT Project ID.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
              "description": "Universally Unique Identifier (UUID).",
              "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
              "format": "uuid",
              "maxLength": 36,
              "minLength": 36,
              "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
              "type": "string"
            }
        },
        {
          "description": "STACKIT Network ID.",
          "in": "path",
          "name": "networkId",
          "required": true,
          "schema": {
            "description": "Universally Unique Identifier (UUID).",
            "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36,
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type": "string"
          }
        }
      ],
      "delete": {
        "description": "Delete a network.",
        "operationId": "v1DeleteNetwork",
        "responses": {
          "202": {
            "description": "Delete request for network accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "409": {
            "content": {
              "application/json": {
                "example": {
                  "code": 409,
                  "msg": "Can not delete network. It is still has systems connected to it."
                },
                "schema": {
                  "$ref": "#/components/schemas/v1Error"
                }
              }
            },
            "description": "Can not delete network that is still in use."
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Delete network.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.delete"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.delete"
          ]
        }
      },
      "get": {
        "description": "Get details about a network.",
        "operationId": "v1GetNetwork",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Network"
                }
              }
            },
            "description": "Show network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get network details.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.get"
          ]
        }
      },
      "put": {
        "description": "Update the settings of a network.",
        "operationId": "v1UpdateNetwork",
        "requestBody": {
          "content": {
            "application/json": {
              "example": {
                "name": "My Network",
                "nameservers": [
                  "10.1.2.10"
                ]
              },
              "schema": {
                "properties": {
                  "name": {
                    "$ref": "#/components/schemas/v1GenericName"
                  },
                  "nameservers": {
                    "$ref": "#/components/schemas/v1Nameserver"
                  }
                },
                "type": "object"
              }
            }
          },
          "description": "Update network request.",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Update accepted."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Update network settings.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.update"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.update"
          ]
        }
      }
    },
    "/v1alpha1/projects/{projectId}/openstack-networks/{networkId}": {
      "parameters": [
        {
          "description": "STACKIT Project ID.",
          "in": "path",
          "name": "projectId",
          "required": true,
          "schema": {
            "description": "Universally Unique Identifier (UUID).",
            "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36,
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type": "string"
          }
        },
        {
          "description": "STACKIT Network ID.",
          "in": "path",
          "name": "networkId",
          "required": true,
          "schema": {
            "description": "Universally Unique Identifier (UUID).",
            "example": "d61a8564-c8dd-4ffb-bc15-143e7d0c85ed",
            "format": "uuid",
            "maxLength": 36,
            "minLength": 36,
            "pattern": "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
            "type": "string"
          }
        }
      ],
      "get": {
        "deprecated": true,
        "description": "Get OpenStack details about a network.",
        "operationId": "v1GetOpenStackNetworkDetails",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1OpenStackNetwork"
                }
              }
            },
            "description": "Show OpenStack network details."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "summary": "Get OpenStack network details.",
        "tags": [
          "Network"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.network.get"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.network.get"
          ]
        }
      }
    }
  },
  "servers": [
    {
      "description": "This API allows you to create and modify IaaS resources.",
      "url": "https://iaas.api.eu01.stackit.cloud"
    }
  ],
  "tags": [
    {
      "description": "Generic Tag for Network based Service.",
      "name": "Network"
    }
  ],
  "x-stackit-api": {
    "type": "stackit"
  },
  "x-stackit-scope": {
    "visibility": "private"
  },
  "x-stackit-signer": {
    "audience": [
      "iaas"
    ],
    "inject-email": false
  }
}