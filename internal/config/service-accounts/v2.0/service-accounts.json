{
  "openapi": "3.0.0",
  "info": {
    "version": "2.0",
    "title": "Service Account API",
    "termsOfService": "https://stackit.de/en/imprint",
    "contact": {
      "name": "SIT-STACKIT-Core-Platform-Security",
      "url": "https://developers.stackit.schwarz/",
      "email": "SIT-STACKIT-Core-Platform-Security@mail.schwarz"
    },
    "description": "IMPORTANT: This v2 api is a work in progress and might not work as expected. In case of issues consider using the v1 api.  API to manage Service Accounts and their Access Tokens. \n\n# Authentication\n\n<!-- ReDoc-Inject: <security-definitions> -->"
  },
  "servers": [
    {
      "url": "https://api.stackit.cloud/service-account",
      "description": "prod"
    },
    {
      "url": "https://api-dev.stackit.cloud/service-account",
      "description": "dev"
    },
    {
      "url": "https://api-qa.stackit.cloud/service-account",
      "description": "qa"
    }
  ],
  "paths": {
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "schema": {
            "type": "string",
            "format": "email"
          },
          "name": "serviceAccountEmail",
          "in": "path",
          "required": true,
          "description": "The email of the Service Account."
        }
      ],
      "delete": {
        "summary": "Delete Service Account",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Service Account does not belong to Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "timeStamp": "2019-08-24T14:15:22Z",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "error": "Forbidden",
                      "message": "Some information about what caused the Error"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service Account Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "NotFound Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                }
              }
            }
          }
        },
        "operationId": "delete-projects-projectId-service-accounts-serviceAccountId-v2",
        "description": "Delete a Service Account.",
        "x-internal": false,
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ]
      }
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}/access-tokens": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "schema": {
            "type": "string",
            "format": "email"
          },
          "name": "serviceAccountEmail",
          "in": "path",
          "required": true,
          "description": "The email of the Service Account."
        }
      ],
      "post": {
        "summary": "Create a new Access Token",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenV2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Service Account does not belong to Project or no access to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "timeStamp": "2019-08-24T14:15:22Z",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "error": "Forbidden",
                      "message": "Service Account does not belong to Project or no access to project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "NotFound Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                }
              }
            }
          }
        },
        "operationId": "post-projects-projectId-service-accounts-serviceAccountId-access-tokens-v2",
        "description": "Create an Access Token for a Service Account. The service token can be then used for API calls (where enabled). Save the response token, as it is not recoverable later. Token metadata can be requested until the token is not expired.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAccessTokenRequestBody"
              }
            }
          },
          "description": "Token request. Optional. If not specified the access token will be valid for 90days."
        }
      },
      "get": {
        "summary": "Get Access Tokens of Service Account",
        "tags": [
          "Public",
          "v2"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAccessTokensResponseBodyV2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Service Account does not belong to Project or no access to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "timeStamp": "2019-08-24T14:15:22Z",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "error": "Forbidden",
                      "message": "Service Account does not belong to Project or no access to project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Service Account not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Not Found Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                }
              }
            }
          }
        },
        "operationId": "get-projects-projectId-service-accounts-serviceAccountId-access-tokens-v2",
        "description": "Get all Access Tokens of a Service Account. The token itself is not returned, only the metadata about the access tokens. Access tokens are listed until they are expired. Revoked tokens are returned until expired."
      }
    },
    "/v2/projects/{projectId}/service-accounts/{serviceAccountEmail}/access-tokens/{accessTokenId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "required": true,
          "description": "The ID of the project."
        },
        {
          "schema": {
            "type": "string",
            "format": "email"
          },
          "name": "serviceAccountEmail",
          "in": "path",
          "required": true,
          "description": "The ID of the Service Account."
        },
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "accessTokenId",
          "in": "path",
          "required": true,
          "description": "The ID of the Access Token."
        }
      ],
      "delete": {
        "summary": "Revoke Access Token",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Service Account does not belong to Project or Access Token does not belong to Service Account or no access to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "timeStamp": "2019-08-24T14:15:22Z",
                      "path": "/v1/path/which/returned/error",
                      "status": 403,
                      "error": "Forbidden",
                      "message": "Service Account does not belong to Project or Access Token does not belong to Service Account or no access to project"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Access Token not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "NotFound Example": {
                    "$ref": "#/components/examples/notfound"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Access Token already revoked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Conflict Example": {
                    "$ref": "#/components/examples/conflict"
                  }
                }
              }
            }
          }
        },
        "operationId": "delete-projects-projectId-service-accounts-serviceAccountId-access-tokens-accessTokenId-v2",
        "description": "Revoke an Access Token. The access token is instantly revoked, any following calls with the token will be unauthorized. The token metadata is still stored until the expiration time."
      }
    },
    "/token": {
      "post": {
        "summary": "Request short lived API access token (OAUTH2).",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseBody"
                }
              }
            }
          }
        },
        "operationId": "post-token",
        "description": "Request a short lived API access token with OAUTH2. Compatible with [Using JWTs as Authorization Grants](https://www.rfc-editor.org/rfc/rfc7523.html#section-2.1)\nYou can request a token with a self signed token, or with a refresh token.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/TokenRequestBody"
              }
            }
          },
          "description": "Self signed token or refresh token"
        }
      }
    },
    "/v2/projects/{projectId}/service-accounts": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "description": "The ID of the project.",
          "required": true
        }
      ],
      "get": {
        "summary": "List all Service Account resources in a project",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceAccountsResponseBodyV2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "status": "Forbidden",
                        "message": "The request could not be performed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-projects-projectId-service-accounts-v2",
        "description": "List all Service Account resources in a project. Returns the service account resources, not the service accounts that has access to the project."
      },
      "post": {
        "summary": "Create a new Service Account",
        "tags": [
          "Public",
          "v2"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountV2"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Quota exceeded or no access to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/forbiddenExample"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Name not unique",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ConflictExample": {
                    "$ref": "#/components/examples/conflict"
                  }
                }
              }
            }
          }
        },
        "operationId": "post-projects-projectId-service-accounts-v2",
        "description": "Create a new Service Account in a project. The service account only resides in the project, and initially has no roles or permissions on any resources. After creation, the service account can be assigned to this project, other projects in the parent organization or to the parent organization.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServiceAccountRequestBodyV2"
              }
            }
          },
          "description": "Service account request"
        }
      }
    },
    "/v2alpha1/projects/{projectId}/service-accounts/{serviceAccountEmail}/keys": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "description": "The ID of the project.",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "format": "email"
          },
          "name": "serviceAccountEmail",
          "in": "path",
          "description": "The email of the service account.",
          "required": true
        }
      ],
      "post": {
        "summary": "Create a new Service Account key",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountKeyPrivateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Quota exceeded or no access to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/forbiddenExample"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Name not unique",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ConflictExample": {
                    "$ref": "#/components/examples/conflict"
                  }
                }
              }
            }
          }
        },
        "operationId": "post-projects-projectId-service-accounts-keys",
        "description": "Create a new key to the service account. You can generate an RSA keypair, and post the PUBLIC part of the keypair, or leave empty, then the service will generate a pair. Maximum of 10 key can be added.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccountKeyRequest"
              }
            }
          },
          "description": "Service account request"
        }
      },
      "get": {
        "summary": "List all keys that belong to the service account",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServiceAccountsKeysResponseBody"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "status": "Forbidden",
                        "message": "The request could not be performed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-projects-projectId-service-accounts-keys",
        "description": "List all keys that belong to the service account"
      }
    },
    "/v2alpha1/projects/{projectId}/service-accounts/{serviceAccountEmail}/keys/{keyId}": {
      "parameters": [
        {
          "schema": {
            "type": "string"
          },
          "name": "projectId",
          "in": "path",
          "description": "The ID of the project.",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "format": "email"
          },
          "name": "serviceAccountEmail",
          "in": "path",
          "description": "The email of the service account.",
          "required": true
        },
        {
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "name": "keyId",
          "in": "path",
          "description": "ID of the key.",
          "required": true
        }
      ],
      "patch": {
        "summary": "Update Service Account key",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountKeyPatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Quota exceeded or no access to project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ForbiddenExample": {
                    "$ref": "#/components/examples/forbiddenExample"
                  }
                }
              }
            }
          },
          "409": {
            "description": "Name not unique",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ConflictExample": {
                    "$ref": "#/components/examples/conflict"
                  }
                }
              }
            }
          }
        },
        "operationId": "patch-projects-projectId-service-accounts-keys",
        "description": "Update a key. You can activate or deactivate a key, or set/delete validUntil.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceAccountKeyUpdateRequest"
              }
            }
          },
          "description": "Service account request"
        }
      },
      "delete": {
        "summary": "Delete a service key",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "status": "Forbidden",
                        "message": "The request could not be performed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "delete-projects-projectId-service-accounts-keys",
        "description": "Delete a key"
      },
      "get": {
        "summary": "Get service key details",
        "parameters": [
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "enum": [
                "X509_PEM"
              ],
              "default": "X509_PEM"
            },
            "description": "Requested format for the public key"
          }
        ],
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceAccountKeyResponseWithKey"
                }
              }
            }
          },
          "400": {
            "description": "Invalid User Token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthError"
                },
                "examples": {
                  "Forbidden Example": {
                    "value": {
                      "error": {
                        "code": 403,
                        "status": "Forbidden",
                        "message": "The request could not be performed"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "operationId": "get-projects-projectId-service-accounts-keys-key-id",
        "description": "Get key details"
      }
    },
    "/v2/service-accounts/public/jwk/{serviceAccountEmail}": {
      "parameters": [
        {
          "schema": {
            "type": "string",
            "format": "email"
          },
          "name": "serviceAccountEmail",
          "in": "path",
          "description": "The email of the service account.",
          "required": true
        }
      ],
      "get": {
        "summary": "Get JSON Web Key set of the service account",
        "tags": [
          "Public",
          "v2",
          "Work in progress"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetJWKResponseBody"
                }
              }
            }
          }
        },
        "operationId": "get-service-account-jwks",
        "description": "Get JSON Web Key set of the service account"
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenV2": {
        "title": "AccessTokenV2",
        "type": "object",
        "description": "Contains token metadata and actual token.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the access token. Also used as JTI field."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time of the access token."
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "Approximate expiration time of the access token. Check the JWT for actual validity date."
          },
          "active": {
            "type": "boolean",
            "description": "Newly created access tokens are valid, and can be revoked if needed."
          },
          "token": {
            "type": "string",
            "description": "The access token in JWT format. Use this with `Bearer` prefix for API calls. Store it, as it is not recoverable later."
          }
        },
        "required": [
          "id",
          "createdAt",
          "validUntil",
          "active",
          "token"
        ]
      },
      "AccessTokenMetadataV2": {
        "title": "AccessTokenMetadataV2",
        "type": "object",
        "description": "Does not contain the actual token.",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique ID of the access token. Also used as JTI field."
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time of the access token."
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "Approximate expiration time of the access token. Check the JWT for actual validity date."
          },
          "active": {
            "type": "boolean",
            "description": "If true, access token can be used for authorized API calls, if false, the token is not usable anymore."
          }
        },
        "required": [
          "id",
          "createdAt",
          "validUntil",
          "active"
        ]
      },
      "ServiceAccountKeyRequest": {
        "title": "ServiceAccountKeyRequest",
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Optional, public key part of the user generated RSA key-pair wrapped in a [X.509 v3 certificate](https://www.rfc-editor.org/rfc/rfc5280)"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "Optional, date of key expiration. When omitted, key is valid until deleted"
          }
        }
      },
      "ServiceAccountKeyUpdateRequest": {
        "title": "ServiceAccountKeyUpdateRequest",
        "type": "object",
        "properties": {
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "Optional, date of key expiration. When omitted, key is valid until deleted"
          },
          "active": {
            "type": "boolean",
            "description": "Active keys are valid, while inactive keys are temporarily deactivated."
          }
        }
      },
      "ServiceAccountKeyPatchResponse": {
        "title": "ServiceAccountKeyPatchResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the key.",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time of the key"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "If specified, the timestamp until the key is active. May be null"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ]
          },
          "keyOrigin": {
            "type": "string",
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ]
          },
          "keyAlgorithm": {
            "type": "string",
            "enum": [
              "RSA_2048"
            ]
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "publicKey",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active"
        ]
      },
      "ServiceAccountKeyListResponse": {
        "title": "ServiceAccountKeyListResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the key.",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time of the key"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "If specified, the timestamp until the key is active. May be null"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ]
          },
          "keyOrigin": {
            "type": "string",
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ]
          },
          "keyAlgorithm": {
            "type": "string",
            "enum": [
              "RSA_2048"
            ]
          },
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "publicKey",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active"
        ]
      },
      "ServiceAccountKeyPrivateResponse": {
        "title": "ServiceAccountKeyPrivateResponse",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the key.",
            "format": "uuid"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key, that was provider, or was generated by the service account API"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time of the key"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "If specified, the timestamp until the key is active. May be null"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ]
          },
          "keyOrigin": {
            "type": "string",
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ]
          },
          "keyAlgorithm": {
            "type": "string",
            "enum": [
              "RSA_2048"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "credentials": {
            "type": "object",
            "properties": {
              "kid": {
                "type": "string",
                "description": "Key id to use"
              },
              "iss": {
                "type": "string",
                "format": "email",
                "description": "Service account email"
              },
              "sub": {
                "type": "string",
                "format": "uuid",
                "description": "Service account id"
              },
              "aud": {
                "type": "string",
                "description": "Audience - service account API URL"
              },
              "privateKey": {
                "type": "string",
                "description": "Private key. Only present, if the service account API was generating the key. Not recoverable later."
              }
            },
            "required": [
              "kid",
              "iss",
              "sub",
              "aud"
            ]
          }
        },
        "required": [
          "id",
          "publicKey",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active",
          "credentials"
        ]
      },
      "ServiceAccountKeyResponseWithKey": {
        "title": "ServiceAccountKeyResponseWithKey",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the key.",
            "format": "uuid"
          },
          "publicKey": {
            "type": "string",
            "description": "Public key, in the requested format"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation time of the key"
          },
          "validUntil": {
            "type": "string",
            "format": "date-time",
            "description": "If specified, the timestamp until the key is active. May be null"
          },
          "keyType": {
            "type": "string",
            "enum": [
              "USER_MANAGED",
              "SYSTEM_MANAGED"
            ]
          },
          "keyOrigin": {
            "type": "string",
            "enum": [
              "USER_PROVIDED",
              "GENERATED"
            ]
          },
          "keyAlgorithm": {
            "type": "string",
            "enum": [
              "RSA_2048"
            ]
          },
          "active": {
            "type": "boolean"
          },
          "credentials": {
            "type": "object",
            "properties": {
              "kid": {
                "type": "string",
                "description": "Key id to use"
              },
              "iss": {
                "type": "string",
                "format": "email",
                "description": "Service account email"
              },
              "sub": {
                "type": "string",
                "format": "uuid",
                "description": "Service account id"
              },
              "aud": {
                "type": "string",
                "description": "Audience - service account API URL"
              }
            },
            "required": [
              "kid",
              "iss",
              "sub",
              "aud"
            ]
          }
        },
        "required": [
          "id",
          "createdAt",
          "keyType",
          "keyOrigin",
          "keyAlgorithm",
          "active",
          "credentials"
        ]
      },
      "ServiceAccountV2": {
        "title": "ServiceAccount",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the service account. It is also used in the 'sub' field of the service accounts access tokens.",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Unique identifier of the service account in format of an email address generated by the service containing the prefix provided by the user during creation.",
            "example": "my-service-account-aBc2defg@sa.stackit.cloud"
          },
          "projectId": {
            "type": "string",
            "description": "ID of the related project"
          }
        },
        "required": [
          "id",
          "email",
          "projectId"
        ]
      },
      "JsonWebKey": {
        "title": "JsonWebKey",
        "type": "object",
        "description": "JSON Web Key according to https://datatracker.ietf.org/doc/html/rfc7517#section-4",
        "properties": {
          "n": {
            "type": "string"
          },
          "e": {
            "type": "string"
          },
          "use": {
            "type": "string"
          },
          "ops": {
            "type": "string"
          },
          "alg": {
            "type": "string"
          },
          "kid": {
            "type": "string"
          },
          "x5u": {
            "type": "string"
          },
          "x5t": {
            "type": "string"
          },
          "x5t256": {
            "type": "string"
          },
          "x5c": {
            "type": "string"
          },
          "ks": {
            "type": "string"
          }
        },
        "required": [
          "n",
          "e"
        ]
      },
      "Error": {
        "title": "ErrorResponse",
        "type": "object",
        "description": "Contains error information.",
        "example": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/v1/path/which/returned/error",
          "status": 400,
          "error": "Bad Request",
          "message": "Some information about what caused the Error"
        },
        "properties": {
          "timeStamp": {
            "type": "string",
            "format": "date-time"
          },
          "path": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "error": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "timeStamp",
          "path",
          "status",
          "error",
          "message"
        ]
      },
      "CreateAccessTokenRequestBody": {
        "title": "CreateAccessTokenRequestBody",
        "type": "object",
        "properties": {
          "ttlDays": {
            "type": "integer",
            "minimum": 1,
            "maximum": 180,
            "description": "The duration in days for how long the new Access Token should be valid."
          }
        },
        "required": [
          "ttlDays"
        ]
      },
      "GetAccessTokensResponseBodyV2": {
        "title": "GetAccessTokensResponseBodyV2",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessTokenMetadataV2"
            }
          }
        }
      },
      "CreateServiceAccountRequestBody": {
        "title": "CreateServiceAccountRequestBody",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-zA-Z](?:-?_?\\s?[a-zA-Z0-9]+)*$",
            "minLength": 1,
            "maxLength": 30,
            "example": "My Service Account",
            "description": "The requested name of the service account. The service will generate a unique email from this name."
          }
        },
        "required": [
          "name"
        ]
      },
      "CreateServiceAccountRequestBodyV2": {
        "title": "CreateServiceAccountRequestBodyV2",
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "pattern": "^[a-z](?:-?[a-z0-9]+)*$",
            "minLength": 1,
            "maxLength": 20,
            "example": "my-sa-prefix",
            "description": "The requested name of the service account. The service will generate a unique email from this name."
          }
        },
        "required": [
          "name"
        ]
      },
      "GetServiceAccountsKeysResponseBody": {
        "title": "GetServiceAccountsResponseBody",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccountKeyListResponse"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "GetServiceAccountsResponseBodyV2": {
        "title": "GetServiceAccountsResponseBodyV2",
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceAccountV2"
            }
          }
        },
        "required": [
          "items"
        ]
      },
      "GetJWKResponseBody": {
        "title": "GetJWKResponseBody",
        "type": "object",
        "properties": {
          "keys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/JsonWebKey"
            }
          }
        },
        "required": [
          "keys"
        ]
      },
      "TokenRequestBody": {
        "title": "TokenRequestBody",
        "type": "object",
        "properties": {
          "grant_type": {
            "type": "string",
            "enum": [
              "urn:ietf:params:oauth:grant-type:jwt-bearer",
              "refresh_token"
            ],
            "description": "Always use URL encoded values. E.g. urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Ajwt-bearer"
          },
          "assertion": {
            "type": "string",
            "description": "The self signed JWT. Must be given when grant_type is urn:ietf:params:oauth:grant-type:jwt-bearer"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token provided by a previous call with a self signed token. Must be given when grant_type is refresh_token"
          }
        },
        "required": [
          "grant_type"
        ]
      },
      "TokenResponseBody": {
        "title": "TokenResponseBody",
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "The short lived token that can be used for API access"
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token that can be used to request a new access token when it expires (and before refresh token expires). Tokens are rotated."
          },
          "scope": {
            "type": "string",
            "description": "scope field of the self signed token"
          },
          "token_type": {
            "type": "string",
            "enum": [
              "Bearer"
            ]
          },
          "expires_in": {
            "type": "integer",
            "example": 3600
          }
        },
        "required": [
          "access_token",
          "refresh_token",
          "scope",
          "token_type",
          "expires_in"
        ]
      },
      "AuthError": {
        "title": "AuthError",
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "required": [
              "code",
              "status",
              "message"
            ],
            "properties": {
              "code": {
                "type": "integer"
              },
              "status": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "error"
        ],
        "example": {
          "error": {
            "code": 401,
            "status": "Unauthorized",
            "message": "The request could not be authorized"
          }
        }
      }
    },
    "securitySchemes": {
      "Authorization": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://auth.01.idp.eu01.stackit.cloud/login",
            "scopes": {}
          }
        }
      }
    },
    "examples": {
      "notfound": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/v2/path/which/returned/error/{resource}",
          "status": 404,
          "error": "Not Found",
          "message": "{resource} not found"
        }
      },
      "conflict": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/v2/path/which/returned/error",
          "status": 409,
          "error": "Conflict",
          "message": "Some information about what caused the Error"
        }
      },
      "forbiddenExample": {
        "value": {
          "timeStamp": "2019-08-24T14:15:22Z",
          "path": "/v2/path/which/returned/error",
          "status": 403,
          "error": "Forbidden",
          "message": "Some information about what caused the Error"
        }
      }
    }
  },
  "security": [
    {
      "Authorization": []
    }
  ],
  "tags": [
    {
      "name": "Public"
    },
    {
      "name": "v2"
    },
    {
      "name": "Work in progress"
    }
  ]
}