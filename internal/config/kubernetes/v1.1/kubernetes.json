{
  "components": {
    "schemas": {
      "MaintenanceAutoUpdate": {
        "properties": {
          "kubernetesVersion": {
            "title": "Flag to enable/disable auto-updates of the Kubernetes version",
            "type": "boolean"
          },
          "machineImageVersion": {
            "title": "Flag to enable/disable auto-updates of the OS image version",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "SkeService_CreateOrUpdateCluster_request": {
        "properties": {
          "extensions": {
            "$ref": "#/components/schemas/v1Extension"
          },
          "hibernation": {
            "$ref": "#/components/schemas/v1Hibernation"
          },
          "kubernetes": {
            "$ref": "#/components/schemas/v1Kubernetes"
          },
          "maintenance": {
            "$ref": "#/components/schemas/v1Maintenance"
          },
          "network": {
            "$ref": "#/components/schemas/v1Network"
          },
          "nodepools": {
            "items": {
              "$ref": "#/components/schemas/v1Nodepool"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/v1ClusterStatus"
          }
        },
        "required": [
          "kubernetes",
          "nodepools"
        ],
        "type": "object"
      },
      "v1ACL": {
        "properties": {
          "allowedCidrs": {
            "description": "Array of CIDRs to allow access to the kubernetes API.",
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "enabled": {
            "description": "Enables the acl extension.",
            "type": "boolean"
          }
        },
        "required": [
          "allowedCidrs",
          "enabled"
        ],
        "type": "object"
      },
      "v1Argus": {
        "properties": {
          "argusInstanceId": {
            "description": "Argus instance ID to choose which Argus instance is used.",
            "type": "string"
          },
          "enabled": {
            "description": "Enables the argus extension.",
            "type": "boolean"
          }
        },
        "required": [
          "argusInstanceId",
          "enabled"
        ],
        "type": "object"
      },
      "v1AvailabilityZone": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1CRI": {
        "properties": {
          "name": {
            "enum": [
              "docker",
              "containerd"
            ],
            "title": "Name of the cri library",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Cluster": {
        "properties": {
          "extensions": {
            "$ref": "#/components/schemas/v1Extension"
          },
          "hibernation": {
            "$ref": "#/components/schemas/v1Hibernation"
          },
          "kubernetes": {
            "$ref": "#/components/schemas/v1Kubernetes"
          },
          "maintenance": {
            "$ref": "#/components/schemas/v1Maintenance"
          },
          "name": {
            "readOnly": true,
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/v1Network"
          },
          "nodepools": {
            "items": {
              "$ref": "#/components/schemas/v1Nodepool"
            },
            "maxItems": 10,
            "minItems": 1,
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/v1ClusterStatus"
          }
        },
        "required": [
          "kubernetes",
          "nodepools"
        ],
        "type": "object"
      },
      "v1ClusterStatus": {
        "properties": {
          "aggregated": {
            "$ref": "#/components/schemas/v1ClusterStatusState"
          },
          "creationTime": {
            "description": "Format: `2024-02-15T11:06:29Z`",
            "title": "Cluster creation timestamp",
            "type": "string"
          },
          "credentialsRotation": {
            "$ref": "#/components/schemas/v1CredentialsRotation"
          },
          "error": {
            "$ref": "#/components/schemas/v1RuntimeError"
          },
          "hibernated": {
            "title": "Indicates whether the cluster is currently hibernated",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1ClusterStatusState": {
        "default": "STATE_UNSPECIFIED",
        "enum": [
          "STATE_UNSPECIFIED",
          "STATE_HEALTHY",
          "STATE_CREATING",
          "STATE_DELETING",
          "STATE_UNHEALTHY",
          "STATE_RECONCILING",
          "STATE_HIBERNATED",
          "STATE_HIBERNATING",
          "STATE_WAKINGUP"
        ],
        "title": "aggregated state of the cluster",
        "type": "string"
      },
      "v1Clusters": {
        "properties": {
          "items": {
            "items": {
              "$ref": "#/components/schemas/v1Cluster"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1Credentials": {
        "properties": {
          "certificateAuthorityData": {
            "title": "Certificate authority data for accessing the cluster",
            "type": "string"
          },
          "kubeconfig": {
            "description": "This string contains the kubeconfig as yaml.",
            "title": "Kubeconfig for the cluster as yml string",
            "type": "string"
          },
          "server": {
            "title": "Kubernetes api server address",
            "type": "string"
          },
          "token": {
            "title": "Access token used to authenticate with the cluster",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1CredentialsRotation": {
        "properties": {
          "lastCompletionTime": {
            "description": "Format: `2024-02-15T11:06:29Z`",
            "title": "CredentialsRotation last completed at",
            "type": "string"
          },
          "lastInitiationTime": {
            "description": "Format: `2024-02-15T11:06:29Z`",
            "title": "CredentialsRotation last started at",
            "type": "string"
          },
          "phase": {
            "description": "Phase of the credentials rotation. `NEVER` indicates that no credentials rotation has been performed using the new credentials rotation endpoints yet. Using the deprecated [rotate-credentials](#tag/Credentials/operation/SkeService_GetClusterCredentials) endpoint will not update this status field.",
            "enum": [
              "NEVER",
              "PREPARING",
              "PREPARED",
              "COMPLETING",
              "COMPLETED"
            ],
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Extension": {
        "properties": {
          "acl": {
            "$ref": "#/components/schemas/v1ACL"
          },
          "argus": {
            "$ref": "#/components/schemas/v1Argus"
          }
        },
        "type": "object"
      },
      "v1Hibernation": {
        "properties": {
          "schedules": {
            "items": {
              "$ref": "#/components/schemas/v1HibernationSchedule"
            },
            "type": "array"
          }
        },
        "required": [
          "schedules"
        ],
        "type": "object"
      },
      "v1HibernationSchedule": {
        "properties": {
          "end": {
            "pattern": "(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|µs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7})",
            "title": "End time of cluster hibernation, in crontab syntax; this is the time the cluster will be woken up",
            "type": "string"
          },
          "start": {
            "pattern": "(@(annually|yearly|monthly|weekly|daily|hourly|reboot))|(@every (\\d+(ns|us|µs|ms|s|m|h))+)|((((\\d+,)+\\d+|(\\d+(\\/|-)\\d+)|\\d+|\\*) ?){5,7})",
            "title": "Start time of cluster hibernation, in crontab syntax",
            "type": "string"
          },
          "timezone": {
            "title": "Timezone name corresponding to a file in the IANA Time Zone database (like Go's time.LoadLocation).\nAn example would be \"Europe/Berlin\"",
            "type": "string"
          }
        },
        "required": [
          "end",
          "start"
        ],
        "type": "object"
      },
      "v1Image": {
        "description": "For valid names and versions please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `machineImages`.",
        "properties": {
          "name": {
            "title": "Name of os image",
            "type": "string"
          },
          "version": {
            "title": "Version of os image",
            "type": "string"
          }
        },
        "required": [
          "version"
        ],
        "type": "object"
      },
      "v1Kubeconfig": {
        "properties": {
          "expirationTimestamp": {
            "type": "string"
          },
          "kubeconfig": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1KubeconfigRequest": {
        "properties": {
          "expirationSeconds": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Kubernetes": {
        "description": "For valid versions please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `kubernetesVersions`.",
        "properties": {
          "allowPrivilegedContainers": {
            "description": "DEPRECATED as of Kubernetes 1.25+\nFlag to specify if privileged mode for containers is enabled or not.\nThis should be used with care since it also disables a couple of other features like the use of some volume type (e.g. PVCs).\nBy default this is set to true.",
            "type": "boolean"
          },
          "version": {
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Kubernetes version used for the cluster",
            "type": "string"
          }
        },
        "required": [
          "version"
        ],
        "type": "object"
      },
      "v1KubernetesVersion": {
        "properties": {
          "expirationDate": {
            "title": "Expiration date until the version will be supported if known yet",
            "type": "string"
          },
          "featureGates": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "List of feature gates supported by the Kubernetes version",
            "type": "object"
          },
          "state": {
            "title": "State of the kubernetes version",
            "type": "string"
          },
          "version": {
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Kubernetes version",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Machine": {
        "properties": {
          "image": {
            "$ref": "#/components/schemas/v1Image"
          },
          "type": {
            "description": "For valid types please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `machineTypes`.",
            "type": "string"
          }
        },
        "required": [
          "image",
          "type"
        ],
        "type": "object"
      },
      "v1MachineImage": {
        "properties": {
          "name": {
            "title": "Image name",
            "type": "string"
          },
          "versions": {
            "items": {
              "$ref": "#/components/schemas/v1MachineImageVersion"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1MachineImageVersion": {
        "properties": {
          "cri": {
            "items": {
              "$ref": "#/components/schemas/v1CRI"
            },
            "title": "supported container runtimes",
            "type": "array"
          },
          "expirationDate": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "version": {
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "title": "Image version",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1MachineType": {
        "properties": {
          "cpu": {
            "title": "number of CPU cores",
            "type": "integer"
          },
          "memory": {
            "title": "memory in GB",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Maintenance": {
        "properties": {
          "autoUpdate": {
            "$ref": "#/components/schemas/MaintenanceAutoUpdate"
          },
          "timeWindow": {
            "$ref": "#/components/schemas/v1TimeWindow"
          }
        },
        "required": [
          "autoUpdate",
          "timeWindow"
        ],
        "type": "object"
      },
      "v1Network": {
        "properties": {
          "id": {
            "title": "ID of the SNA network into which the cluster will be deployed",
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Nodepool": {
        "properties": {
          "availabilityZones": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "cri": {
            "$ref": "#/components/schemas/v1CRI"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "title": "List of labels attached to all worker nodes of this node pool",
            "type": "object"
          },
          "machine": {
            "$ref": "#/components/schemas/v1Machine"
          },
          "maxSurge": {
            "maximum": 10,
            "minimum": 1,
            "title": "Maximum number of additional VMs that are created during an update",
            "type": "integer"
          },
          "maxUnavailable": {
            "title": "Maximum number of VMs that that can be unavailable during an update",
            "type": "integer"
          },
          "maximum": {
            "maximum": 100,
            "minimum": 1,
            "title": "Maximum number of nodes in the pool",
            "type": "integer"
          },
          "minimum": {
            "maximum": 100,
            "minimum": 1,
            "title": "Minimum number of nodes in the pool",
            "type": "integer"
          },
          "name": {
            "description": "Maximum 15 chars",
            "title": "Name of the node pool",
            "type": "string"
          },
          "taints": {
            "items": {
              "$ref": "#/components/schemas/v1Taint"
            },
            "title": "List of taints for all the worker nodes of this node pool",
            "type": "array"
          },
          "volume": {
            "$ref": "#/components/schemas/v1Volume"
          }
        },
        "required": [
          "availabilityZones",
          "machine",
          "maximum",
          "minimum",
          "name",
          "volume"
        ],
        "type": "object"
      },
      "v1NoopFeature": {
        "properties": {
          "content": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Project": {
        "properties": {
          "projectId": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/v1ProjectState"
          }
        },
        "type": "object"
      },
      "v1ProjectState": {
        "default": "STATE_UNSPECIFIED",
        "enum": [
          "STATE_UNSPECIFIED",
          "STATE_CREATING",
          "STATE_CREATED",
          "STATE_DELETING",
          "STATE_FAILED"
        ],
        "type": "string"
      },
      "v1ProviderOptions": {
        "properties": {
          "availabilityZones": {
            "items": {
              "$ref": "#/components/schemas/v1AvailabilityZone"
            },
            "type": "array"
          },
          "kubernetesVersions": {
            "items": {
              "$ref": "#/components/schemas/v1KubernetesVersion"
            },
            "title": "List of supported Kubernetes versions",
            "type": "array"
          },
          "machineImages": {
            "items": {
              "$ref": "#/components/schemas/v1MachineImage"
            },
            "type": "array"
          },
          "machineTypes": {
            "items": {
              "$ref": "#/components/schemas/v1MachineType"
            },
            "title": "List of supported machine types",
            "type": "array"
          },
          "volumeTypes": {
            "items": {
              "$ref": "#/components/schemas/v1VolumeType"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "v1RuntimeError": {
        "properties": {
          "code": {
            "description": "- Code:    `SKE_UNSPECIFIED`\n  Message: \"An error occurred. Please open a support ticket if this error persists.\"\n- Code:    `SKE_TMP_AUTH_ERROR`\n  Message: \"Authentication failed. This is a temporary error. Please wait while the system recovers.\"\n- Code:    `SKE_QUOTA_EXCEEDED`\n  Message: \"Your project's resource quotas are exhausted. Please make sure your quota is sufficient for the ordered cluster.\"\n- Code:    `SKE_ARGUS_INSTANCE_NOT_FOUND`\n  Message: \"The provided Argus instance could not be found.\"\n- Code:    `SKE_RATE_LIMITS`\n  Message: \"While provisioning your cluster, request rate limits where incurred. Please wait while the system recovers.\"\n- Code:    `SKE_INFRA_ERROR`\n  Message: \"An error occurred with the underlying infrastructure. Please open a support ticket if this error persists.\"\n- Code:    `SKE_REMAINING_RESOURCES`\n  Message: \"There are remaining Kubernetes resources in your cluster that prevent deletion. Please make sure to remove them.\"\n- Code:    `SKE_CONFIGURATION_PROBLEM`\n  Message: \"A configuration error occurred. Please open a support ticket if this error persists.\"\n- Code:    `SKE_UNREADY_NODES`\n  Message: \"Not all worker nodes are ready. Please open a support ticket if this error persists.\"\n- Code:    `SKE_API_SERVER_ERROR`\n  Message: \"The Kubernetes API server is not reporting readiness. Please open a support ticket if this error persists.\"\n",
            "enum": [
              "SKE_UNSPECIFIED",
              "SKE_TMP_AUTH_ERROR",
              "SKE_QUOTA_EXCEEDED",
              "SKE_ARGUS_INSTANCE_NOT_FOUND",
              "SKE_RATE_LIMITS",
              "SKE_INFRA_ERROR",
              "SKE_REMAINING_RESOURCES",
              "SKE_CONFIGURATION_PROBLEM",
              "SKE_UNREADY_NODES",
              "SKE_API_SERVER_ERROR"
            ],
            "type": "string"
          },
          "details": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1Taint": {
        "properties": {
          "effect": {
            "enum": [
              "NoSchedule",
              "PreferNoSchedule",
              "NoExecute"
            ],
            "type": "string"
          },
          "key": {
            "title": "Taint key to be applied to a node",
            "type": "string"
          },
          "value": {
            "title": "Taint value corresponding to the taint key",
            "type": "string"
          }
        },
        "required": [
          "effect",
          "key"
        ],
        "type": "object"
      },
      "v1TimeWindow": {
        "properties": {
          "end": {
            "title": "Format: 0000-01-01THH:MM:SS+00:00 e.g. 0000-01-01T24:00:00+00:00",
            "type": "string"
          },
          "start": {
            "title": "Format: 0000-01-01THH:MM:SS+00:00 e.g. 0000-01-01T23:00:00+00:00",
            "type": "string"
          }
        },
        "required": [
          "end",
          "start"
        ],
        "type": "object"
      },
      "v1Volume": {
        "properties": {
          "size": {
            "maximum": 10240,
            "minimum": 20,
            "title": "Size of volume in GB",
            "type": "integer"
          },
          "type": {
            "description": "For valid values please take a look at [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) `volumeTypes`.",
            "type": "string"
          }
        },
        "required": [
          "size"
        ],
        "type": "object"
      },
      "v1VolumeType": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "name": "STACKIT Kubernetes Engine (SKE) Team",
      "url": "https://support.stackit.cloud/servicedesk"
    },
    "description": "The SKE API provides endpoints to create, update, delete clusters within STACKIT portal projects and to trigger further cluster management tasks.",
    "termsOfService": "https://stackit.de/en/imprint",
    "title": "SKE-API",
    "version": "1.1"
  },
  "openapi": "3.0.1",
  "paths": {
    "/v1/noop-feature": {
      "get": {
        "description": "This endpoint is enabled or disabled based on the `NoopFeature` gate.",
        "operationId": "SkeService_GetNoopFeature",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1NoopFeature"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Dummy endpoint for feature gates",
        "tags": [
          "NoopFeature"
        ],
        "x-stackit-authorization": {
          "disabled": true
        },
        "x-stackit-scope": {
          "visibility": "hidden"
        }
      }
    },
    "/v1/projects/{projectId}": {
      "delete": {
        "description": "Deletes the SKE project specified by `projectId`. Deleting a project deletes all corresponding shoots.",
        "operationId": "SkeService_DeleteProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted. Deletion happens asynchronously."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Delete a project",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      },
      "get": {
        "description": "Get a Project specified by `projectId`.",
        "operationId": "SkeService_GetProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Project not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Get a Project",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.read"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.read"
          ]
        }
      },
      "put": {
        "description": "Returns creation state of Project specified by `projectId`.",
        "operationId": "SkeService_CreateProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Create a Project",
        "tags": [
          "Project"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project"
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters": {
      "get": {
        "description": "Return a list of Kubernetes clusters in the project specified by `projectId`.",
        "operationId": "SkeService_ListClusters",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Clusters"
                }
              }
            },
            "description": "A successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Project not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "List all clusters",
        "tags": [
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.read"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.read"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}": {
      "delete": {
        "description": "Delete Kubernetes cluster specified by the identifier, belonging to the project specified by `projectId`.",
        "operationId": "SkeService_DeleteCluster",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, deletion of cluster happens asynchronously. The deletion is done as soon as GetCluster returns a 404 code. The progress can be observerd in the GetCluster's lastOperation field that contains a progress indicator."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Delete a cluster",
        "tags": [
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      },
      "get": {
        "description": "Get Kubernetes cluster for the specified identifier, belonging to the project specified by `projectId`.",
        "operationId": "SkeService_GetCluster",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Cluster"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Get a cluster",
        "tags": [
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.read"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.read"
          ]
        }
      },
      "put": {
        "description": "Create a new cluster in your project or modify an existing one. To get valid values for certain properties please check the [provider-options](#tag/ProviderOptions/operation/SkeService_GetProviderOptions) endpoint.",
        "operationId": "SkeService_CreateOrUpdateCluster",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SkeService_CreateOrUpdateCluster_request"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Cluster"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, creation/update of cluster happens asynchronously. The status of the cluster is specified in the status.conditions array of the response object. An entry in the status.conditions array represents the status of a condition type, whereat following types are supported: APIServerAvailable, ControlPlaneHealthy, EveryNodeReady, SystemComponentsHealthy. After creation of a cluster is triggered, the status of those types is initially `Progressing` and changes to `True` when the related type is successfully created and available."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Project not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Create or update a cluster",
        "tags": [
          "Cluster"
        ],
        "x-codegen-request-body-name": "cluster",
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/complete-credentials-rotation": {
      "post": {
        "description": "Complete cluster credentials rotation. This is step 2 of a two-step process. Start the rotation using [start-credentials-rotation](#tag/Credentials/operation/SkeService_StartClusterCredentialsRotation).",
        "operationId": "SkeService_CompleteClusterCredentialsRotation",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use the [get cluster](#tag/Cluster/operation/SkeService_GetCluster) endpoint to get the status of the operation from `status.credentialsRotation`."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Complete cluster credentials rotation",
        "tags": [
          "Operation",
          "Credentials"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/credentials": {
      "get": {
        "deprecated": true,
        "description": "This endpoint is deprecated since 2024-01-26. It will not work for clusters with Kubernetes v1.27+, or if the new endpoints for kubeconfig or credentials rotation have already been used. Use [kubeconfig](#tag/Credentials/operation/SkeService_CreateKubeconfig) instead to obtain a kubeconfig. For more information, see [How to rotate SKE credentials](https://docs.stackit.cloud/display/STACKIT/How+to+rotate+SKE+credentials).\n\nGet credentials for the cluster specified by `clusterName`, belonging to the project specified by `projectId`.",
        "operationId": "SkeService_GetClusterCredentials",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Credentials"
                }
              }
            },
            "description": "A successful response."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Credentials were not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Get credentials for a cluster",
        "tags": [
          "Credentials"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/hibernate": {
      "post": {
        "description": "Trigger immediate hibernation of the cluster. If the cluster is already in hibernation state, the method does nothing.",
        "operationId": "SkeService_TriggerClusterHibernation",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use GetCluster endpoint to read the status of the cluster via status.conditions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Trigger cluster hibernation",
        "tags": [
          "Operation",
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/kubeconfig": {
      "post": {
        "description": "Create a new kubeconfig for the cluster. You can specify the expiration (in seconds) in the request body. Its value must be in the range from 3600 (1 hour) to 15552000 (6 months).",
        "operationId": "SkeService_CreateKubeconfig",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1KubeconfigRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Kubeconfig"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Create a kubeconfig",
        "tags": [
          "Operation",
          "Credentials"
        ],
        "x-codegen-request-body-name": "kubeconfigRequest",
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/maintenance": {
      "post": {
        "description": "Trigger immediate maintenance of the cluster. The autoUpdate configuration specified in the Maintenance object of the cluster spec defines what is updated during the immediate maintenance operation.",
        "operationId": "SkeService_TriggerClusterMaintenance",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use GetCluster endpoint to read the status of the cluster via status.conditions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Trigger cluster maintenance",
        "tags": [
          "Operation",
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/reconcile": {
      "post": {
        "description": "Trigger immediate reconciliation of the complete cluster without changing the cluster specification.",
        "operationId": "SkeService_TriggerClusterReconciliation",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use GetCluster endpoint to read the status of the cluster via status.conditions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Trigger cluster reconciliation",
        "tags": [
          "Operation",
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/rotate-credentials": {
      "post": {
        "deprecated": true,
        "description": "This endpoint is deprecated since 2024-01-26. It will not work for clusters with Kubernetes v1.27+, or if the new endpoints for kubeconfig or credentials rotation have already been used. Use [start-credentials-rotation](#tag/Credentials/operation/SkeService_StartClusterCredentialsRotation) instead to rotate all cluster credentials. For more information, see [How to rotate SKE credentials](https://docs.stackit.cloud/display/STACKIT/How+to+rotate+SKE+credentials).\n\nTrigger credential rotation. The old credentials (kubeconfig) will be invalid after the operation.",
        "operationId": "SkeService_TriggerClusterCredentialRotation",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use GetCluster endpoint to read the status of the cluster via status.conditions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Rotate cluster credentials",
        "tags": [
          "Operation",
          "Credentials"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/start-credentials-rotation": {
      "post": {
        "description": "Start cluster credentials rotation. This is step 1 of a two-step process. Complete the rotation using [complete-credentials-rotation](#tag/Credentials/operation/SkeService_CompleteClusterCredentialsRotation).",
        "operationId": "SkeService_StartClusterCredentialsRotation",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use the [get cluster](#tag/Cluster/operation/SkeService_GetCluster) endpoint to get the status of the operation from `status.credentialsRotation`."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Start cluster credentials rotation",
        "tags": [
          "Operation",
          "Credentials"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/projects/{projectId}/clusters/{clusterName}/wakeup": {
      "post": {
        "description": "Trigger immediate wake up of the cluster. If the cluster is already in running state, the method does nothing.",
        "operationId": "SkeService_TriggerClusterWakeup",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously. Use GetCluster endpoint to read the status of the cluster via status.conditions."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Trigger cluster wakeup",
        "tags": [
          "Operation",
          "Cluster"
        ],
        "x-stackit-authorization": {
          "actions": [
            "project.resource.write"
          ],
          "resource-id": "projectId",
          "resource-id-type": "dynamic",
          "resource-type": "project",
          "service-enablement": {
            "services": [
              "cloud.stackit.ske"
            ]
          }
        },
        "x-viewer-permissions": {
          "actions": [
            "project.resources.edit"
          ]
        }
      }
    },
    "/v1/provider-options": {
      "get": {
        "description": "Returns a list of supported Kubernetes versions and a list of supported machine types for the cluster nodes.",
        "operationId": "SkeService_GetProviderOptions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1ProviderOptions"
                }
              }
            },
            "description": "A successful response."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "List provider options",
        "tags": [
          "ProviderOptions"
        ],
        "x-stackit-authorization": {
          "disabled": true
        }
      }
    },
    "/v1/system/projects/{projectId}": {
      "delete": {
        "description": "System endpoint for /v1/projects/{projectId}",
        "operationId": "SkeService_System_DeleteProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted. Deletion happens asynchronously."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Invalid request."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Delete a project (With system permissions)",
        "tags": [
          "System"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.ske.delete"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-stackit-upstream": {
          "path": "/v1/projects/{projectId}"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.ske.delete"
          ]
        }
      },
      "get": {
        "description": "System endpoint for /v1/projects/{projectId}",
        "operationId": "SkeService_System_GetProject",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1Project"
                }
              }
            },
            "description": "A successful response."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Project not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Get a Project (With system permissions)",
        "tags": [
          "System"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.ske.delete"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-stackit-upstream": {
          "path": "/v1/projects/{projectId}"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.ske.delete"
          ]
        }
      }
    },
    "/v1/system/projects/{projectId}/clusters/{clusterName}/reconcile": {
      "post": {
        "description": "System endpoint for /v1/projects/{projectId}/clusters/{clusterName}/reconcile",
        "operationId": "SkeService_System_TriggerClusterReconciliation",
        "parameters": [
          {
            "in": "path",
            "name": "projectId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "clusterName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "A successful response."
          },
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Accepted, execution happens asynchronously."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            },
            "description": "Cluster not found."
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1RuntimeError"
                }
              }
            },
            "description": "An unexpected error response."
          }
        },
        "summary": "Trigger cluster reconciliation (With system permissions)",
        "tags": [
          "System"
        ],
        "x-stackit-authorization": {
          "actions": [
            "system.ske.reconcile"
          ],
          "resource-id": "system",
          "resource-id-type": "static",
          "resource-type": "system"
        },
        "x-stackit-scope": {
          "visibility": "private"
        },
        "x-stackit-upstream": {
          "path": "/v1/projects/{projectId}/clusters/{clusterName}/reconcile"
        },
        "x-viewer-permissions": {
          "actions": [
            "system.ske.reconcile"
          ]
        }
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "servers": [
    {
      "description": "The SKE API provides endpoints to create, update, delete clusters within STACKIT",
      "url": "https://ske.api.eu01.stackit.cloud"
    }
  ],
  "tags": [
    {
      "description": "Cluster related actions",
      "name": "Cluster"
    },
    {
      "description": "Endpoints for credentials. See [How to rotate SKE credentials](https://docs.stackit.cloud/display/STACKIT/How+to+rotate+SKE+credentials) for details.",
      "name": "Credentials"
    },
    {
      "description": "Cluster operations",
      "name": "Operation"
    },
    {
      "description": "Endpoints for provider-options",
      "name": "ProviderOptions"
    },
    {
      "description": "Project related actions",
      "name": "Project"
    }
  ],
  "x-original-swagger-version": "2.0",
  "x-stackit-api": {
    "type": "stackit"
  },
  "x-stackit-scope": {
    "visibility": "public"
  }
}